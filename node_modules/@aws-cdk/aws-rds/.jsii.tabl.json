{
  "version": "2",
  "toolVersion": "1.55.1",
  "snippets": {
    "28b6b65a1be4b841bb576c5bb13aad1597a2be92780f7ff8026776a251aaf9a9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_rds as rds",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.RDS;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.rds.*;",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"",
          "version": "1"
        },
        "$": {
          "source": "import * as rds from '@aws-cdk/aws-rds';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 15
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as rds from '@aws-cdk/aws-rds';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "9f1956e5100276c1ea9eb6c96d229cccde33d383552f132e47a4d18936a30f03": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora_mysql(version=rds.AuroraMysqlEngineVersion.VER_2_08_1),\n    credentials=rds.Credentials.from_generated_secret(\"clusteradmin\"),  # Optional - will default to 'admin' username and generated password\n    instance_props=rds.InstanceProps(\n        # optional , defaults to t3.medium\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n        vpc_subnets=ec2.SubnetSelection(\n            subnet_type=ec2.SubnetType.PRIVATE\n        ),\n        vpc=vpc\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AuroraMysql(new AuroraMysqlClusterEngineProps { Version = AuroraMysqlEngineVersion.VER_2_08_1 }),\n    Credentials = Credentials.FromGeneratedSecret(\"clusteradmin\"),  // Optional - will default to 'admin' username and generated password\n    InstanceProps = new InstanceProps {\n        // optional , defaults to t3.medium\n        InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.SMALL),\n        VpcSubnets = new SubnetSelection {\n            SubnetType = SubnetType.PRIVATE\n        },\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.auroraMysql(AuroraMysqlClusterEngineProps.builder().version(AuroraMysqlEngineVersion.VER_2_08_1).build()))\n        .credentials(Credentials.fromGeneratedSecret(\"clusteradmin\")) // Optional - will default to 'admin' username and generated password\n        .instanceProps(InstanceProps.builder()\n                // optional , defaults to t3.medium\n                .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.SMALL))\n                .vpcSubnets(SubnetSelection.builder()\n                        .subnetType(SubnetType.PRIVATE)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine.auroraMysql(&auroraMysqlClusterEngineProps{\n\t\tversion: rds.auroraMysqlEngineVersion_VER_2_08_1(),\n\t}),\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"clusteradmin\")),\n\t // Optional - will default to 'admin' username and generated password\n\tinstanceProps: &instanceProps{\n\t\t// optional , defaults to t3.medium\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_SMALL),\n\t\tvpcSubnets: &subnetSelection{\n\t\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t\t},\n\t\tvpc: vpc,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.AuroraMysqlClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion#VER_2_08_1",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#auroraMysql",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fea865a2070aef487358ddda0a568a72e18a5da9eda84f13d267fc638facd2a1"
    },
    "f5df07eb7b292f106b9d95a496adc934ab19b89031a6f3eccc50d27e3b6c0fb3": {
      "translations": {
        "python": {
          "source": "custom_engine_version = rds.AuroraMysqlEngineVersion.of(\"5.7.mysql_aurora.2.08.1\")",
          "version": "2"
        },
        "csharp": {
          "source": "AuroraMysqlEngineVersion customEngineVersion = AuroraMysqlEngineVersion.Of(\"5.7.mysql_aurora.2.08.1\");",
          "version": "1"
        },
        "java": {
          "source": "AuroraMysqlEngineVersion customEngineVersion = AuroraMysqlEngineVersion.of(\"5.7.mysql_aurora.2.08.1\");",
          "version": "1"
        },
        "go": {
          "source": "customEngineVersion := rds.auroraMysqlEngineVersion.of(jsii.String(\"5.7.mysql_aurora.2.08.1\"))",
          "version": "1"
        },
        "$": {
          "source": "const customEngineVersion = rds.AuroraMysqlEngineVersion.of('5.7.mysql_aurora.2.08.1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 44
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst customEngineVersion = rds.AuroraMysqlEngineVersion.of('5.7.mysql_aurora.2.08.1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "4ece9ecd0e0d55ca321f8b53e2edc10453407e954e53789e035a462f32bd62a6"
    },
    "6facc7653bb79f8ec15f4b8939cc98e8513caf66bd881dd81045d0487c84e2fd": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrds.NewDatabaseClusterFromSnapshot(this, jsii.String(\"Database\"), &databaseClusterFromSnapshotProps{\n\tengine: rds.databaseClusterEngine.aurora(&auroraClusterEngineProps{\n\t\tversion: rds.auroraEngineVersion_VER_1_22_2(),\n\t}),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n\tsnapshotIdentifier: jsii.String(\"mySnapshot\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 55
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "420018d37c80d8e3dc17c5624d0d265848471ef2afecb838b0220600d19ee37d"
    },
    "3df98b691d42b1a04867c8c00ffd50c7d34fbd03c40abd777378865922becc61": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    credentials=rds.Credentials.from_generated_secret(\"syscdk\"),  # Optional - will default to 'admin' username and generated password\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.SMALL),\n    Credentials = Credentials.FromGeneratedSecret(\"syscdk\"),  // Optional - will default to 'admin' username and generated password\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.SMALL))\n        .credentials(Credentials.fromGeneratedSecret(\"syscdk\")) // Optional - will default to 'admin' username and generated password\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_SMALL),\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"syscdk\")),\n\t // Optional - will default to 'admin' username and generated password\n\tvpc: vpc,\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 72
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 34,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7b09f6545a01b2cdf8339a341b7e2665de453e2a64011615becfe254c26d569b"
    },
    "0223eae04af38af848c2d5bd95bb1d4e17a1b462aee00664e45a04de6d9afe82": {
      "translations": {
        "python": {
          "source": "custom_engine_version = rds.OracleEngineVersion.of(\"19.0.0.0.ru-2020-04.rur-2020-04.r1\", \"19\")",
          "version": "2"
        },
        "csharp": {
          "source": "OracleEngineVersion customEngineVersion = OracleEngineVersion.Of(\"19.0.0.0.ru-2020-04.rur-2020-04.r1\", \"19\");",
          "version": "1"
        },
        "java": {
          "source": "OracleEngineVersion customEngineVersion = OracleEngineVersion.of(\"19.0.0.0.ru-2020-04.rur-2020-04.r1\", \"19\");",
          "version": "1"
        },
        "go": {
          "source": "customEngineVersion := rds.oracleEngineVersion.of(jsii.String(\"19.0.0.0.ru-2020-04.rur-2020-04.r1\"), jsii.String(\"19\"))",
          "version": "1"
        },
        "$": {
          "source": "const customEngineVersion = rds.OracleEngineVersion.of('19.0.0.0.ru-2020-04.rur-2020-04.r1', '19');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 89
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst customEngineVersion = rds.OracleEngineVersion.of('19.0.0.0.ru-2020-04.rur-2020-04.r1', '19');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "e4ca1b6421e131661e0a1c0601f3b9682386811ae4cf64335e5cd9a2ae93f39c"
    },
    "913a6b83ef16b067c61e79477ae480b10e448890b4517f4db748cb8bcd2e2d49": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpc=vpc,\n    max_allocated_storage=200\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.SMALL),\n    Vpc = vpc,\n    MaxAllocatedStorage = 200\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.SMALL))\n        .vpc(vpc)\n        .maxAllocatedStorage(200)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_SMALL),\n\tvpc: vpc,\n\tmaxAllocatedStorage: jsii.Number(200),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n  vpc,\n  maxAllocatedStorage: 200,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 100
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n  vpc,\n  maxAllocatedStorage: 200,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9a477624572ed2d76f391401272ea46a4bca3bebef161c875f66452c49381f90"
    },
    "5d3bcd67397cba005e38f29b8264fc439bbf0b02520846658344bd643677bb5c": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# source_instance: rds.DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar sourceInstance databaseInstance\nrds.NewDatabaseInstanceFromSnapshot(this, jsii.String(\"Instance\"), &databaseInstanceFromSnapshotProps{\n\tsnapshotIdentifier: jsii.String(\"my-snapshot\"),\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n})\nrds.NewDatabaseInstanceReadReplica(this, jsii.String(\"ReadReplica\"), &databaseInstanceReadReplicaProps{\n\tsourceDatabaseInstance: sourceInstance,\n\tinstanceType: ec2.*instanceType.of(ec2.*instanceClass_BURSTABLE2, ec2.*instanceSize_LARGE),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 114
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "90e24cbe234db51a0fc8cca6bd8fbeb49a5535331c5d6d7d24131d6b6a146094"
    },
    "db829f1a4d7c4b7279d532cdd002a019feb495e02e6374f1b27d0ce94c96c042": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Set open cursors with parameter group\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"open_cursors\": jsii.String(\"2500\"),\n\t},\n})\n\noptionGroup := rds.NewOptionGroup(this, jsii.String(\"OptionGroup\"), &optionGroupProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tconfigurations: []optionConfiguration{\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"LOCATOR\"),\n\t\t},\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"OEM\"),\n\t\t\tport: jsii.Number(1158),\n\t\t\tvpc: vpc,\n\t\t},\n\t},\n})\n\n// Allow connections to OEM\noptionGroup.optionConnections.oEM.connections.allowDefaultPortFromAnyIpv4()\n\n// Database instance with production values\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tlicenseModel: rds.licenseModel_BRING_YOUR_OWN_LICENSE,\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_MEDIUM),\n\tmultiAz: jsii.Boolean(true),\n\tstorageType: rds.storageType_IO1,\n\tcredentials: rds.credentials.fromUsername(jsii.String(\"syscdk\")),\n\tvpc: vpc,\n\tdatabaseName: jsii.String(\"ORCL\"),\n\tstorageEncrypted: jsii.Boolean(true),\n\tbackupRetention: cdk.duration.days(jsii.Number(7)),\n\tmonitoringInterval: cdk.*duration.seconds(jsii.Number(60)),\n\tenablePerformanceInsights: jsii.Boolean(true),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"trace\"),\n\t\tjsii.String(\"audit\"),\n\t\tjsii.String(\"alert\"),\n\t\tjsii.String(\"listener\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_MONTH,\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n})\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4()\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser()\n\n// Add alarm for high CPU\n// Add alarm for high CPU\ncloudwatch.NewAlarm(this, jsii.String(\"HighCPU\"), &alarmProps{\n\tmetric: instance.metricCPUUtilization(),\n\tthreshold: jsii.Number(90),\n\tevaluationPeriods: jsii.Number(1),\n})\n\n// Trigger Lambda function on instance availability events\nfn := lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = (event) => console.log(event);\")),\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_12_X(),\n})\n\navailabilityRule := instance.onEvent(jsii.String(\"Availability\"), &onEventOptions{\n\ttarget: targets.NewLambdaFunction(fn),\n})\navailabilityRule.addEventPattern(&eventPattern{\n\tdetail: map[string]interface{}{\n\t\t\"EventCategories\": []interface{}{\n\t\t\tjsii.String(\"availability\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 138
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "ab85152a603a2f1ecc1ee993562e61f4e53ddb760405b917bab8fa23c977308d"
    },
    "1ca6f681a1d4ad25eff9e0b2564d8b9aba418c723c041ce3f2b5315ffe187cf8": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Set open cursors with parameter group\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"open_cursors\": jsii.String(\"2500\"),\n\t},\n})\n\noptionGroup := rds.NewOptionGroup(this, jsii.String(\"OptionGroup\"), &optionGroupProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tconfigurations: []optionConfiguration{\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"LOCATOR\"),\n\t\t},\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"OEM\"),\n\t\t\tport: jsii.Number(1158),\n\t\t\tvpc: vpc,\n\t\t},\n\t},\n})\n\n// Allow connections to OEM\noptionGroup.optionConnections.oEM.connections.allowDefaultPortFromAnyIpv4()\n\n// Database instance with production values\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tlicenseModel: rds.licenseModel_BRING_YOUR_OWN_LICENSE,\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_MEDIUM),\n\tmultiAz: jsii.Boolean(true),\n\tstorageType: rds.storageType_IO1,\n\tcredentials: rds.credentials.fromUsername(jsii.String(\"syscdk\")),\n\tvpc: vpc,\n\tdatabaseName: jsii.String(\"ORCL\"),\n\tstorageEncrypted: jsii.Boolean(true),\n\tbackupRetention: cdk.duration.days(jsii.Number(7)),\n\tmonitoringInterval: cdk.*duration.seconds(jsii.Number(60)),\n\tenablePerformanceInsights: jsii.Boolean(true),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"trace\"),\n\t\tjsii.String(\"audit\"),\n\t\tjsii.String(\"alert\"),\n\t\tjsii.String(\"listener\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_MONTH,\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n})\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4()\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser()\n\n// Add alarm for high CPU\n// Add alarm for high CPU\ncloudwatch.NewAlarm(this, jsii.String(\"HighCPU\"), &alarmProps{\n\tmetric: instance.metricCPUUtilization(),\n\tthreshold: jsii.Number(90),\n\tevaluationPeriods: jsii.Number(1),\n})\n\n// Trigger Lambda function on instance availability events\nfn := lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = (event) => console.log(event);\")),\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_12_X(),\n})\n\navailabilityRule := instance.onEvent(jsii.String(\"Availability\"), &onEventOptions{\n\ttarget: targets.NewLambdaFunction(fn),\n})\navailabilityRule.addEventPattern(&eventPattern{\n\tdetail: map[string]interface{}{\n\t\t\"EventCategories\": []interface{}{\n\t\t\tjsii.String(\"availability\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 149
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "ab85152a603a2f1ecc1ee993562e61f4e53ddb760405b917bab8fa23c977308d"
    },
    "0173c7d98746bf2cf13257d228cd63c5e19ea119ffb61f0e98ce622fbe8eb380": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# Setting public accessibility for DB instance\nrds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(\n        version=rds.MysqlEngineVersion.VER_8_0_19\n    ),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    ),\n    publicly_accessible=True\n)\n\n# Setting public accessibility for DB cluster\nrds.DatabaseCluster(self, \"DatabaseCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(\n        vpc=vpc,\n        vpc_subnets=ec2.SubnetSelection(\n            subnet_type=ec2.SubnetType.PRIVATE\n        ),\n        publicly_accessible=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n// Setting public accessibility for DB instance\n// Setting public accessibility for DB instance\nnew DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps {\n        Version = MysqlEngineVersion.VER_8_0_19\n    }),\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    },\n    PubliclyAccessible = true\n});\n\n// Setting public accessibility for DB cluster\n// Setting public accessibility for DB cluster\nnew DatabaseCluster(this, \"DatabaseCluster\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps {\n        Vpc = vpc,\n        VpcSubnets = new SubnetSelection {\n            SubnetType = SubnetType.PRIVATE\n        },\n        PubliclyAccessible = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n// Setting public accessibility for DB instance\n// Setting public accessibility for DB instance\nDatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder()\n                .version(MysqlEngineVersion.VER_8_0_19)\n                .build()))\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .publiclyAccessible(true)\n        .build();\n\n// Setting public accessibility for DB cluster\n// Setting public accessibility for DB cluster\nDatabaseCluster.Builder.create(this, \"DatabaseCluster\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .vpcSubnets(SubnetSelection.builder()\n                        .subnetType(SubnetType.PRIVATE)\n                        .build())\n                .publiclyAccessible(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n// Setting public accessibility for DB instance\n// Setting public accessibility for DB instance\nrds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.mysql(&mySqlInstanceEngineProps{\n\t\tversion: rds.mysqlEngineVersion_VER_8_0_19(),\n\t}),\n\tvpc: vpc,\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t},\n\tpubliclyAccessible: jsii.Boolean(true),\n})\n\n// Setting public accessibility for DB cluster\n// Setting public accessibility for DB cluster\nrds.NewDatabaseCluster(this, jsii.String(\"DatabaseCluster\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t\tvpcSubnets: &subnetSelection{\n\t\t\tsubnetType: ec2.*subnetType_PRIVATE,\n\t\t},\n\t\tpubliclyAccessible: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n// Setting public accessibility for DB instance\nnew rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({\n    version: rds.MysqlEngineVersion.VER_8_0_19,\n  }),\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  },\n  publiclyAccessible: true,\n});\n\n// Setting public accessibility for DB cluster\nnew rds.DatabaseCluster(this, 'DatabaseCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    vpc,\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    publiclyAccessible: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 231
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Setting public accessibility for DB instance\nnew rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({\n    version: rds.MysqlEngineVersion.VER_8_0_19,\n  }),\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  },\n  publiclyAccessible: true,\n});\n\n// Setting public accessibility for DB cluster\nnew rds.DatabaseCluster(this, 'DatabaseCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    vpc,\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    publiclyAccessible: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 34,
        "104": 2,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 6,
        "194": 12,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ccda5151fc43e5eea1b8aae8284a15c619ead3b083b10e2edb9922405db6b31e"
    },
    "9f569f3caa8f767f2a0b870a16f7ccc9e719fd740e272ec01cd0f17fedc61b4b": {
      "translations": {
        "python": {
          "source": "# instance: rds.DatabaseInstance\n# fn: lambda.Function\n\nrule = instance.on_event(\"InstanceEvent\", target=targets.LambdaFunction(fn))",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\nFunction fn;\n\nRule rule = instance.OnEvent(\"InstanceEvent\", new OnEventOptions { Target = new LambdaFunction(fn) });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\nFunction fn;\n\nRule rule = instance.onEvent(\"InstanceEvent\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());",
          "version": "1"
        },
        "go": {
          "source": "var instance databaseInstance\nvar fn function\nrule := instance.onEvent(jsii.String(\"InstanceEvent\"), &onEventOptions{\n\ttarget: targets.NewLambdaFunction(fn),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\ndeclare const fn: lambda.Function;\nconst rule = instance.onEvent('InstanceEvent', { target: new targets.LambdaFunction(fn) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 263
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule = instance.onEvent('InstanceEvent', { target: new targets.LambdaFunction(fn) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "bd56b17d077ae2fc04fc86815018516473781b341c1c60577a8bb803798e6c2c"
    },
    "02f29b62f7fdc08930bdc84d2a8f946424c5349e16b72f134bc85d8816f64301": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nrds.DatabaseInstance(self, \"InstanceWithUsername\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\")\n)\n\nrds.DatabaseInstance(self, \"InstanceWithUsernameAndPassword\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_password(\"postgres\", SecretValue.ssm_secure(\"/dbPassword\", \"1\"))\n)\n\nmy_secret = secretsmanager.Secret.from_secret_name(self, \"DBSecret\", \"myDBLoginInfo\")\nrds.DatabaseInstance(self, \"InstanceWithSecretLogin\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_secret(my_secret)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nnew DatabaseInstance(this, \"InstanceWithUsername\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\")\n});\n\nnew DatabaseInstance(this, \"InstanceWithUsernameAndPassword\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromPassword(\"postgres\", SecretValue.SsmSecure(\"/dbPassword\", \"1\"))\n});\n\nISecret mySecret = Secret.FromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nnew DatabaseInstance(this, \"InstanceWithSecretLogin\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromSecret(mySecret)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nDatabaseInstance.Builder.create(this, \"InstanceWithUsername\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"InstanceWithUsernameAndPassword\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromPassword(\"postgres\", SecretValue.ssmSecure(\"/dbPassword\", \"1\")))\n        .build();\n\nISecret mySecret = Secret.fromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nDatabaseInstance.Builder.create(this, \"InstanceWithSecretLogin\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromSecret(mySecret))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nengine := rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\tversion: rds.postgresEngineVersion_VER_12_3(),\n})\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithUsername\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"postgres\")),\n})\n\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithUsernameAndPassword\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.*credentials.fromPassword(jsii.String(\"postgres\"), secretValue.ssmSecure(jsii.String(\"/dbPassword\"), jsii.String(\"1\"))),\n})\n\nmySecret := secretsmanager.secret.fromSecretName(this, jsii.String(\"DBSecret\"), jsii.String(\"myDBLoginInfo\"))\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithSecretLogin\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.*credentials.fromSecret(mySecret),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 276
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.Credentials#fromPassword",
        "@aws-cdk/aws-rds.Credentials#fromSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretName",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#ssmSecure",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 42,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 16,
        "196": 6,
        "197": 3,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "872c4f6627f81fcdd23b465e157df8d044964aed9a5b7b2aab3f1740efbbc370"
    },
    "e7279471a7153eaccbc2f6d503b16461ce767300d55fba45ee22d6945318fa74": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nmy_key = kms.Key(self, \"MyKey\")\n\nrds.DatabaseInstance(self, \"InstanceWithCustomizedSecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.ReplicaRegion(region=\"eu-west-1\"), secretsmanager.ReplicaRegion(region=\"eu-west-2\")]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nKey myKey = new Key(this, \"MyKey\");\n\nnew DatabaseInstance(this, \"InstanceWithCustomizedSecret\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\", new CredentialsBaseOptions {\n        SecretName = \"my-cool-name\",\n        EncryptionKey = myKey,\n        ExcludeCharacters = \"!&*^#@()\",\n        ReplicaRegions = new [] { new ReplicaRegion { Region = \"eu-west-1\" }, new ReplicaRegion { Region = \"eu-west-2\" } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nKey myKey = new Key(this, \"MyKey\");\n\nDatabaseInstance.Builder.create(this, \"InstanceWithCustomizedSecret\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\", CredentialsBaseOptions.builder()\n                .secretName(\"my-cool-name\")\n                .encryptionKey(myKey)\n                .excludeCharacters(\"!&*^#@()\")\n                .replicaRegions(List.of(ReplicaRegion.builder().region(\"eu-west-1\").build(), ReplicaRegion.builder().region(\"eu-west-2\").build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nengine := rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\tversion: rds.postgresEngineVersion_VER_12_3(),\n})\nmyKey := kms.NewKey(this, jsii.String(\"MyKey\"))\n\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithCustomizedSecret\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"postgres\"), &credentialsBaseOptions{\n\t\tsecretName: jsii.String(\"my-cool-name\"),\n\t\tencryptionKey: myKey,\n\t\texcludeCharacters: jsii.String(\"!&*^#@()\"),\n\t\treplicaRegions: []replicaRegion{\n\t\t\t&replicaRegion{\n\t\t\t\tregion: jsii.String(\"eu-west-1\"),\n\t\t\t},\n\t\t\t&replicaRegion{\n\t\t\t\tregion: jsii.String(\"eu-west-2\"),\n\t\t\t},\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 301
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.CredentialsBaseOptions",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "6037a87f60165d789b2feadfbfc4ffdb3f96476023707daf14019a0801d6d79c"
    },
    "e89f956d1bfb57855ff3c2b5b5ea83c4bd4d91cf1ce4cd94af1d9953c8daaf90": {
      "translations": {
        "python": {
          "source": "# cluster: rds.DatabaseCluster\n\ncluster.connections.allow_from_any_ipv4(ec2.Port.all_traffic(), \"Open to the world\")",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\ncluster.Connections.AllowFromAnyIpv4(Port.AllTraffic(), \"Open to the world\");",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\ncluster.connections.allowFromAnyIpv4(Port.allTraffic(), \"Open to the world\");",
          "version": "1"
        },
        "go": {
          "source": "var cluster databaseCluster\ncluster.connections.allowFromAnyIpv4(ec2.port.allTraffic(), jsii.String(\"Open to the world\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: rds.DatabaseCluster;\ncluster.connections.allowFromAnyIpv4(ec2.Port.allTraffic(), 'Open to the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 323
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFromAnyIpv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#allTraffic",
        "@aws-cdk/aws-rds.DatabaseCluster#connections"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: rds.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.connections.allowFromAnyIpv4(ec2.Port.allTraffic(), 'Open to the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 4,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "bb2a2a4e7b68d9710866218f9a194a691785c1537738bff9730e79be9ab8b1a9"
    },
    "4426b26f0a66f8024ad2178e361e1669ffc8db82a06540582f6fc1a9b79eccae": {
      "translations": {
        "python": {
          "source": "# cluster: rds.DatabaseCluster\n\nwrite_address = cluster.cluster_endpoint.socket_address",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\nstring writeAddress = cluster.ClusterEndpoint.SocketAddress;",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\nString writeAddress = cluster.getClusterEndpoint().getSocketAddress();",
          "version": "1"
        },
        "go": {
          "source": "var cluster databaseCluster\nwriteAddress := cluster.clusterEndpoint.socketAddress",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: rds.DatabaseCluster;\nconst writeAddress = cluster.clusterEndpoint.socketAddress;   // \"HOSTNAME:PORT\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 331
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseCluster#clusterEndpoint",
        "@aws-cdk/aws-rds.Endpoint#socketAddress"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: rds.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst writeAddress = cluster.clusterEndpoint.socketAddress;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "76b680e82872de8e821968b0545c0ca9e41b8212ec61676bf50b9604c5fe2f37"
    },
    "5aa87cf425c49ec6fc6b256a512f0fa6da70a098a6e3f7f59e98462c0ffc16d1": {
      "translations": {
        "python": {
          "source": "# instance: rds.DatabaseInstance\n\naddress = instance.instance_endpoint.socket_address",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\n\nstring address = instance.InstanceEndpoint.SocketAddress;",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\n\nString address = instance.getInstanceEndpoint().getSocketAddress();",
          "version": "1"
        },
        "go": {
          "source": "var instance databaseInstance\naddress := instance.instanceEndpoint.socketAddress",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\nconst address = instance.instanceEndpoint.socketAddress;   // \"HOSTNAME:PORT\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 338
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstance#instanceEndpoint",
        "@aws-cdk/aws-rds.Endpoint#socketAddress"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst address = instance.instanceEndpoint.socketAddress;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "ba1a9fe9105802bfae0c6542777313a335bea0bdd9f67cf868797e38edfb48fd"
    },
    "5578f9edce2648925ebc56c2163a1610655fb797309fe8a86c339e3e5663389a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n# instance: rds.DatabaseInstance\n\ninstance.add_rotation_single_user(\n    automatically_after=cdk.Duration.days(7),  # defaults to 30 days\n    exclude_characters=\"!@#$%^&*\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\nDatabaseInstance instance;\ninstance.AddRotationSingleUser(new RotationSingleUserOptions {\n    AutomaticallyAfter = Duration.Days(7),  // defaults to 30 days\n    ExcludeCharacters = \"!@#$%^&*\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\nDatabaseInstance instance;\n\ninstance.addRotationSingleUser(RotationSingleUserOptions.builder()\n        .automaticallyAfter(Duration.days(7)) // defaults to 30 days\n        .excludeCharacters(\"!@#$%^&*\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar instance databaseInstance\ninstance.addRotationSingleUser(&rotationSingleUserOptions{\n\tautomaticallyAfter: cdk.duration.days(jsii.Number(7)),\n\t // defaults to 30 days\n\texcludeCharacters: jsii.String(\"!@#$%^&*\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\ndeclare const instance: rds.DatabaseInstance;\ninstance.addRotationSingleUser({\n  automaticallyAfter: cdk.Duration.days(7), // defaults to 30 days\n  excludeCharacters: '!@#$%^&*', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 347
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.RotationSingleUserOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ninstance.addRotationSingleUser({\n  automaticallyAfter: cdk.Duration.days(7), // defaults to 30 days\n  excludeCharacters: '!@#$%^&*', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f71a74ee2b222b94884d884c4a68a5179dbf2d2ba38c6abda2b5b63e1e3096df"
    },
    "4d6f62ac73433cc8b59277377a641abecfacb59c52bc00e330bdaf852cfdcca0": {
      "translations": {
        "python": {
          "source": "cluster = rds.DatabaseCluster(stack, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n        vpc=vpc\n    )\n)\n\ncluster.add_rotation_single_user()",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster = new DatabaseCluster(stack, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps {\n        InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.SMALL),\n        Vpc = vpc\n    }\n});\n\ncluster.AddRotationSingleUser();",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster = DatabaseCluster.Builder.create(stack, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder()\n                .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.SMALL))\n                .vpc(vpc)\n                .build())\n        .build();\n\ncluster.addRotationSingleUser();",
          "version": "1"
        },
        "go": {
          "source": "cluster := rds.NewDatabaseCluster(stack, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_SMALL),\n\t\tvpc: vpc,\n\t},\n})\n\ncluster.addRotationSingleUser()",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new rds.DatabaseCluster(stack, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    vpc,\n  },\n});\n\ncluster.addRotationSingleUser();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 357
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#addRotationSingleUser",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-rds-cluster-rotation');\n\nconst vpc = new ec2.Vpc(stack, 'VPC');\n\n/// !show\nconst cluster = new rds.DatabaseCluster(stack, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    vpc,\n  },\n});\n\ncluster.addRotationSingleUser();\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 22,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1
      },
      "fqnsFingerprint": "27157b422aaccde43c12c98bc69a7f1cf7b8860b35218b9a329e71bac201ad2d"
    },
    "f59fd907511f92778c00e2fbf4ac2410b4bd69c0b22f1eed14ae46b937bad7f1": {
      "translations": {
        "python": {
          "source": "# instance: rds.DatabaseInstance\n# my_imported_secret: rds.DatabaseSecret\n\ninstance.add_rotation_multi_user(\"MyUser\",\n    secret=my_imported_secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\nDatabaseSecret myImportedSecret;\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {\n    Secret = myImportedSecret\n});",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\nDatabaseSecret myImportedSecret;\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder()\n        .secret(myImportedSecret)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var instance databaseInstance\nvar myImportedSecret databaseSecret\ninstance.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\tsecret: myImportedSecret,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\ndeclare const myImportedSecret: rds.DatabaseSecret;\ninstance.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 371
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\ndeclare const myImportedSecret: rds.DatabaseSecret;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ninstance.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "3f43fca00bb36228c7979693d7738337bdb8f40594180cf84a3851d55e561659"
    },
    "9744f64511e589001ae6af17fcd93e99c56a9053da203f256218109f0e6a7b76": {
      "translations": {
        "python": {
          "source": "# instance: rds.DatabaseInstance\n\nmy_user_secret = rds.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    secret_name=\"my-user-secret\",  # optional, defaults to a CloudFormation-generated name\n    master_secret=instance.secret,\n    exclude_characters=\"{}[]()'\\\"/\\\\\"\n)\nmy_user_secret_attached = my_user_secret.attach(instance) # Adds DB connections information in the secret\n\ninstance.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    SecretName = \"my-user-secret\",  // optional, defaults to a CloudFormation-generated name\n    MasterSecret = instance.Secret,\n    ExcludeCharacters = \"{}[]()'\\\"/\\\\\"\n});\nISecret myUserSecretAttached = myUserSecret.Attach(instance); // Adds DB connections information in the secret\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .secretName(\"my-user-secret\") // optional, defaults to a CloudFormation-generated name\n        .masterSecret(instance.getSecret())\n        .excludeCharacters(\"{}[]()'\\\"/\\\\\")\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "go": {
          "source": "var instance databaseInstance\nmyUserSecret := rds.NewDatabaseSecret(this, jsii.String(\"MyUserSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"myuser\"),\n\tsecretName: jsii.String(\"my-user-secret\"),\n\t // optional, defaults to a CloudFormation-generated name\n\tmasterSecret: instance.secret,\n\texcludeCharacters: jsii.String(\"{}[]()'\\\"/\\\\\"),\n})\nmyUserSecretAttached := myUserSecret.attach(instance) // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\t // Add rotation using the multi user scheme\n\tsecret: myUserSecretAttached,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 381
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstance#secret",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "be17f4fa80a87c209a912bfa60a91823b4f7cc8814534f105308fa18d111d3ad"
    },
    "ee5b1ed0c0ce86f4670bcea7b55e0f8eab9ae732304d5c8d090a414f0d1a1f2b": {
      "translations": {
        "python": {
          "source": "# instance: rds.DatabaseInstance\n# my_endpoint: ec2.InterfaceVpcEndpoint\n\n\ninstance.add_rotation_single_user(\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT),  # Place rotation Lambda in private subnets\n    endpoint=my_endpoint\n)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\nInterfaceVpcEndpoint myEndpoint;\n\n\ninstance.AddRotationSingleUser(new RotationSingleUserOptions {\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PRIVATE_WITH_NAT },  // Place rotation Lambda in private subnets\n    Endpoint = myEndpoint\n});",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\nInterfaceVpcEndpoint myEndpoint;\n\n\ninstance.addRotationSingleUser(RotationSingleUserOptions.builder()\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PRIVATE_WITH_NAT).build()) // Place rotation Lambda in private subnets\n        .endpoint(myEndpoint)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var instance databaseInstance\nvar myEndpoint interfaceVpcEndpoint\n\ninstance.addRotationSingleUser(&rotationSingleUserOptions{\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE_WITH_NAT,\n\t},\n\t // Place rotation Lambda in private subnets\n\tendpoint: myEndpoint,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\ndeclare const myEndpoint: ec2.InterfaceVpcEndpoint;\n\ninstance.addRotationSingleUser({\n  vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_NAT }, // Place rotation Lambda in private subnets\n  endpoint: myEndpoint, // Use VPC interface endpoint\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 404
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-rds.RotationSingleUserOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\ndeclare const myEndpoint: ec2.InterfaceVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ninstance.addRotationSingleUser({\n  vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_NAT }, // Place rotation Lambda in private subnets\n  endpoint: myEndpoint, // Use VPC interface endpoint\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 15,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "773f46fbde7fff5080b738b58dd6eb9785be24c979abd9fd57409270309761e0"
    },
    "9b4ce513d0172ddcd4431f61151ff735749b157df1c0bd82ba0a98c8b8d8a8f2": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    iam_authentication=True\n)\nrole = iam.Role(self, \"DBRole\", assumed_by=iam.AccountPrincipal(self.account))\ninstance.grant_connect(role)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    IamAuthentication = true\n});\nRole role = new Role(this, \"DBRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\ninstance.GrantConnect(role);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .iamAuthentication(true)\n        .build();\nRole role = Role.Builder.create(this, \"DBRole\").assumedBy(new AccountPrincipal(this.account)).build();\ninstance.grantConnect(role);",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.mysql(&mySqlInstanceEngineProps{\n\t\tversion: rds.mysqlEngineVersion_VER_8_0_19(),\n\t}),\n\tvpc: vpc,\n\tiamAuthentication: jsii.Boolean(true),\n})\nrole := iam.NewRole(this, jsii.String(\"DBRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(this.account),\n})\ninstance.grantConnect(role)",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  iamAuthentication: true, // Optional - will be automatically set if you call grantConnect().\n});\nconst role = new iam.Role(this, 'DBRole', { assumedBy: new iam.AccountPrincipal(this.account) });\ninstance.grantConnect(role); // Grant the role connection access to the DB.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 426
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#grantConnect",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19",
        "@aws-cdk/core.Stack#account",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  iamAuthentication: true, // Optional - will be automatically set if you call grantConnect().\n});\nconst role = new iam.Role(this, 'DBRole', { assumedBy: new iam.AccountPrincipal(this.account) });\ninstance.grantConnect(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 26,
        "104": 3,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1f3c79c1632cb7fbcfe6ab0dfa7c563625576286843711a546fb1bc3f78b5bd8"
    },
    "466a673d9d83dc0d28889622b2d830ff7904f3b39c7d9b829bc7ec2d4c985c32": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n})\n\nproxy := rds.NewDatabaseProxy(this, jsii.String(\"Proxy\"), &databaseProxyProps{\n\tproxyTarget: rds.proxyTarget.fromCluster(cluster),\n\tsecrets: []iSecret{\n\t\tcluster.secret,\n\t},\n\tvpc: vpc,\n})\n\nrole := iam.NewRole(this, jsii.String(\"DBProxyRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(this.account),\n})\nproxy.grantConnect(role, jsii.String(\"admin\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 439
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "dc223bebdc9ce0f212d113a0d0ae55888b3061f8afd79cb561dd33c38e1b4f74"
    },
    "17846389cf2413aa4cb978a4b312811ba5aec5ecb4751b5166f153b2ff8d673f": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrole = iam.Role(self, \"RDSDirectoryServicesRole\",\n    assumed_by=iam.ServicePrincipal(\"rds.amazonaws.com\"),\n    managed_policies=[\n        iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AmazonRDSDirectoryServiceAccess\")\n    ]\n)\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    domain=\"d-????????\",  # The ID of the domain for the instance to join.\n    domain_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nRole role = new Role(this, \"RDSDirectoryServicesRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"rds.amazonaws.com\"),\n    ManagedPolicies = new [] { ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\") }\n});\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    Domain = \"d-????????\",  // The ID of the domain for the instance to join.\n    DomainRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nRole role = Role.Builder.create(this, \"RDSDirectoryServicesRole\")\n        .assumedBy(new ServicePrincipal(\"rds.amazonaws.com\"))\n        .managedPolicies(List.of(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\")))\n        .build();\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .domain(\"d-????????\") // The ID of the domain for the instance to join.\n        .domainRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrole := iam.NewRole(this, jsii.String(\"RDSDirectoryServicesRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"rds.amazonaws.com\")),\n\tmanagedPolicies: []iManagedPolicy{\n\t\tiam.managedPolicy.fromAwsManagedPolicyName(jsii.String(\"service-role/AmazonRDSDirectoryServiceAccess\")),\n\t},\n})\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.mysql(&mySqlInstanceEngineProps{\n\t\tversion: rds.mysqlEngineVersion_VER_8_0_19(),\n\t}),\n\tvpc: vpc,\n\tdomain: jsii.String(\"d-????????\"),\n\t // The ID of the domain for the instance to join.\n\tdomainRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 468
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "84d849b9fe74cdf2ed3f91e20569f2c894c56feffaa52c16590b2db2246bb38d"
    },
    "5291dd8d92bf2c89bc789f96875571a8a2a2d53257894b871107ec6e1f03c1ba": {
      "translations": {
        "python": {
          "source": "# The number of database connections in use (average over 5 minutes)\n# instance: rds.DatabaseInstance\n\n# Average CPU utilization over 5 minutes\n# cluster: rds.DatabaseCluster\n\ndb_connections = instance.metric_database_connections()\ncpu_utilization = cluster.metric_cPUUtilization()\n\n# The average amount of time taken per disk I/O operation (average over 1 minute)\nread_latency = instance.metric(\"ReadLatency\", statistic=\"Average\", period=Duration.seconds(60))",
          "version": "2"
        },
        "csharp": {
          "source": "// The number of database connections in use (average over 5 minutes)\nDatabaseInstance instance;\n\n// Average CPU utilization over 5 minutes\nDatabaseCluster cluster;\n\nMetric dbConnections = instance.MetricDatabaseConnections();\nMetric cpuUtilization = cluster.MetricCPUUtilization();\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nMetric readLatency = instance.Metric(\"ReadLatency\", new MetricOptions { Statistic = \"Average\", Period = Duration.Seconds(60) });",
          "version": "1"
        },
        "java": {
          "source": "// The number of database connections in use (average over 5 minutes)\nDatabaseInstance instance;\n\n// Average CPU utilization over 5 minutes\nDatabaseCluster cluster;\n\nMetric dbConnections = instance.metricDatabaseConnections();\nMetric cpuUtilization = cluster.metricCPUUtilization();\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nMetric readLatency = instance.metric(\"ReadLatency\", MetricOptions.builder().statistic(\"Average\").period(Duration.seconds(60)).build());",
          "version": "1"
        },
        "go": {
          "source": "// The number of database connections in use (average over 5 minutes)\nvar instance databaseInstance\n\n// Average CPU utilization over 5 minutes\nvar cluster databaseCluster\ndbConnections := instance.metricDatabaseConnections()\ncpuUtilization := cluster.metricCPUUtilization()\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nreadLatency := instance.metric(jsii.String(\"ReadLatency\"), &metricOptions{\n\tstatistic: jsii.String(\"Average\"),\n\tperiod: duration.seconds(jsii.Number(60)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The number of database connections in use (average over 5 minutes)\ndeclare const instance: rds.DatabaseInstance;\nconst dbConnections = instance.metricDatabaseConnections();\n\n// Average CPU utilization over 5 minutes\ndeclare const cluster: rds.DatabaseCluster;\nconst cpuUtilization = cluster.metricCPUUtilization();\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nconst readLatency = instance.metric('ReadLatency', { statistic: 'Average', period: Duration.seconds(60) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 494
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The number of database connections in use (average over 5 minutes)\ndeclare const instance: rds.DatabaseInstance;\n\n// Average CPU utilization over 5 minutes\ndeclare const cluster: rds.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst dbConnections = instance.metricDatabaseConnections();\nconst cpuUtilization = cluster.metricCPUUtilization();\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nconst readLatency = instance.metric('ReadLatency', { statistic: 'Average', period: Duration.seconds(60) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 19,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6d3f8f774262b78a80744eaee27ec490f52836e587be23f22fbdeba49830a3cc"
    },
    "2167f47d68158b1a5a0147909de22d40be7e97327327ae4b90bef8aafe8e579a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\n\n# vpc: ec2.Vpc\n\nimport_bucket = s3.Bucket(self, \"importbucket\")\nexport_bucket = s3.Bucket(self, \"exportbucket\")\nrds.DatabaseCluster(self, \"dbcluster\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    s3_import_buckets=[import_bucket],\n    s3_export_buckets=[export_bucket]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\n\nVpc vpc;\n\nBucket importBucket = new Bucket(this, \"importbucket\");\nBucket exportBucket = new Bucket(this, \"exportbucket\");\nnew DatabaseCluster(this, \"dbcluster\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    S3ImportBuckets = new [] { importBucket },\n    S3ExportBuckets = new [] { exportBucket }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\n\nVpc vpc;\n\nBucket importBucket = new Bucket(this, \"importbucket\");\nBucket exportBucket = new Bucket(this, \"exportbucket\");\nDatabaseCluster.Builder.create(this, \"dbcluster\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .s3ImportBuckets(List.of(importBucket))\n        .s3ExportBuckets(List.of(exportBucket))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import s3 \"github.com/aws-samples/dummy/awscdkawss3\"\n\nvar vpc vpc\nimportBucket := s3.NewBucket(this, jsii.String(\"importbucket\"))\nexportBucket := s3.NewBucket(this, jsii.String(\"exportbucket\"))\nrds.NewDatabaseCluster(this, jsii.String(\"dbcluster\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n\ts3ImportBuckets: []iBucket{\n\t\timportBucket,\n\t},\n\ts3ExportBuckets: []*iBucket{\n\t\texportBucket,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const vpc: ec2.Vpc;\nconst importBucket = new s3.Bucket(this, 'importbucket');\nconst exportBucket = new s3.Bucket(this, 'exportbucket');\nnew rds.DatabaseCluster(this, 'dbcluster', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    vpc,\n  },\n  s3ImportBuckets: [importBucket],\n  s3ExportBuckets: [exportBucket],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 527
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-s3.Bucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst importBucket = new s3.Bucket(this, 'importbucket');\nconst exportBucket = new s3.Bucket(this, 'exportbucket');\nnew rds.DatabaseCluster(this, 'dbcluster', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    vpc,\n  },\n  s3ImportBuckets: [importBucket],\n  s3ExportBuckets: [exportBucket],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 22,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1141edbdfec39163d7932432eb2ae461a897ba85f0b54e42b233952c21789814"
    },
    "21c4d8976003d6ef0f7d50a34db55ac245924c9d7aee264b91abac17ca2950c0": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# security_group: ec2.SecurityGroup\n# secrets: List[secretsmanager.Secret[]]\n# db_instance: rds.DatabaseInstance\n\n\nproxy = db_instance.add_proxy(\"proxy\",\n    borrow_timeout=Duration.seconds(30),\n    max_connections_percent=50,\n    secrets=secrets,\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\nSecret[] secrets;\nDatabaseInstance dbInstance;\n\n\nDatabaseProxy proxy = dbInstance.AddProxy(\"proxy\", new DatabaseProxyOptions {\n    BorrowTimeout = Duration.Seconds(30),\n    MaxConnectionsPercent = 50,\n    Secrets = secrets,\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\nSecret[] secrets;\nDatabaseInstance dbInstance;\n\n\nDatabaseProxy proxy = dbInstance.addProxy(\"proxy\", DatabaseProxyOptions.builder()\n        .borrowTimeout(Duration.seconds(30))\n        .maxConnectionsPercent(50)\n        .secrets(secrets)\n        .vpc(vpc)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar securityGroup securityGroup\nvar secrets []secret\nvar dbInstance databaseInstance\n\nproxy := dbInstance.addProxy(jsii.String(\"proxy\"), &databaseProxyOptions{\n\tborrowTimeout: duration.seconds(jsii.Number(30)),\n\tmaxConnectionsPercent: jsii.Number(50),\n\tsecrets: secrets,\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const secrets: secretsmanager.Secret[];\ndeclare const dbInstance: rds.DatabaseInstance;\n\nconst proxy = dbInstance.addProxy('proxy', {\n    borrowTimeout: Duration.seconds(30),\n    maxConnectionsPercent: 50,\n    secrets,\n    vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 550
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#addProxy",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxyOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const secrets: secretsmanager.Secret[];\ndeclare const dbInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst proxy = dbInstance.addProxy('proxy', {\n    borrowTimeout: Duration.seconds(30),\n    maxConnectionsPercent: 50,\n    secrets,\n    vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 21,
        "130": 4,
        "153": 4,
        "169": 4,
        "174": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "f02332641c9add13f3d0102a8e5db56e4ad2b7d2571b521a1e571850b55583de"
    },
    "5e9a28e95785b1a003bbc4541b9191f20e9d9d7fef5d121458748239d12a0170": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n# my_logs_publishing_role: iam.Role\n# vpc: ec2.Vpc\n\n\n# Exporting logs from a cluster\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(\n        version=rds.AuroraEngineVersion.VER_1_17_9\n    ),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    cloudwatch_logs_exports=[\"error\", \"general\", \"slowquery\", \"audit\"],  # Export all available MySQL-based logs\n    cloudwatch_logs_retention=logs.RetentionDays.THREE_MONTHS,  # Optional - default is to never expire logs\n    cloudwatch_logs_retention_role=my_logs_publishing_role\n)\n\n# Exporting logs from an instance\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.postgres(\n        version=rds.PostgresEngineVersion.VER_12_3\n    ),\n    vpc=vpc,\n    cloudwatch_logs_exports=[\"postgresql\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\nRole myLogsPublishingRole;\nVpc vpc;\n\n\n// Exporting logs from a cluster\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps {\n        Version = AuroraEngineVersion.VER_1_17_9\n    }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    CloudwatchLogsExports = new [] { \"error\", \"general\", \"slowquery\", \"audit\" },  // Export all available MySQL-based logs\n    CloudwatchLogsRetention = RetentionDays.THREE_MONTHS,  // Optional - default is to never expire logs\n    CloudwatchLogsRetentionRole = myLogsPublishingRole\n});\n\n// Exporting logs from an instance\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps {\n        Version = PostgresEngineVersion.VER_12_3\n    }),\n    Vpc = vpc,\n    CloudwatchLogsExports = new [] { \"postgresql\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\nRole myLogsPublishingRole;\nVpc vpc;\n\n\n// Exporting logs from a cluster\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder()\n                .version(AuroraEngineVersion.VER_1_17_9)\n                .build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .cloudwatchLogsExports(List.of(\"error\", \"general\", \"slowquery\", \"audit\")) // Export all available MySQL-based logs\n        .cloudwatchLogsRetention(RetentionDays.THREE_MONTHS) // Optional - default is to never expire logs\n        .cloudwatchLogsRetentionRole(myLogsPublishingRole)\n        .build();\n\n// Exporting logs from an instance\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder()\n                .version(PostgresEngineVersion.VER_12_3)\n                .build()))\n        .vpc(vpc)\n        .cloudwatchLogsExports(List.of(\"postgresql\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import logs \"github.com/aws-samples/dummy/awscdkawslogs\"\nvar myLogsPublishingRole role\nvar vpc vpc\n\n// Exporting logs from a cluster\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine.aurora(&auroraClusterEngineProps{\n\t\tversion: rds.auroraEngineVersion_VER_1_17_9(),\n\t}),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"error\"),\n\t\tjsii.String(\"general\"),\n\t\tjsii.String(\"slowquery\"),\n\t\tjsii.String(\"audit\"),\n\t},\n\t // Export all available MySQL-based logs\n\tcloudwatchLogsRetention: logs.retentionDays_THREE_MONTHS,\n\t // Optional - default is to never expire logs\n\tcloudwatchLogsRetentionRole: myLogsPublishingRole,\n})\n\n// Exporting logs from an instance\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\tvpc: vpc,\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"postgresql\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n\n// Exporting logs from a cluster\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({\n    version: rds.AuroraEngineVersion.VER_1_17_9, // different version class for each engine type\n  }),\n  instanceProps: {\n    vpc,\n  },\n  cloudwatchLogsExports: ['error', 'general', 'slowquery', 'audit'], // Export all available MySQL-based logs\n  cloudwatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudwatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n  // ...\n});\n\n// Exporting logs from an instance\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({\n    version: rds.PostgresEngineVersion.VER_12_3,\n  }),\n  vpc,\n  cloudwatchLogsExports: ['postgresql'], // Export the PostgreSQL logs\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 570
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#THREE_MONTHS",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_17_9",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Exporting logs from a cluster\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({\n    version: rds.AuroraEngineVersion.VER_1_17_9, // different version class for each engine type\n  }),\n  instanceProps: {\n    vpc,\n  },\n  cloudwatchLogsExports: ['error', 'general', 'slowquery', 'audit'], // Export all available MySQL-based logs\n  cloudwatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudwatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n  // ...\n});\n\n// Exporting logs from an instance\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({\n    version: rds.PostgresEngineVersion.VER_12_3,\n  }),\n  vpc,\n  cloudwatchLogsExports: ['postgresql'], // Export the PostgreSQL logs\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 40,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 5,
        "194": 12,
        "196": 2,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "b0387b1bb6e62814e84a8c5664cdf07d2eeef081c637292c96fee8357ed5c22b"
    },
    "855cbe96faead6e93c19c1f4e239b2d4824dd0c106e2b11f6f5d376a088f600a": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# security_group: ec2.SecurityGroup\n\n\nrds.OptionGroup(self, \"Options\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(\n        version=rds.OracleEngineVersion.VER_19\n    ),\n    configurations=[rds.OptionConfiguration(\n        name=\"OEM\",\n        port=5500,\n        vpc=vpc,\n        security_groups=[security_group]\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\n\nnew OptionGroup(this, \"Options\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps {\n        Version = OracleEngineVersion.VER_19\n    }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 5500,\n        Vpc = vpc,\n        SecurityGroups = new [] { securityGroup }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\n\nOptionGroup.Builder.create(this, \"Options\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder()\n                .version(OracleEngineVersion.VER_19)\n                .build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(5500)\n                .vpc(vpc)\n                .securityGroups(List.of(securityGroup))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar securityGroup securityGroup\n\nrds.NewOptionGroup(this, jsii.String(\"Options\"), &optionGroupProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19(),\n\t}),\n\tconfigurations: []optionConfiguration{\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"OEM\"),\n\t\t\tport: jsii.Number(5500),\n\t\t\tvpc: vpc,\n\t\t\tsecurityGroups: []iSecurityGroup{\n\t\t\t\tsecurityGroup,\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\n\nnew rds.OptionGroup(this, 'Options', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({\n    version: rds.OracleEngineVersion.VER_19,\n  }),\n  configurations: [\n    {\n      name: 'OEM',\n      port: 5500,\n      vpc,\n      securityGroups: [securityGroup], // Optional - a default group will be created if not provided.\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 606
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew rds.OptionGroup(this, 'Options', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({\n    version: rds.OracleEngineVersion.VER_19,\n  }),\n  configurations: [\n    {\n      name: 'OEM',\n      port: 5500,\n      vpc,\n      securityGroups: [securityGroup], // Optional - a default group will be created if not provided.\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "0d342f2b2038e5fc8b5174187777810a1c673d460ec13b04e3b61e2835b7b8f1"
    },
    "9fdebd0fbba10e4ef1aa807729fc1599351d5811858a9dfcf359a2bb58129d63": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.sql_server_ee(\n        version=rds.SqlServerEngineVersion.VER_11\n    ),\n    parameters={\n        \"locks\": \"100\"\n    }\n)\n\nrds.DatabaseInstance(self, \"Database\",\n    engine=rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n    vpc=vpc,\n    parameter_group=parameter_group\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.SqlServerEe(new SqlServerEeInstanceEngineProps {\n        Version = SqlServerEngineVersion.VER_11\n    }),\n    Parameters = new Dictionary<string, string> {\n        { \"locks\", \"100\" }\n    }\n});\n\nnew DatabaseInstance(this, \"Database\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.SQL_SERVER_EE,\n    Vpc = vpc,\n    ParameterGroup = parameterGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.sqlServerEe(SqlServerEeInstanceEngineProps.builder()\n                .version(SqlServerEngineVersion.VER_11)\n                .build()))\n        .parameters(Map.of(\n                \"locks\", \"100\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"Database\")\n        .engine(DatabaseInstanceEngine.SQL_SERVER_EE)\n        .vpc(vpc)\n        .parameterGroup(parameterGroup)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.sqlServerEe(&sqlServerEeInstanceEngineProps{\n\t\tversion: rds.sqlServerEngineVersion_VER_11(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"locks\": jsii.String(\"100\"),\n\t},\n})\n\nrds.NewDatabaseInstance(this, jsii.String(\"Database\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine_SQL_SERVER_EE(),\n\tvpc: vpc,\n\tparameterGroup: parameterGroup,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n  engine: rds.DatabaseInstanceEngine.sqlServerEe({\n    version: rds.SqlServerEngineVersion.VER_11,\n  }),\n  parameters: {\n    locks: '100',\n  },\n});\n\nnew rds.DatabaseInstance(this, 'Database', {\n  engine: rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n  vpc,\n  parameterGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 634
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#SQL_SERVER_EE",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#sqlServerEe",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.SqlServerEeInstanceEngineProps",
        "@aws-cdk/aws-rds.SqlServerEngineVersion",
        "@aws-cdk/aws-rds.SqlServerEngineVersion#VER_11",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n  engine: rds.DatabaseInstanceEngine.sqlServerEe({\n    version: rds.SqlServerEngineVersion.VER_11,\n  }),\n  parameters: {\n    locks: '100',\n  },\n});\n\nnew rds.DatabaseInstance(this, 'Database', {\n  engine: rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n  vpc,\n  parameterGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "44575352b4b8897359bf797896610c8f5a70d3a0527117cd485e64562e09bcb9"
    },
    "b8f6e39fb1b6fd0da89242c32b279ada6b6d14fb66b55b46dc0f27f28ab49d29": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nrds.DatabaseInstance(self, \"Database\",\n    engine=rds.DatabaseInstanceEngine.sql_server_ee(version=rds.SqlServerEngineVersion.VER_11),\n    vpc=vpc,\n    parameters={\n        \"locks\": \"100\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew DatabaseInstance(this, \"Database\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.SqlServerEe(new SqlServerEeInstanceEngineProps { Version = SqlServerEngineVersion.VER_11 }),\n    Vpc = vpc,\n    Parameters = new Dictionary<string, string> {\n        { \"locks\", \"100\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nDatabaseInstance.Builder.create(this, \"Database\")\n        .engine(DatabaseInstanceEngine.sqlServerEe(SqlServerEeInstanceEngineProps.builder().version(SqlServerEngineVersion.VER_11).build()))\n        .vpc(vpc)\n        .parameters(Map.of(\n                \"locks\", \"100\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nrds.NewDatabaseInstance(this, jsii.String(\"Database\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.sqlServerEe(&sqlServerEeInstanceEngineProps{\n\t\tversion: rds.sqlServerEngineVersion_VER_11(),\n\t}),\n\tvpc: vpc,\n\tparameters: map[string]*string{\n\t\t\"locks\": jsii.String(\"100\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew rds.DatabaseInstance(this, 'Database', {\n  engine: rds.DatabaseInstanceEngine.sqlServerEe({ version: rds.SqlServerEngineVersion.VER_11 }),\n  vpc,\n  parameters: {\n    locks: '100',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 656
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#sqlServerEe",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.SqlServerEeInstanceEngineProps",
        "@aws-cdk/aws-rds.SqlServerEngineVersion",
        "@aws-cdk/aws-rds.SqlServerEngineVersion#VER_11",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew rds.DatabaseInstance(this, 'Database', {\n  engine: rds.DatabaseInstanceEngine.sqlServerEe({ version: rds.SqlServerEngineVersion.VER_11 }),\n  vpc,\n  parameters: {\n    locks: '100',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e81a8df2b0c4c1f50513e899fc31accbe70254ab45413a7a4052bbe158b51214"
    },
    "b02f4360c1f17a10437ae6b7a4827bf14f9078f33d5ade40757299e801e7b1b1": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AnotherCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_POSTGRESQL(),\n\tparameterGroup: rds.parameterGroup.fromParameterGroupName(this, jsii.String(\"ParameterGroup\"), jsii.String(\"default.aurora-postgresql10\")),\n\tvpc: vpc,\n\tscaling: &serverlessScalingOptions{\n\t\tautoPause: duration.minutes(jsii.Number(10)),\n\t\t // default is to pause after 5 minutes of idle time\n\t\tminCapacity: rds.auroraCapacityUnit_ACU_8,\n\t\t // default is 2 Aurora capacity units (ACUs)\n\t\tmaxCapacity: rds.*auroraCapacityUnit_ACU_32,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 681
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e27b5de7fb62214ea869e917f1a7a82be663678962564cb15a6b44493727fddf"
    },
    "b6192510c8de0e7bb1f889c1b96633a2498b2c3e5b67d65aaa156f96c53c24e1": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrds.ServerlessClusterFromSnapshot(self, \"Cluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew ServerlessClusterFromSnapshot(this, \"Cluster\", new ServerlessClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nServerlessClusterFromSnapshot.Builder.create(this, \"Cluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrds.NewServerlessClusterFromSnapshot(this, jsii.String(\"Cluster\"), &serverlessClusterFromSnapshotProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tsnapshotIdentifier: jsii.String(\"mySnapshot\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.ServerlessClusterFromSnapshot(this, 'Cluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 717
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessClusterFromSnapshot",
        "@aws-cdk/aws-rds.ServerlessClusterFromSnapshotProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.ServerlessClusterFromSnapshot(this, 'Cluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3cf166b17e946e9e0f700f879651ff8d72fb0c8d66f8dbe41e806850f56fd08e"
    },
    "218e5aafeb233db4d30a7ef3ed2597456497300902f50bf75bd4c1147e0f707c": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# code: lambda.Code\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,  # this parameter is optional for serverless Clusters\n    enable_data_api=True\n)\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=code,\n    environment={\n        \"CLUSTER_ARN\": cluster.cluster_arn,\n        \"SECRET_ARN\": cluster.secret.secret_arn\n    }\n)\ncluster.grant_data_api_access(fn)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,  // this parameter is optional for serverless Clusters\n    EnableDataApi = true\n});\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = code,\n    Environment = new Dictionary<string, string> {\n        { \"CLUSTER_ARN\", cluster.ClusterArn },\n        { \"SECRET_ARN\", cluster.Secret.SecretArn }\n    }\n});\ncluster.GrantDataApiAccess(fn);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc) // this parameter is optional for serverless Clusters\n        .enableDataApi(true)\n        .build();\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(code)\n        .environment(Map.of(\n                \"CLUSTER_ARN\", cluster.getClusterArn(),\n                \"SECRET_ARN\", cluster.getSecret().getSecretArn()))\n        .build();\ncluster.grantDataApiAccess(fn);",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar code code\n\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AnotherCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\t // this parameter is optional for serverless Clusters\n\tenableDataApi: jsii.Boolean(true),\n})\nfn := lambda.NewFunction(this, jsii.String(\"MyFunction\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_12_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: code,\n\tenvironment: map[string]*string{\n\t\t\"CLUSTER_ARN\": cluster.clusterArn,\n\t\t\"SECRET_ARN\": cluster.secret.secretArn,\n\t},\n})\ncluster.grantDataApiAccess(fn)",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc, // this parameter is optional for serverless Clusters\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\n\ndeclare const code: lambda.Code;\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 732
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster#secret",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret#secretArn",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc, // this parameter is optional for serverless Clusters\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 35,
        "104": 2,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 10,
        "196": 1,
        "197": 2,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "81042fd028c570b7321c8827de075ad70c1227d5e9236f268adefec05683e466"
    },
    "cbb875eb1b1043498dfcef9821f81458a5b379acbb40ce9389db02c51b815ed3": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AnotherCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_POSTGRESQL(),\n\tparameterGroup: rds.parameterGroup.fromParameterGroupName(this, jsii.String(\"ParameterGroup\"), jsii.String(\"default.aurora-postgresql10\")),\n\tvpc: vpc,\n\tscaling: &serverlessScalingOptions{\n\t\tautoPause: duration.minutes(jsii.Number(10)),\n\t\t // default is to pause after 5 minutes of idle time\n\t\tminCapacity: rds.auroraCapacityUnit_ACU_8,\n\t\t // default is 2 Aurora capacity units (ACUs)\n\t\tmaxCapacity: rds.*auroraCapacityUnit_ACU_32,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraCapacityUnit"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e27b5de7fb62214ea869e917f1a7a82be663678962564cb15a6b44493727fddf"
    },
    "aaf0ca1e92e441789c1470e50f189eab1919e3c6a3ba3a2ebd66dd7fd99b7bec": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrds.NewDatabaseClusterFromSnapshot(this, jsii.String(\"Database\"), &databaseClusterFromSnapshotProps{\n\tengine: rds.databaseClusterEngine.aurora(&auroraClusterEngineProps{\n\t\tversion: rds.auroraEngineVersion_VER_1_22_2(),\n\t}),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n\tsnapshotIdentifier: jsii.String(\"mySnapshot\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraClusterEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "420018d37c80d8e3dc17c5624d0d265848471ef2afecb838b0220600d19ee37d"
    },
    "410400f5a652524d8636724eee99600ad2ea921ad8bcb9576ced80728bfe1147": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrds.NewDatabaseClusterFromSnapshot(this, jsii.String(\"Database\"), &databaseClusterFromSnapshotProps{\n\tengine: rds.databaseClusterEngine.aurora(&auroraClusterEngineProps{\n\t\tversion: rds.auroraEngineVersion_VER_1_22_2(),\n\t}),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n\tsnapshotIdentifier: jsii.String(\"mySnapshot\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "420018d37c80d8e3dc17c5624d0d265848471ef2afecb838b0220600d19ee37d"
    },
    "95d3e3cc1604b8e5623daeac68bd48f71c8e101796c916a820bd5efc2c3a3ea5": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora_mysql(version=rds.AuroraMysqlEngineVersion.VER_2_08_1),\n    credentials=rds.Credentials.from_generated_secret(\"clusteradmin\"),  # Optional - will default to 'admin' username and generated password\n    instance_props=rds.InstanceProps(\n        # optional , defaults to t3.medium\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n        vpc_subnets=ec2.SubnetSelection(\n            subnet_type=ec2.SubnetType.PRIVATE\n        ),\n        vpc=vpc\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AuroraMysql(new AuroraMysqlClusterEngineProps { Version = AuroraMysqlEngineVersion.VER_2_08_1 }),\n    Credentials = Credentials.FromGeneratedSecret(\"clusteradmin\"),  // Optional - will default to 'admin' username and generated password\n    InstanceProps = new InstanceProps {\n        // optional , defaults to t3.medium\n        InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.SMALL),\n        VpcSubnets = new SubnetSelection {\n            SubnetType = SubnetType.PRIVATE\n        },\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.auroraMysql(AuroraMysqlClusterEngineProps.builder().version(AuroraMysqlEngineVersion.VER_2_08_1).build()))\n        .credentials(Credentials.fromGeneratedSecret(\"clusteradmin\")) // Optional - will default to 'admin' username and generated password\n        .instanceProps(InstanceProps.builder()\n                // optional , defaults to t3.medium\n                .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.SMALL))\n                .vpcSubnets(SubnetSelection.builder()\n                        .subnetType(SubnetType.PRIVATE)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine.auroraMysql(&auroraMysqlClusterEngineProps{\n\t\tversion: rds.auroraMysqlEngineVersion_VER_2_08_1(),\n\t}),\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"clusteradmin\")),\n\t // Optional - will default to 'admin' username and generated password\n\tinstanceProps: &instanceProps{\n\t\t// optional , defaults to t3.medium\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_SMALL),\n\t\tvpcSubnets: &subnetSelection{\n\t\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t\t},\n\t\tvpc: vpc,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraMysqlClusterEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.AuroraMysqlClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion#VER_2_08_1",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#auroraMysql",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fea865a2070aef487358ddda0a568a72e18a5da9eda84f13d267fc638facd2a1"
    },
    "a73f6268c3612382b9d12df6a3a51955fbc3a72c73255714657b2c3b2e46c949": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora_mysql(version=rds.AuroraMysqlEngineVersion.VER_2_08_1),\n    credentials=rds.Credentials.from_generated_secret(\"clusteradmin\"),  # Optional - will default to 'admin' username and generated password\n    instance_props=rds.InstanceProps(\n        # optional , defaults to t3.medium\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n        vpc_subnets=ec2.SubnetSelection(\n            subnet_type=ec2.SubnetType.PRIVATE\n        ),\n        vpc=vpc\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AuroraMysql(new AuroraMysqlClusterEngineProps { Version = AuroraMysqlEngineVersion.VER_2_08_1 }),\n    Credentials = Credentials.FromGeneratedSecret(\"clusteradmin\"),  // Optional - will default to 'admin' username and generated password\n    InstanceProps = new InstanceProps {\n        // optional , defaults to t3.medium\n        InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.SMALL),\n        VpcSubnets = new SubnetSelection {\n            SubnetType = SubnetType.PRIVATE\n        },\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.auroraMysql(AuroraMysqlClusterEngineProps.builder().version(AuroraMysqlEngineVersion.VER_2_08_1).build()))\n        .credentials(Credentials.fromGeneratedSecret(\"clusteradmin\")) // Optional - will default to 'admin' username and generated password\n        .instanceProps(InstanceProps.builder()\n                // optional , defaults to t3.medium\n                .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.SMALL))\n                .vpcSubnets(SubnetSelection.builder()\n                        .subnetType(SubnetType.PRIVATE)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine.auroraMysql(&auroraMysqlClusterEngineProps{\n\t\tversion: rds.auroraMysqlEngineVersion_VER_2_08_1(),\n\t}),\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"clusteradmin\")),\n\t // Optional - will default to 'admin' username and generated password\n\tinstanceProps: &instanceProps{\n\t\t// optional , defaults to t3.medium\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_SMALL),\n\t\tvpcSubnets: &subnetSelection{\n\t\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t\t},\n\t\tvpc: vpc,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraMysqlEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.AuroraMysqlClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion#VER_2_08_1",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#auroraMysql",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fea865a2070aef487358ddda0a568a72e18a5da9eda84f13d267fc638facd2a1"
    },
    "673903636273f0a40df5cc8e6d6e9861de5d067a77ea777cbc7b7591196137f1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# aurora_postgres_engine_version: rds.AuroraPostgresEngineVersion\n\naurora_postgres_cluster_engine_props = rds.AuroraPostgresClusterEngineProps(\n    version=aurora_postgres_engine_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nAuroraPostgresEngineVersion auroraPostgresEngineVersion;\n\nAuroraPostgresClusterEngineProps auroraPostgresClusterEngineProps = new AuroraPostgresClusterEngineProps {\n    Version = auroraPostgresEngineVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nAuroraPostgresEngineVersion auroraPostgresEngineVersion;\n\nAuroraPostgresClusterEngineProps auroraPostgresClusterEngineProps = AuroraPostgresClusterEngineProps.builder()\n        .version(auroraPostgresEngineVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar auroraPostgresEngineVersion auroraPostgresEngineVersion\nauroraPostgresClusterEngineProps := &auroraPostgresClusterEngineProps{\n\tversion: auroraPostgresEngineVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const auroraPostgresEngineVersion: rds.AuroraPostgresEngineVersion;\nconst auroraPostgresClusterEngineProps: rds.AuroraPostgresClusterEngineProps = {\n  version: auroraPostgresEngineVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraPostgresClusterEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.AuroraPostgresClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraPostgresEngineVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const auroraPostgresEngineVersion: rds.AuroraPostgresEngineVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst auroraPostgresClusterEngineProps: rds.AuroraPostgresClusterEngineProps = {\n  version: auroraPostgresEngineVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0d71d240cc80ed806f7444b94ab624a4b576d03a6f18e29c236e0056e61a146e"
    },
    "5401997b5eba547c68a56a5caef6f77772836bb6cbf4d9b4a6d53fd0b82f81db": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\naurora_postgres_engine_features = rds.AuroraPostgresEngineFeatures(\n    s3_export=False,\n    s3_import=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nAuroraPostgresEngineFeatures auroraPostgresEngineFeatures = new AuroraPostgresEngineFeatures {\n    S3Export = false,\n    S3Import = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nAuroraPostgresEngineFeatures auroraPostgresEngineFeatures = AuroraPostgresEngineFeatures.builder()\n        .s3Export(false)\n        .s3Import(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nauroraPostgresEngineFeatures := &auroraPostgresEngineFeatures{\n\ts3Export: jsii.Boolean(false),\n\ts3Import: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst auroraPostgresEngineFeatures: rds.AuroraPostgresEngineFeatures = {\n  s3Export: false,\n  s3Import: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraPostgresEngineFeatures"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.AuroraPostgresEngineFeatures"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst auroraPostgresEngineFeatures: rds.AuroraPostgresEngineFeatures = {\n  s3Export: false,\n  s3Import: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "161e7b8c2f237382821c4927f1b58cece63a0f7e801aa76ee5dc1e9ffb508c1b"
    },
    "5cf259902ca127ee4e1224db4df8372cc3537baf6ac6666120d35d2610d4e026": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\naurora_postgres_engine_version = rds.AuroraPostgresEngineVersion.VER_10_11",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nAuroraPostgresEngineVersion auroraPostgresEngineVersion = AuroraPostgresEngineVersion.VER_10_11;",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nAuroraPostgresEngineVersion auroraPostgresEngineVersion = AuroraPostgresEngineVersion.VER_10_11;",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nauroraPostgresEngineVersion := rds.auroraPostgresEngineVersion_VER_10_11()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst auroraPostgresEngineVersion = rds.AuroraPostgresEngineVersion.VER_10_11;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraPostgresEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.AuroraPostgresEngineVersion",
        "@aws-cdk/aws-rds.AuroraPostgresEngineVersion#VER_10_11"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst auroraPostgresEngineVersion = rds.AuroraPostgresEngineVersion.VER_10_11;\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "f7d221d1a40e4aa9865e6affb9e4641d6c805330c7b5767c09e5a1ebe8ff9ece"
    },
    "019a8f11e2ea005d420de009530baf0ed8fdd3b367c60d1065bd18f9e8c1163e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.core as cdk\n\nbackup_props = rds.BackupProps(\n    retention=cdk.Duration.minutes(30),\n\n    # the properties below are optional\n    preferred_window=\"preferredWindow\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK;\nBackupProps backupProps = new BackupProps {\n    Retention = Duration.Minutes(30),\n\n    // the properties below are optional\n    PreferredWindow = \"preferredWindow\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.core.*;\n\nBackupProps backupProps = BackupProps.builder()\n        .retention(Duration.minutes(30))\n\n        // the properties below are optional\n        .preferredWindow(\"preferredWindow\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nbackupProps := &backupProps{\n\tretention: cdk.duration.minutes(jsii.Number(30)),\n\n\t// the properties below are optional\n\tpreferredWindow: jsii.String(\"preferredWindow\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\nconst backupProps: rds.BackupProps = {\n  retention: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  preferredWindow: 'preferredWindow',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.BackupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.BackupProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst backupProps: rds.BackupProps = {\n  retention: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  preferredWindow: 'preferredWindow',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7a511eae2dced57c3f1ce2fabcb1e72d065eb292ba17237665c6fafbc71c507c"
    },
    "651ce07d3fe9ab7024e86ed84b528cb167b678d1a8033343d2babc965275d80f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBCluster = rds.CfnDBCluster(self, \"MyCfnDBCluster\",\n    engine=\"engine\",\n\n    # the properties below are optional\n    associated_roles=[rds.CfnDBCluster.DBClusterRoleProperty(\n        role_arn=\"roleArn\",\n\n        # the properties below are optional\n        feature_name=\"featureName\"\n    )],\n    availability_zones=[\"availabilityZones\"],\n    backtrack_window=123,\n    backup_retention_period=123,\n    copy_tags_to_snapshot=False,\n    database_name=\"databaseName\",\n    db_cluster_identifier=\"dbClusterIdentifier\",\n    db_cluster_parameter_group_name=\"dbClusterParameterGroupName\",\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    deletion_protection=False,\n    enable_cloudwatch_logs_exports=[\"enableCloudwatchLogsExports\"],\n    enable_http_endpoint=False,\n    enable_iam_database_authentication=False,\n    engine_mode=\"engineMode\",\n    engine_version=\"engineVersion\",\n    global_cluster_identifier=\"globalClusterIdentifier\",\n    kms_key_id=\"kmsKeyId\",\n    master_username=\"masterUsername\",\n    master_user_password=\"masterUserPassword\",\n    port=123,\n    preferred_backup_window=\"preferredBackupWindow\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    replication_source_identifier=\"replicationSourceIdentifier\",\n    restore_type=\"restoreType\",\n    scaling_configuration=rds.CfnDBCluster.ScalingConfigurationProperty(\n        auto_pause=False,\n        max_capacity=123,\n        min_capacity=123,\n        seconds_until_auto_pause=123\n    ),\n    snapshot_identifier=\"snapshotIdentifier\",\n    source_db_cluster_identifier=\"sourceDbClusterIdentifier\",\n    source_region=\"sourceRegion\",\n    storage_encrypted=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    use_latest_restorable_time=False,\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBCluster cfnDBCluster = new CfnDBCluster(this, \"MyCfnDBCluster\", new CfnDBClusterProps {\n    Engine = \"engine\",\n\n    // the properties below are optional\n    AssociatedRoles = new [] { new DBClusterRoleProperty {\n        RoleArn = \"roleArn\",\n\n        // the properties below are optional\n        FeatureName = \"featureName\"\n    } },\n    AvailabilityZones = new [] { \"availabilityZones\" },\n    BacktrackWindow = 123,\n    BackupRetentionPeriod = 123,\n    CopyTagsToSnapshot = false,\n    DatabaseName = \"databaseName\",\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n    DbClusterParameterGroupName = \"dbClusterParameterGroupName\",\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    DeletionProtection = false,\n    EnableCloudwatchLogsExports = new [] { \"enableCloudwatchLogsExports\" },\n    EnableHttpEndpoint = false,\n    EnableIamDatabaseAuthentication = false,\n    EngineMode = \"engineMode\",\n    EngineVersion = \"engineVersion\",\n    GlobalClusterIdentifier = \"globalClusterIdentifier\",\n    KmsKeyId = \"kmsKeyId\",\n    MasterUsername = \"masterUsername\",\n    MasterUserPassword = \"masterUserPassword\",\n    Port = 123,\n    PreferredBackupWindow = \"preferredBackupWindow\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    ReplicationSourceIdentifier = \"replicationSourceIdentifier\",\n    RestoreType = \"restoreType\",\n    ScalingConfiguration = new ScalingConfigurationProperty {\n        AutoPause = false,\n        MaxCapacity = 123,\n        MinCapacity = 123,\n        SecondsUntilAutoPause = 123\n    },\n    SnapshotIdentifier = \"snapshotIdentifier\",\n    SourceDbClusterIdentifier = \"sourceDbClusterIdentifier\",\n    SourceRegion = \"sourceRegion\",\n    StorageEncrypted = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UseLatestRestorableTime = false,\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBCluster cfnDBCluster = CfnDBCluster.Builder.create(this, \"MyCfnDBCluster\")\n        .engine(\"engine\")\n\n        // the properties below are optional\n        .associatedRoles(List.of(DBClusterRoleProperty.builder()\n                .roleArn(\"roleArn\")\n\n                // the properties below are optional\n                .featureName(\"featureName\")\n                .build()))\n        .availabilityZones(List.of(\"availabilityZones\"))\n        .backtrackWindow(123)\n        .backupRetentionPeriod(123)\n        .copyTagsToSnapshot(false)\n        .databaseName(\"databaseName\")\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n        .dbClusterParameterGroupName(\"dbClusterParameterGroupName\")\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .deletionProtection(false)\n        .enableCloudwatchLogsExports(List.of(\"enableCloudwatchLogsExports\"))\n        .enableHttpEndpoint(false)\n        .enableIamDatabaseAuthentication(false)\n        .engineMode(\"engineMode\")\n        .engineVersion(\"engineVersion\")\n        .globalClusterIdentifier(\"globalClusterIdentifier\")\n        .kmsKeyId(\"kmsKeyId\")\n        .masterUsername(\"masterUsername\")\n        .masterUserPassword(\"masterUserPassword\")\n        .port(123)\n        .preferredBackupWindow(\"preferredBackupWindow\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .replicationSourceIdentifier(\"replicationSourceIdentifier\")\n        .restoreType(\"restoreType\")\n        .scalingConfiguration(ScalingConfigurationProperty.builder()\n                .autoPause(false)\n                .maxCapacity(123)\n                .minCapacity(123)\n                .secondsUntilAutoPause(123)\n                .build())\n        .snapshotIdentifier(\"snapshotIdentifier\")\n        .sourceDbClusterIdentifier(\"sourceDbClusterIdentifier\")\n        .sourceRegion(\"sourceRegion\")\n        .storageEncrypted(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .useLatestRestorableTime(false)\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBCluster := rds.NewCfnDBCluster(this, jsii.String(\"MyCfnDBCluster\"), &cfnDBClusterProps{\n\tengine: jsii.String(\"engine\"),\n\n\t// the properties below are optional\n\tassociatedRoles: []interface{}{\n\t\t&dBClusterRoleProperty{\n\t\t\troleArn: jsii.String(\"roleArn\"),\n\n\t\t\t// the properties below are optional\n\t\t\tfeatureName: jsii.String(\"featureName\"),\n\t\t},\n\t},\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"availabilityZones\"),\n\t},\n\tbacktrackWindow: jsii.Number(123),\n\tbackupRetentionPeriod: jsii.Number(123),\n\tcopyTagsToSnapshot: jsii.Boolean(false),\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\tdbClusterParameterGroupName: jsii.String(\"dbClusterParameterGroupName\"),\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\tdeletionProtection: jsii.Boolean(false),\n\tenableCloudwatchLogsExports: []*string{\n\t\tjsii.String(\"enableCloudwatchLogsExports\"),\n\t},\n\tenableHttpEndpoint: jsii.Boolean(false),\n\tenableIamDatabaseAuthentication: jsii.Boolean(false),\n\tengineMode: jsii.String(\"engineMode\"),\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tglobalClusterIdentifier: jsii.String(\"globalClusterIdentifier\"),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tmasterUsername: jsii.String(\"masterUsername\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\tport: jsii.Number(123),\n\tpreferredBackupWindow: jsii.String(\"preferredBackupWindow\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\treplicationSourceIdentifier: jsii.String(\"replicationSourceIdentifier\"),\n\trestoreType: jsii.String(\"restoreType\"),\n\tscalingConfiguration: &scalingConfigurationProperty{\n\t\tautoPause: jsii.Boolean(false),\n\t\tmaxCapacity: jsii.Number(123),\n\t\tminCapacity: jsii.Number(123),\n\t\tsecondsUntilAutoPause: jsii.Number(123),\n\t},\n\tsnapshotIdentifier: jsii.String(\"snapshotIdentifier\"),\n\tsourceDbClusterIdentifier: jsii.String(\"sourceDbClusterIdentifier\"),\n\tsourceRegion: jsii.String(\"sourceRegion\"),\n\tstorageEncrypted: jsii.Boolean(false),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuseLatestRestorableTime: jsii.Boolean(false),\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBCluster = new rds.CfnDBCluster(this, 'MyCfnDBCluster', {\n  engine: 'engine',\n\n  // the properties below are optional\n  associatedRoles: [{\n    roleArn: 'roleArn',\n\n    // the properties below are optional\n    featureName: 'featureName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  backtrackWindow: 123,\n  backupRetentionPeriod: 123,\n  copyTagsToSnapshot: false,\n  databaseName: 'databaseName',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  enableHttpEndpoint: false,\n  enableIamDatabaseAuthentication: false,\n  engineMode: 'engineMode',\n  engineVersion: 'engineVersion',\n  globalClusterIdentifier: 'globalClusterIdentifier',\n  kmsKeyId: 'kmsKeyId',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  replicationSourceIdentifier: 'replicationSourceIdentifier',\n  restoreType: 'restoreType',\n  scalingConfiguration: {\n    autoPause: false,\n    maxCapacity: 123,\n    minCapacity: 123,\n    secondsUntilAutoPause: 123,\n  },\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  sourceRegion: 'sourceRegion',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBCluster",
        "@aws-cdk/aws-rds.CfnDBClusterProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBCluster = new rds.CfnDBCluster(this, 'MyCfnDBCluster', {\n  engine: 'engine',\n\n  // the properties below are optional\n  associatedRoles: [{\n    roleArn: 'roleArn',\n\n    // the properties below are optional\n    featureName: 'featureName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  backtrackWindow: 123,\n  backupRetentionPeriod: 123,\n  copyTagsToSnapshot: false,\n  databaseName: 'databaseName',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  enableHttpEndpoint: false,\n  enableIamDatabaseAuthentication: false,\n  engineMode: 'engineMode',\n  engineVersion: 'engineVersion',\n  globalClusterIdentifier: 'globalClusterIdentifier',\n  kmsKeyId: 'kmsKeyId',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  replicationSourceIdentifier: 'replicationSourceIdentifier',\n  restoreType: 'restoreType',\n  scalingConfiguration: {\n    autoPause: false,\n    maxCapacity: 123,\n    minCapacity: 123,\n    secondsUntilAutoPause: 123,\n  },\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  sourceRegion: 'sourceRegion',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 27,
        "75": 45,
        "91": 7,
        "104": 1,
        "192": 5,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 41,
        "290": 1
      },
      "fqnsFingerprint": "50d7989621cdbba9dde1b685c4a2dab7e3cd128871abb379be8bb7d5cfbd3bec"
    },
    "ab4a7270b7a19fe78c153b05d6326ad0902faf2f66222359e87efe5d407cb48f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nd_bCluster_role_property = rds.CfnDBCluster.DBClusterRoleProperty(\n    role_arn=\"roleArn\",\n\n    # the properties below are optional\n    feature_name=\"featureName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nDBClusterRoleProperty dBClusterRoleProperty = new DBClusterRoleProperty {\n    RoleArn = \"roleArn\",\n\n    // the properties below are optional\n    FeatureName = \"featureName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nDBClusterRoleProperty dBClusterRoleProperty = DBClusterRoleProperty.builder()\n        .roleArn(\"roleArn\")\n\n        // the properties below are optional\n        .featureName(\"featureName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ndBClusterRoleProperty := &dBClusterRoleProperty{\n\troleArn: jsii.String(\"roleArn\"),\n\n\t// the properties below are optional\n\tfeatureName: jsii.String(\"featureName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst dBClusterRoleProperty: rds.CfnDBCluster.DBClusterRoleProperty = {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  featureName: 'featureName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBCluster.DBClusterRoleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBCluster.DBClusterRoleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dBClusterRoleProperty: rds.CfnDBCluster.DBClusterRoleProperty = {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  featureName: 'featureName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "912a2154991614b6b3d9de057cfca0777d3194950a08b7568b399c6fdc3ccbc7"
    },
    "a8b16ca4f29e806de27c8342d951320ecd14099fda484a93d6024043f311f4e3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nscaling_configuration_property = rds.CfnDBCluster.ScalingConfigurationProperty(\n    auto_pause=False,\n    max_capacity=123,\n    min_capacity=123,\n    seconds_until_auto_pause=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nScalingConfigurationProperty scalingConfigurationProperty = new ScalingConfigurationProperty {\n    AutoPause = false,\n    MaxCapacity = 123,\n    MinCapacity = 123,\n    SecondsUntilAutoPause = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nScalingConfigurationProperty scalingConfigurationProperty = ScalingConfigurationProperty.builder()\n        .autoPause(false)\n        .maxCapacity(123)\n        .minCapacity(123)\n        .secondsUntilAutoPause(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nscalingConfigurationProperty := &scalingConfigurationProperty{\n\tautoPause: jsii.Boolean(false),\n\tmaxCapacity: jsii.Number(123),\n\tminCapacity: jsii.Number(123),\n\tsecondsUntilAutoPause: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst scalingConfigurationProperty: rds.CfnDBCluster.ScalingConfigurationProperty = {\n  autoPause: false,\n  maxCapacity: 123,\n  minCapacity: 123,\n  secondsUntilAutoPause: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBCluster.ScalingConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBCluster.ScalingConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scalingConfigurationProperty: rds.CfnDBCluster.ScalingConfigurationProperty = {\n  autoPause: false,\n  maxCapacity: 123,\n  minCapacity: 123,\n  secondsUntilAutoPause: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 1,
        "75": 9,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8ed70119f2abab86dce4dcabd0c16371d3d39c6ff0a2470c0c1c4559116fc377"
    },
    "ab9d7da88213198b6427f9a6544fbcfaf30aed85688008cfef28254a40090f52": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# parameters: Any\n\ncfn_dBCluster_parameter_group = rds.CfnDBClusterParameterGroup(self, \"MyCfnDBClusterParameterGroup\",\n    description=\"description\",\n    family=\"family\",\n    parameters=parameters,\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nvar parameters;\n\nCfnDBClusterParameterGroup cfnDBClusterParameterGroup = new CfnDBClusterParameterGroup(this, \"MyCfnDBClusterParameterGroup\", new CfnDBClusterParameterGroupProps {\n    Description = \"description\",\n    Family = \"family\",\n    Parameters = parameters,\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nObject parameters;\n\nCfnDBClusterParameterGroup cfnDBClusterParameterGroup = CfnDBClusterParameterGroup.Builder.create(this, \"MyCfnDBClusterParameterGroup\")\n        .description(\"description\")\n        .family(\"family\")\n        .parameters(parameters)\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar parameters interface{}\ncfnDBClusterParameterGroup := rds.NewCfnDBClusterParameterGroup(this, jsii.String(\"MyCfnDBClusterParameterGroup\"), &cfnDBClusterParameterGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tfamily: jsii.String(\"family\"),\n\tparameters: parameters,\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const parameters: any;\nconst cfnDBClusterParameterGroup = new rds.CfnDBClusterParameterGroup(this, 'MyCfnDBClusterParameterGroup', {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBClusterParameterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBClusterParameterGroup",
        "@aws-cdk/aws-rds.CfnDBClusterParameterGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const parameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBClusterParameterGroup = new rds.CfnDBClusterParameterGroup(this, 'MyCfnDBClusterParameterGroup', {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 12,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "cf65ec5d3e320366338d4bb97a011d7897e3a2f437be4f08ca9b3f0567b6568a"
    },
    "f5cd425877c44024e839847d55e099b974d453f4dce76f669b610d1f48258beb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# parameters: Any\n\ncfn_dBCluster_parameter_group_props = rds.CfnDBClusterParameterGroupProps(\n    description=\"description\",\n    family=\"family\",\n    parameters=parameters,\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nvar parameters;\n\nCfnDBClusterParameterGroupProps cfnDBClusterParameterGroupProps = new CfnDBClusterParameterGroupProps {\n    Description = \"description\",\n    Family = \"family\",\n    Parameters = parameters,\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nObject parameters;\n\nCfnDBClusterParameterGroupProps cfnDBClusterParameterGroupProps = CfnDBClusterParameterGroupProps.builder()\n        .description(\"description\")\n        .family(\"family\")\n        .parameters(parameters)\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar parameters interface{}\ncfnDBClusterParameterGroupProps := &cfnDBClusterParameterGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tfamily: jsii.String(\"family\"),\n\tparameters: parameters,\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const parameters: any;\nconst cfnDBClusterParameterGroupProps: rds.CfnDBClusterParameterGroupProps = {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBClusterParameterGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBClusterParameterGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const parameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBClusterParameterGroupProps: rds.CfnDBClusterParameterGroupProps = {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "b9416bb28791ef0f018ef5dccfd9203e447f198b07078458d6ad3232e37d3725"
    },
    "863b0f3023ac4d4d5e332b4aa6abf735bfd8eb101163e5f5b07bf110f32134a4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBCluster_props = rds.CfnDBClusterProps(\n    engine=\"engine\",\n\n    # the properties below are optional\n    associated_roles=[rds.CfnDBCluster.DBClusterRoleProperty(\n        role_arn=\"roleArn\",\n\n        # the properties below are optional\n        feature_name=\"featureName\"\n    )],\n    availability_zones=[\"availabilityZones\"],\n    backtrack_window=123,\n    backup_retention_period=123,\n    copy_tags_to_snapshot=False,\n    database_name=\"databaseName\",\n    db_cluster_identifier=\"dbClusterIdentifier\",\n    db_cluster_parameter_group_name=\"dbClusterParameterGroupName\",\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    deletion_protection=False,\n    enable_cloudwatch_logs_exports=[\"enableCloudwatchLogsExports\"],\n    enable_http_endpoint=False,\n    enable_iam_database_authentication=False,\n    engine_mode=\"engineMode\",\n    engine_version=\"engineVersion\",\n    global_cluster_identifier=\"globalClusterIdentifier\",\n    kms_key_id=\"kmsKeyId\",\n    master_username=\"masterUsername\",\n    master_user_password=\"masterUserPassword\",\n    port=123,\n    preferred_backup_window=\"preferredBackupWindow\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    replication_source_identifier=\"replicationSourceIdentifier\",\n    restore_type=\"restoreType\",\n    scaling_configuration=rds.CfnDBCluster.ScalingConfigurationProperty(\n        auto_pause=False,\n        max_capacity=123,\n        min_capacity=123,\n        seconds_until_auto_pause=123\n    ),\n    snapshot_identifier=\"snapshotIdentifier\",\n    source_db_cluster_identifier=\"sourceDbClusterIdentifier\",\n    source_region=\"sourceRegion\",\n    storage_encrypted=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    use_latest_restorable_time=False,\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBClusterProps cfnDBClusterProps = new CfnDBClusterProps {\n    Engine = \"engine\",\n\n    // the properties below are optional\n    AssociatedRoles = new [] { new DBClusterRoleProperty {\n        RoleArn = \"roleArn\",\n\n        // the properties below are optional\n        FeatureName = \"featureName\"\n    } },\n    AvailabilityZones = new [] { \"availabilityZones\" },\n    BacktrackWindow = 123,\n    BackupRetentionPeriod = 123,\n    CopyTagsToSnapshot = false,\n    DatabaseName = \"databaseName\",\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n    DbClusterParameterGroupName = \"dbClusterParameterGroupName\",\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    DeletionProtection = false,\n    EnableCloudwatchLogsExports = new [] { \"enableCloudwatchLogsExports\" },\n    EnableHttpEndpoint = false,\n    EnableIamDatabaseAuthentication = false,\n    EngineMode = \"engineMode\",\n    EngineVersion = \"engineVersion\",\n    GlobalClusterIdentifier = \"globalClusterIdentifier\",\n    KmsKeyId = \"kmsKeyId\",\n    MasterUsername = \"masterUsername\",\n    MasterUserPassword = \"masterUserPassword\",\n    Port = 123,\n    PreferredBackupWindow = \"preferredBackupWindow\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    ReplicationSourceIdentifier = \"replicationSourceIdentifier\",\n    RestoreType = \"restoreType\",\n    ScalingConfiguration = new ScalingConfigurationProperty {\n        AutoPause = false,\n        MaxCapacity = 123,\n        MinCapacity = 123,\n        SecondsUntilAutoPause = 123\n    },\n    SnapshotIdentifier = \"snapshotIdentifier\",\n    SourceDbClusterIdentifier = \"sourceDbClusterIdentifier\",\n    SourceRegion = \"sourceRegion\",\n    StorageEncrypted = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UseLatestRestorableTime = false,\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBClusterProps cfnDBClusterProps = CfnDBClusterProps.builder()\n        .engine(\"engine\")\n\n        // the properties below are optional\n        .associatedRoles(List.of(DBClusterRoleProperty.builder()\n                .roleArn(\"roleArn\")\n\n                // the properties below are optional\n                .featureName(\"featureName\")\n                .build()))\n        .availabilityZones(List.of(\"availabilityZones\"))\n        .backtrackWindow(123)\n        .backupRetentionPeriod(123)\n        .copyTagsToSnapshot(false)\n        .databaseName(\"databaseName\")\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n        .dbClusterParameterGroupName(\"dbClusterParameterGroupName\")\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .deletionProtection(false)\n        .enableCloudwatchLogsExports(List.of(\"enableCloudwatchLogsExports\"))\n        .enableHttpEndpoint(false)\n        .enableIamDatabaseAuthentication(false)\n        .engineMode(\"engineMode\")\n        .engineVersion(\"engineVersion\")\n        .globalClusterIdentifier(\"globalClusterIdentifier\")\n        .kmsKeyId(\"kmsKeyId\")\n        .masterUsername(\"masterUsername\")\n        .masterUserPassword(\"masterUserPassword\")\n        .port(123)\n        .preferredBackupWindow(\"preferredBackupWindow\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .replicationSourceIdentifier(\"replicationSourceIdentifier\")\n        .restoreType(\"restoreType\")\n        .scalingConfiguration(ScalingConfigurationProperty.builder()\n                .autoPause(false)\n                .maxCapacity(123)\n                .minCapacity(123)\n                .secondsUntilAutoPause(123)\n                .build())\n        .snapshotIdentifier(\"snapshotIdentifier\")\n        .sourceDbClusterIdentifier(\"sourceDbClusterIdentifier\")\n        .sourceRegion(\"sourceRegion\")\n        .storageEncrypted(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .useLatestRestorableTime(false)\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBClusterProps := &cfnDBClusterProps{\n\tengine: jsii.String(\"engine\"),\n\n\t// the properties below are optional\n\tassociatedRoles: []interface{}{\n\t\t&dBClusterRoleProperty{\n\t\t\troleArn: jsii.String(\"roleArn\"),\n\n\t\t\t// the properties below are optional\n\t\t\tfeatureName: jsii.String(\"featureName\"),\n\t\t},\n\t},\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"availabilityZones\"),\n\t},\n\tbacktrackWindow: jsii.Number(123),\n\tbackupRetentionPeriod: jsii.Number(123),\n\tcopyTagsToSnapshot: jsii.Boolean(false),\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\tdbClusterParameterGroupName: jsii.String(\"dbClusterParameterGroupName\"),\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\tdeletionProtection: jsii.Boolean(false),\n\tenableCloudwatchLogsExports: []*string{\n\t\tjsii.String(\"enableCloudwatchLogsExports\"),\n\t},\n\tenableHttpEndpoint: jsii.Boolean(false),\n\tenableIamDatabaseAuthentication: jsii.Boolean(false),\n\tengineMode: jsii.String(\"engineMode\"),\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tglobalClusterIdentifier: jsii.String(\"globalClusterIdentifier\"),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tmasterUsername: jsii.String(\"masterUsername\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\tport: jsii.Number(123),\n\tpreferredBackupWindow: jsii.String(\"preferredBackupWindow\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\treplicationSourceIdentifier: jsii.String(\"replicationSourceIdentifier\"),\n\trestoreType: jsii.String(\"restoreType\"),\n\tscalingConfiguration: &scalingConfigurationProperty{\n\t\tautoPause: jsii.Boolean(false),\n\t\tmaxCapacity: jsii.Number(123),\n\t\tminCapacity: jsii.Number(123),\n\t\tsecondsUntilAutoPause: jsii.Number(123),\n\t},\n\tsnapshotIdentifier: jsii.String(\"snapshotIdentifier\"),\n\tsourceDbClusterIdentifier: jsii.String(\"sourceDbClusterIdentifier\"),\n\tsourceRegion: jsii.String(\"sourceRegion\"),\n\tstorageEncrypted: jsii.Boolean(false),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuseLatestRestorableTime: jsii.Boolean(false),\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBClusterProps: rds.CfnDBClusterProps = {\n  engine: 'engine',\n\n  // the properties below are optional\n  associatedRoles: [{\n    roleArn: 'roleArn',\n\n    // the properties below are optional\n    featureName: 'featureName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  backtrackWindow: 123,\n  backupRetentionPeriod: 123,\n  copyTagsToSnapshot: false,\n  databaseName: 'databaseName',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  enableHttpEndpoint: false,\n  enableIamDatabaseAuthentication: false,\n  engineMode: 'engineMode',\n  engineVersion: 'engineVersion',\n  globalClusterIdentifier: 'globalClusterIdentifier',\n  kmsKeyId: 'kmsKeyId',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  replicationSourceIdentifier: 'replicationSourceIdentifier',\n  restoreType: 'restoreType',\n  scalingConfiguration: {\n    autoPause: false,\n    maxCapacity: 123,\n    minCapacity: 123,\n    secondsUntilAutoPause: 123,\n  },\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  sourceRegion: 'sourceRegion',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBClusterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBClusterProps: rds.CfnDBClusterProps = {\n  engine: 'engine',\n\n  // the properties below are optional\n  associatedRoles: [{\n    roleArn: 'roleArn',\n\n    // the properties below are optional\n    featureName: 'featureName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  backtrackWindow: 123,\n  backupRetentionPeriod: 123,\n  copyTagsToSnapshot: false,\n  databaseName: 'databaseName',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  enableHttpEndpoint: false,\n  enableIamDatabaseAuthentication: false,\n  engineMode: 'engineMode',\n  engineVersion: 'engineVersion',\n  globalClusterIdentifier: 'globalClusterIdentifier',\n  kmsKeyId: 'kmsKeyId',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  replicationSourceIdentifier: 'replicationSourceIdentifier',\n  restoreType: 'restoreType',\n  scalingConfiguration: {\n    autoPause: false,\n    maxCapacity: 123,\n    minCapacity: 123,\n    secondsUntilAutoPause: 123,\n  },\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  sourceRegion: 'sourceRegion',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 26,
        "75": 45,
        "91": 7,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 41,
        "290": 1
      },
      "fqnsFingerprint": "435d30d13c6d4beb42eb9f7345fba84e95633d3d066c8032f0e154fa5e9d89cd"
    },
    "ce3603819ca90a226eeb7b5efbb59cfe881e5b969118492b1218853e642000ca": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBInstance = rds.CfnDBInstance(self, \"MyCfnDBInstance\",\n    db_instance_class=\"dbInstanceClass\",\n\n    # the properties below are optional\n    allocated_storage=\"allocatedStorage\",\n    allow_major_version_upgrade=False,\n    associated_roles=[rds.CfnDBInstance.DBInstanceRoleProperty(\n        feature_name=\"featureName\",\n        role_arn=\"roleArn\"\n    )],\n    auto_minor_version_upgrade=False,\n    availability_zone=\"availabilityZone\",\n    backup_retention_period=123,\n    ca_certificate_identifier=\"caCertificateIdentifier\",\n    character_set_name=\"characterSetName\",\n    copy_tags_to_snapshot=False,\n    db_cluster_identifier=\"dbClusterIdentifier\",\n    db_instance_identifier=\"dbInstanceIdentifier\",\n    db_name=\"dbName\",\n    db_parameter_group_name=\"dbParameterGroupName\",\n    db_security_groups=[\"dbSecurityGroups\"],\n    db_snapshot_identifier=\"dbSnapshotIdentifier\",\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    delete_automated_backups=False,\n    deletion_protection=False,\n    domain=\"domain\",\n    domain_iam_role_name=\"domainIamRoleName\",\n    enable_cloudwatch_logs_exports=[\"enableCloudwatchLogsExports\"],\n    enable_iam_database_authentication=False,\n    enable_performance_insights=False,\n    engine=\"engine\",\n    engine_version=\"engineVersion\",\n    iops=123,\n    kms_key_id=\"kmsKeyId\",\n    license_model=\"licenseModel\",\n    master_username=\"masterUsername\",\n    master_user_password=\"masterUserPassword\",\n    max_allocated_storage=123,\n    monitoring_interval=123,\n    monitoring_role_arn=\"monitoringRoleArn\",\n    multi_az=False,\n    option_group_name=\"optionGroupName\",\n    performance_insights_kms_key_id=\"performanceInsightsKmsKeyId\",\n    performance_insights_retention_period=123,\n    port=\"port\",\n    preferred_backup_window=\"preferredBackupWindow\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    processor_features=[rds.CfnDBInstance.ProcessorFeatureProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    promotion_tier=123,\n    publicly_accessible=False,\n    source_db_instance_identifier=\"sourceDbInstanceIdentifier\",\n    source_region=\"sourceRegion\",\n    storage_encrypted=False,\n    storage_type=\"storageType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    timezone=\"timezone\",\n    use_default_processor_features=False,\n    vpc_security_groups=[\"vpcSecurityGroups\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBInstance cfnDBInstance = new CfnDBInstance(this, \"MyCfnDBInstance\", new CfnDBInstanceProps {\n    DbInstanceClass = \"dbInstanceClass\",\n\n    // the properties below are optional\n    AllocatedStorage = \"allocatedStorage\",\n    AllowMajorVersionUpgrade = false,\n    AssociatedRoles = new [] { new DBInstanceRoleProperty {\n        FeatureName = \"featureName\",\n        RoleArn = \"roleArn\"\n    } },\n    AutoMinorVersionUpgrade = false,\n    AvailabilityZone = \"availabilityZone\",\n    BackupRetentionPeriod = 123,\n    CaCertificateIdentifier = \"caCertificateIdentifier\",\n    CharacterSetName = \"characterSetName\",\n    CopyTagsToSnapshot = false,\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n    DbInstanceIdentifier = \"dbInstanceIdentifier\",\n    DbName = \"dbName\",\n    DbParameterGroupName = \"dbParameterGroupName\",\n    DbSecurityGroups = new [] { \"dbSecurityGroups\" },\n    DbSnapshotIdentifier = \"dbSnapshotIdentifier\",\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    DeleteAutomatedBackups = false,\n    DeletionProtection = false,\n    Domain = \"domain\",\n    DomainIamRoleName = \"domainIamRoleName\",\n    EnableCloudwatchLogsExports = new [] { \"enableCloudwatchLogsExports\" },\n    EnableIamDatabaseAuthentication = false,\n    EnablePerformanceInsights = false,\n    Engine = \"engine\",\n    EngineVersion = \"engineVersion\",\n    Iops = 123,\n    KmsKeyId = \"kmsKeyId\",\n    LicenseModel = \"licenseModel\",\n    MasterUsername = \"masterUsername\",\n    MasterUserPassword = \"masterUserPassword\",\n    MaxAllocatedStorage = 123,\n    MonitoringInterval = 123,\n    MonitoringRoleArn = \"monitoringRoleArn\",\n    MultiAz = false,\n    OptionGroupName = \"optionGroupName\",\n    PerformanceInsightsKmsKeyId = \"performanceInsightsKmsKeyId\",\n    PerformanceInsightsRetentionPeriod = 123,\n    Port = \"port\",\n    PreferredBackupWindow = \"preferredBackupWindow\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    ProcessorFeatures = new [] { new ProcessorFeatureProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    PromotionTier = 123,\n    PubliclyAccessible = false,\n    SourceDbInstanceIdentifier = \"sourceDbInstanceIdentifier\",\n    SourceRegion = \"sourceRegion\",\n    StorageEncrypted = false,\n    StorageType = \"storageType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Timezone = \"timezone\",\n    UseDefaultProcessorFeatures = false,\n    VpcSecurityGroups = new [] { \"vpcSecurityGroups\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBInstance cfnDBInstance = CfnDBInstance.Builder.create(this, \"MyCfnDBInstance\")\n        .dbInstanceClass(\"dbInstanceClass\")\n\n        // the properties below are optional\n        .allocatedStorage(\"allocatedStorage\")\n        .allowMajorVersionUpgrade(false)\n        .associatedRoles(List.of(DBInstanceRoleProperty.builder()\n                .featureName(\"featureName\")\n                .roleArn(\"roleArn\")\n                .build()))\n        .autoMinorVersionUpgrade(false)\n        .availabilityZone(\"availabilityZone\")\n        .backupRetentionPeriod(123)\n        .caCertificateIdentifier(\"caCertificateIdentifier\")\n        .characterSetName(\"characterSetName\")\n        .copyTagsToSnapshot(false)\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n        .dbInstanceIdentifier(\"dbInstanceIdentifier\")\n        .dbName(\"dbName\")\n        .dbParameterGroupName(\"dbParameterGroupName\")\n        .dbSecurityGroups(List.of(\"dbSecurityGroups\"))\n        .dbSnapshotIdentifier(\"dbSnapshotIdentifier\")\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .deleteAutomatedBackups(false)\n        .deletionProtection(false)\n        .domain(\"domain\")\n        .domainIamRoleName(\"domainIamRoleName\")\n        .enableCloudwatchLogsExports(List.of(\"enableCloudwatchLogsExports\"))\n        .enableIamDatabaseAuthentication(false)\n        .enablePerformanceInsights(false)\n        .engine(\"engine\")\n        .engineVersion(\"engineVersion\")\n        .iops(123)\n        .kmsKeyId(\"kmsKeyId\")\n        .licenseModel(\"licenseModel\")\n        .masterUsername(\"masterUsername\")\n        .masterUserPassword(\"masterUserPassword\")\n        .maxAllocatedStorage(123)\n        .monitoringInterval(123)\n        .monitoringRoleArn(\"monitoringRoleArn\")\n        .multiAz(false)\n        .optionGroupName(\"optionGroupName\")\n        .performanceInsightsKmsKeyId(\"performanceInsightsKmsKeyId\")\n        .performanceInsightsRetentionPeriod(123)\n        .port(\"port\")\n        .preferredBackupWindow(\"preferredBackupWindow\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .processorFeatures(List.of(ProcessorFeatureProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .promotionTier(123)\n        .publiclyAccessible(false)\n        .sourceDbInstanceIdentifier(\"sourceDbInstanceIdentifier\")\n        .sourceRegion(\"sourceRegion\")\n        .storageEncrypted(false)\n        .storageType(\"storageType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .timezone(\"timezone\")\n        .useDefaultProcessorFeatures(false)\n        .vpcSecurityGroups(List.of(\"vpcSecurityGroups\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBInstance := rds.NewCfnDBInstance(this, jsii.String(\"MyCfnDBInstance\"), &cfnDBInstanceProps{\n\tdbInstanceClass: jsii.String(\"dbInstanceClass\"),\n\n\t// the properties below are optional\n\tallocatedStorage: jsii.String(\"allocatedStorage\"),\n\tallowMajorVersionUpgrade: jsii.Boolean(false),\n\tassociatedRoles: []interface{}{\n\t\t&dBInstanceRoleProperty{\n\t\t\tfeatureName: jsii.String(\"featureName\"),\n\t\t\troleArn: jsii.String(\"roleArn\"),\n\t\t},\n\t},\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tbackupRetentionPeriod: jsii.Number(123),\n\tcaCertificateIdentifier: jsii.String(\"caCertificateIdentifier\"),\n\tcharacterSetName: jsii.String(\"characterSetName\"),\n\tcopyTagsToSnapshot: jsii.Boolean(false),\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\tdbInstanceIdentifier: jsii.String(\"dbInstanceIdentifier\"),\n\tdbName: jsii.String(\"dbName\"),\n\tdbParameterGroupName: jsii.String(\"dbParameterGroupName\"),\n\tdbSecurityGroups: []*string{\n\t\tjsii.String(\"dbSecurityGroups\"),\n\t},\n\tdbSnapshotIdentifier: jsii.String(\"dbSnapshotIdentifier\"),\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\tdeleteAutomatedBackups: jsii.Boolean(false),\n\tdeletionProtection: jsii.Boolean(false),\n\tdomain: jsii.String(\"domain\"),\n\tdomainIamRoleName: jsii.String(\"domainIamRoleName\"),\n\tenableCloudwatchLogsExports: []*string{\n\t\tjsii.String(\"enableCloudwatchLogsExports\"),\n\t},\n\tenableIamDatabaseAuthentication: jsii.Boolean(false),\n\tenablePerformanceInsights: jsii.Boolean(false),\n\tengine: jsii.String(\"engine\"),\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tiops: jsii.Number(123),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tlicenseModel: jsii.String(\"licenseModel\"),\n\tmasterUsername: jsii.String(\"masterUsername\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\tmaxAllocatedStorage: jsii.Number(123),\n\tmonitoringInterval: jsii.Number(123),\n\tmonitoringRoleArn: jsii.String(\"monitoringRoleArn\"),\n\tmultiAz: jsii.Boolean(false),\n\toptionGroupName: jsii.String(\"optionGroupName\"),\n\tperformanceInsightsKmsKeyId: jsii.String(\"performanceInsightsKmsKeyId\"),\n\tperformanceInsightsRetentionPeriod: jsii.Number(123),\n\tport: jsii.String(\"port\"),\n\tpreferredBackupWindow: jsii.String(\"preferredBackupWindow\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\tprocessorFeatures: []interface{}{\n\t\t&processorFeatureProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tpromotionTier: jsii.Number(123),\n\tpubliclyAccessible: jsii.Boolean(false),\n\tsourceDbInstanceIdentifier: jsii.String(\"sourceDbInstanceIdentifier\"),\n\tsourceRegion: jsii.String(\"sourceRegion\"),\n\tstorageEncrypted: jsii.Boolean(false),\n\tstorageType: jsii.String(\"storageType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttimezone: jsii.String(\"timezone\"),\n\tuseDefaultProcessorFeatures: jsii.Boolean(false),\n\tvpcSecurityGroups: []*string{\n\t\tjsii.String(\"vpcSecurityGroups\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBInstance = new rds.CfnDBInstance(this, 'MyCfnDBInstance', {\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  allocatedStorage: 'allocatedStorage',\n  allowMajorVersionUpgrade: false,\n  associatedRoles: [{\n    featureName: 'featureName',\n    roleArn: 'roleArn',\n  }],\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  backupRetentionPeriod: 123,\n  caCertificateIdentifier: 'caCertificateIdentifier',\n  characterSetName: 'characterSetName',\n  copyTagsToSnapshot: false,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  dbName: 'dbName',\n  dbParameterGroupName: 'dbParameterGroupName',\n  dbSecurityGroups: ['dbSecurityGroups'],\n  dbSnapshotIdentifier: 'dbSnapshotIdentifier',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deleteAutomatedBackups: false,\n  deletionProtection: false,\n  domain: 'domain',\n  domainIamRoleName: 'domainIamRoleName',\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  enableIamDatabaseAuthentication: false,\n  enablePerformanceInsights: false,\n  engine: 'engine',\n  engineVersion: 'engineVersion',\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  licenseModel: 'licenseModel',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  maxAllocatedStorage: 123,\n  monitoringInterval: 123,\n  monitoringRoleArn: 'monitoringRoleArn',\n  multiAz: false,\n  optionGroupName: 'optionGroupName',\n  performanceInsightsKmsKeyId: 'performanceInsightsKmsKeyId',\n  performanceInsightsRetentionPeriod: 123,\n  port: 'port',\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  processorFeatures: [{\n    name: 'name',\n    value: 'value',\n  }],\n  promotionTier: 123,\n  publiclyAccessible: false,\n  sourceDbInstanceIdentifier: 'sourceDbInstanceIdentifier',\n  sourceRegion: 'sourceRegion',\n  storageEncrypted: false,\n  storageType: 'storageType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timezone: 'timezone',\n  useDefaultProcessorFeatures: false,\n  vpcSecurityGroups: ['vpcSecurityGroups'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBInstance",
        "@aws-cdk/aws-rds.CfnDBInstanceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBInstance = new rds.CfnDBInstance(this, 'MyCfnDBInstance', {\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  allocatedStorage: 'allocatedStorage',\n  allowMajorVersionUpgrade: false,\n  associatedRoles: [{\n    featureName: 'featureName',\n    roleArn: 'roleArn',\n  }],\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  backupRetentionPeriod: 123,\n  caCertificateIdentifier: 'caCertificateIdentifier',\n  characterSetName: 'characterSetName',\n  copyTagsToSnapshot: false,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  dbName: 'dbName',\n  dbParameterGroupName: 'dbParameterGroupName',\n  dbSecurityGroups: ['dbSecurityGroups'],\n  dbSnapshotIdentifier: 'dbSnapshotIdentifier',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deleteAutomatedBackups: false,\n  deletionProtection: false,\n  domain: 'domain',\n  domainIamRoleName: 'domainIamRoleName',\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  enableIamDatabaseAuthentication: false,\n  enablePerformanceInsights: false,\n  engine: 'engine',\n  engineVersion: 'engineVersion',\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  licenseModel: 'licenseModel',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  maxAllocatedStorage: 123,\n  monitoringInterval: 123,\n  monitoringRoleArn: 'monitoringRoleArn',\n  multiAz: false,\n  optionGroupName: 'optionGroupName',\n  performanceInsightsKmsKeyId: 'performanceInsightsKmsKeyId',\n  performanceInsightsRetentionPeriod: 123,\n  port: 'port',\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  processorFeatures: [{\n    name: 'name',\n    value: 'value',\n  }],\n  promotionTier: 123,\n  publiclyAccessible: false,\n  sourceDbInstanceIdentifier: 'sourceDbInstanceIdentifier',\n  sourceRegion: 'sourceRegion',\n  storageEncrypted: false,\n  storageType: 'storageType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timezone: 'timezone',\n  useDefaultProcessorFeatures: false,\n  vpcSecurityGroups: ['vpcSecurityGroups'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 40,
        "75": 62,
        "91": 11,
        "104": 1,
        "192": 6,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 58,
        "290": 1
      },
      "fqnsFingerprint": "e64d4daf57b0b98a69e89166d8298d110418b1f382cd6ffd8fc4770f5a76d8ee"
    },
    "3f7b09e448c36638ac7718bace1e8004bf55717fbf7b3c62ca42bcc2e15a2a41": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nd_bInstance_role_property = rds.CfnDBInstance.DBInstanceRoleProperty(\n    feature_name=\"featureName\",\n    role_arn=\"roleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nDBInstanceRoleProperty dBInstanceRoleProperty = new DBInstanceRoleProperty {\n    FeatureName = \"featureName\",\n    RoleArn = \"roleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nDBInstanceRoleProperty dBInstanceRoleProperty = DBInstanceRoleProperty.builder()\n        .featureName(\"featureName\")\n        .roleArn(\"roleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ndBInstanceRoleProperty := &dBInstanceRoleProperty{\n\tfeatureName: jsii.String(\"featureName\"),\n\troleArn: jsii.String(\"roleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst dBInstanceRoleProperty: rds.CfnDBInstance.DBInstanceRoleProperty = {\n  featureName: 'featureName',\n  roleArn: 'roleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBInstance.DBInstanceRoleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBInstance.DBInstanceRoleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dBInstanceRoleProperty: rds.CfnDBInstance.DBInstanceRoleProperty = {\n  featureName: 'featureName',\n  roleArn: 'roleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "48e163a4526d602def916e819eb3f1a66d43115ffa1994988e94d299055d609e"
    },
    "b686baad589de0bba106c727cbe6f8c5694dc551da7b70ff7f162e211be3366a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nprocessor_feature_property = rds.CfnDBInstance.ProcessorFeatureProperty(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nProcessorFeatureProperty processorFeatureProperty = new ProcessorFeatureProperty {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nProcessorFeatureProperty processorFeatureProperty = ProcessorFeatureProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nprocessorFeatureProperty := &processorFeatureProperty{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst processorFeatureProperty: rds.CfnDBInstance.ProcessorFeatureProperty = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBInstance.ProcessorFeatureProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBInstance.ProcessorFeatureProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst processorFeatureProperty: rds.CfnDBInstance.ProcessorFeatureProperty = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4fc0820fc4a11e9ca82752028c70b06cacfb8d6235ff05f451944469d7b1ac0d"
    },
    "a500685fcda23321adcb6dfe8dc4927961be587946d57226e8044496d39475ba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBInstance_props = rds.CfnDBInstanceProps(\n    db_instance_class=\"dbInstanceClass\",\n\n    # the properties below are optional\n    allocated_storage=\"allocatedStorage\",\n    allow_major_version_upgrade=False,\n    associated_roles=[rds.CfnDBInstance.DBInstanceRoleProperty(\n        feature_name=\"featureName\",\n        role_arn=\"roleArn\"\n    )],\n    auto_minor_version_upgrade=False,\n    availability_zone=\"availabilityZone\",\n    backup_retention_period=123,\n    ca_certificate_identifier=\"caCertificateIdentifier\",\n    character_set_name=\"characterSetName\",\n    copy_tags_to_snapshot=False,\n    db_cluster_identifier=\"dbClusterIdentifier\",\n    db_instance_identifier=\"dbInstanceIdentifier\",\n    db_name=\"dbName\",\n    db_parameter_group_name=\"dbParameterGroupName\",\n    db_security_groups=[\"dbSecurityGroups\"],\n    db_snapshot_identifier=\"dbSnapshotIdentifier\",\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    delete_automated_backups=False,\n    deletion_protection=False,\n    domain=\"domain\",\n    domain_iam_role_name=\"domainIamRoleName\",\n    enable_cloudwatch_logs_exports=[\"enableCloudwatchLogsExports\"],\n    enable_iam_database_authentication=False,\n    enable_performance_insights=False,\n    engine=\"engine\",\n    engine_version=\"engineVersion\",\n    iops=123,\n    kms_key_id=\"kmsKeyId\",\n    license_model=\"licenseModel\",\n    master_username=\"masterUsername\",\n    master_user_password=\"masterUserPassword\",\n    max_allocated_storage=123,\n    monitoring_interval=123,\n    monitoring_role_arn=\"monitoringRoleArn\",\n    multi_az=False,\n    option_group_name=\"optionGroupName\",\n    performance_insights_kms_key_id=\"performanceInsightsKmsKeyId\",\n    performance_insights_retention_period=123,\n    port=\"port\",\n    preferred_backup_window=\"preferredBackupWindow\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    processor_features=[rds.CfnDBInstance.ProcessorFeatureProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    promotion_tier=123,\n    publicly_accessible=False,\n    source_db_instance_identifier=\"sourceDbInstanceIdentifier\",\n    source_region=\"sourceRegion\",\n    storage_encrypted=False,\n    storage_type=\"storageType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    timezone=\"timezone\",\n    use_default_processor_features=False,\n    vpc_security_groups=[\"vpcSecurityGroups\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBInstanceProps cfnDBInstanceProps = new CfnDBInstanceProps {\n    DbInstanceClass = \"dbInstanceClass\",\n\n    // the properties below are optional\n    AllocatedStorage = \"allocatedStorage\",\n    AllowMajorVersionUpgrade = false,\n    AssociatedRoles = new [] { new DBInstanceRoleProperty {\n        FeatureName = \"featureName\",\n        RoleArn = \"roleArn\"\n    } },\n    AutoMinorVersionUpgrade = false,\n    AvailabilityZone = \"availabilityZone\",\n    BackupRetentionPeriod = 123,\n    CaCertificateIdentifier = \"caCertificateIdentifier\",\n    CharacterSetName = \"characterSetName\",\n    CopyTagsToSnapshot = false,\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n    DbInstanceIdentifier = \"dbInstanceIdentifier\",\n    DbName = \"dbName\",\n    DbParameterGroupName = \"dbParameterGroupName\",\n    DbSecurityGroups = new [] { \"dbSecurityGroups\" },\n    DbSnapshotIdentifier = \"dbSnapshotIdentifier\",\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    DeleteAutomatedBackups = false,\n    DeletionProtection = false,\n    Domain = \"domain\",\n    DomainIamRoleName = \"domainIamRoleName\",\n    EnableCloudwatchLogsExports = new [] { \"enableCloudwatchLogsExports\" },\n    EnableIamDatabaseAuthentication = false,\n    EnablePerformanceInsights = false,\n    Engine = \"engine\",\n    EngineVersion = \"engineVersion\",\n    Iops = 123,\n    KmsKeyId = \"kmsKeyId\",\n    LicenseModel = \"licenseModel\",\n    MasterUsername = \"masterUsername\",\n    MasterUserPassword = \"masterUserPassword\",\n    MaxAllocatedStorage = 123,\n    MonitoringInterval = 123,\n    MonitoringRoleArn = \"monitoringRoleArn\",\n    MultiAz = false,\n    OptionGroupName = \"optionGroupName\",\n    PerformanceInsightsKmsKeyId = \"performanceInsightsKmsKeyId\",\n    PerformanceInsightsRetentionPeriod = 123,\n    Port = \"port\",\n    PreferredBackupWindow = \"preferredBackupWindow\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    ProcessorFeatures = new [] { new ProcessorFeatureProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    PromotionTier = 123,\n    PubliclyAccessible = false,\n    SourceDbInstanceIdentifier = \"sourceDbInstanceIdentifier\",\n    SourceRegion = \"sourceRegion\",\n    StorageEncrypted = false,\n    StorageType = \"storageType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Timezone = \"timezone\",\n    UseDefaultProcessorFeatures = false,\n    VpcSecurityGroups = new [] { \"vpcSecurityGroups\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBInstanceProps cfnDBInstanceProps = CfnDBInstanceProps.builder()\n        .dbInstanceClass(\"dbInstanceClass\")\n\n        // the properties below are optional\n        .allocatedStorage(\"allocatedStorage\")\n        .allowMajorVersionUpgrade(false)\n        .associatedRoles(List.of(DBInstanceRoleProperty.builder()\n                .featureName(\"featureName\")\n                .roleArn(\"roleArn\")\n                .build()))\n        .autoMinorVersionUpgrade(false)\n        .availabilityZone(\"availabilityZone\")\n        .backupRetentionPeriod(123)\n        .caCertificateIdentifier(\"caCertificateIdentifier\")\n        .characterSetName(\"characterSetName\")\n        .copyTagsToSnapshot(false)\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n        .dbInstanceIdentifier(\"dbInstanceIdentifier\")\n        .dbName(\"dbName\")\n        .dbParameterGroupName(\"dbParameterGroupName\")\n        .dbSecurityGroups(List.of(\"dbSecurityGroups\"))\n        .dbSnapshotIdentifier(\"dbSnapshotIdentifier\")\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .deleteAutomatedBackups(false)\n        .deletionProtection(false)\n        .domain(\"domain\")\n        .domainIamRoleName(\"domainIamRoleName\")\n        .enableCloudwatchLogsExports(List.of(\"enableCloudwatchLogsExports\"))\n        .enableIamDatabaseAuthentication(false)\n        .enablePerformanceInsights(false)\n        .engine(\"engine\")\n        .engineVersion(\"engineVersion\")\n        .iops(123)\n        .kmsKeyId(\"kmsKeyId\")\n        .licenseModel(\"licenseModel\")\n        .masterUsername(\"masterUsername\")\n        .masterUserPassword(\"masterUserPassword\")\n        .maxAllocatedStorage(123)\n        .monitoringInterval(123)\n        .monitoringRoleArn(\"monitoringRoleArn\")\n        .multiAz(false)\n        .optionGroupName(\"optionGroupName\")\n        .performanceInsightsKmsKeyId(\"performanceInsightsKmsKeyId\")\n        .performanceInsightsRetentionPeriod(123)\n        .port(\"port\")\n        .preferredBackupWindow(\"preferredBackupWindow\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .processorFeatures(List.of(ProcessorFeatureProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .promotionTier(123)\n        .publiclyAccessible(false)\n        .sourceDbInstanceIdentifier(\"sourceDbInstanceIdentifier\")\n        .sourceRegion(\"sourceRegion\")\n        .storageEncrypted(false)\n        .storageType(\"storageType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .timezone(\"timezone\")\n        .useDefaultProcessorFeatures(false)\n        .vpcSecurityGroups(List.of(\"vpcSecurityGroups\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBInstanceProps := &cfnDBInstanceProps{\n\tdbInstanceClass: jsii.String(\"dbInstanceClass\"),\n\n\t// the properties below are optional\n\tallocatedStorage: jsii.String(\"allocatedStorage\"),\n\tallowMajorVersionUpgrade: jsii.Boolean(false),\n\tassociatedRoles: []interface{}{\n\t\t&dBInstanceRoleProperty{\n\t\t\tfeatureName: jsii.String(\"featureName\"),\n\t\t\troleArn: jsii.String(\"roleArn\"),\n\t\t},\n\t},\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tbackupRetentionPeriod: jsii.Number(123),\n\tcaCertificateIdentifier: jsii.String(\"caCertificateIdentifier\"),\n\tcharacterSetName: jsii.String(\"characterSetName\"),\n\tcopyTagsToSnapshot: jsii.Boolean(false),\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\tdbInstanceIdentifier: jsii.String(\"dbInstanceIdentifier\"),\n\tdbName: jsii.String(\"dbName\"),\n\tdbParameterGroupName: jsii.String(\"dbParameterGroupName\"),\n\tdbSecurityGroups: []*string{\n\t\tjsii.String(\"dbSecurityGroups\"),\n\t},\n\tdbSnapshotIdentifier: jsii.String(\"dbSnapshotIdentifier\"),\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\tdeleteAutomatedBackups: jsii.Boolean(false),\n\tdeletionProtection: jsii.Boolean(false),\n\tdomain: jsii.String(\"domain\"),\n\tdomainIamRoleName: jsii.String(\"domainIamRoleName\"),\n\tenableCloudwatchLogsExports: []*string{\n\t\tjsii.String(\"enableCloudwatchLogsExports\"),\n\t},\n\tenableIamDatabaseAuthentication: jsii.Boolean(false),\n\tenablePerformanceInsights: jsii.Boolean(false),\n\tengine: jsii.String(\"engine\"),\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tiops: jsii.Number(123),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tlicenseModel: jsii.String(\"licenseModel\"),\n\tmasterUsername: jsii.String(\"masterUsername\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\tmaxAllocatedStorage: jsii.Number(123),\n\tmonitoringInterval: jsii.Number(123),\n\tmonitoringRoleArn: jsii.String(\"monitoringRoleArn\"),\n\tmultiAz: jsii.Boolean(false),\n\toptionGroupName: jsii.String(\"optionGroupName\"),\n\tperformanceInsightsKmsKeyId: jsii.String(\"performanceInsightsKmsKeyId\"),\n\tperformanceInsightsRetentionPeriod: jsii.Number(123),\n\tport: jsii.String(\"port\"),\n\tpreferredBackupWindow: jsii.String(\"preferredBackupWindow\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\tprocessorFeatures: []interface{}{\n\t\t&processorFeatureProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tpromotionTier: jsii.Number(123),\n\tpubliclyAccessible: jsii.Boolean(false),\n\tsourceDbInstanceIdentifier: jsii.String(\"sourceDbInstanceIdentifier\"),\n\tsourceRegion: jsii.String(\"sourceRegion\"),\n\tstorageEncrypted: jsii.Boolean(false),\n\tstorageType: jsii.String(\"storageType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttimezone: jsii.String(\"timezone\"),\n\tuseDefaultProcessorFeatures: jsii.Boolean(false),\n\tvpcSecurityGroups: []*string{\n\t\tjsii.String(\"vpcSecurityGroups\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBInstanceProps: rds.CfnDBInstanceProps = {\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  allocatedStorage: 'allocatedStorage',\n  allowMajorVersionUpgrade: false,\n  associatedRoles: [{\n    featureName: 'featureName',\n    roleArn: 'roleArn',\n  }],\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  backupRetentionPeriod: 123,\n  caCertificateIdentifier: 'caCertificateIdentifier',\n  characterSetName: 'characterSetName',\n  copyTagsToSnapshot: false,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  dbName: 'dbName',\n  dbParameterGroupName: 'dbParameterGroupName',\n  dbSecurityGroups: ['dbSecurityGroups'],\n  dbSnapshotIdentifier: 'dbSnapshotIdentifier',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deleteAutomatedBackups: false,\n  deletionProtection: false,\n  domain: 'domain',\n  domainIamRoleName: 'domainIamRoleName',\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  enableIamDatabaseAuthentication: false,\n  enablePerformanceInsights: false,\n  engine: 'engine',\n  engineVersion: 'engineVersion',\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  licenseModel: 'licenseModel',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  maxAllocatedStorage: 123,\n  monitoringInterval: 123,\n  monitoringRoleArn: 'monitoringRoleArn',\n  multiAz: false,\n  optionGroupName: 'optionGroupName',\n  performanceInsightsKmsKeyId: 'performanceInsightsKmsKeyId',\n  performanceInsightsRetentionPeriod: 123,\n  port: 'port',\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  processorFeatures: [{\n    name: 'name',\n    value: 'value',\n  }],\n  promotionTier: 123,\n  publiclyAccessible: false,\n  sourceDbInstanceIdentifier: 'sourceDbInstanceIdentifier',\n  sourceRegion: 'sourceRegion',\n  storageEncrypted: false,\n  storageType: 'storageType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timezone: 'timezone',\n  useDefaultProcessorFeatures: false,\n  vpcSecurityGroups: ['vpcSecurityGroups'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBInstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBInstanceProps: rds.CfnDBInstanceProps = {\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  allocatedStorage: 'allocatedStorage',\n  allowMajorVersionUpgrade: false,\n  associatedRoles: [{\n    featureName: 'featureName',\n    roleArn: 'roleArn',\n  }],\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  backupRetentionPeriod: 123,\n  caCertificateIdentifier: 'caCertificateIdentifier',\n  characterSetName: 'characterSetName',\n  copyTagsToSnapshot: false,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  dbName: 'dbName',\n  dbParameterGroupName: 'dbParameterGroupName',\n  dbSecurityGroups: ['dbSecurityGroups'],\n  dbSnapshotIdentifier: 'dbSnapshotIdentifier',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deleteAutomatedBackups: false,\n  deletionProtection: false,\n  domain: 'domain',\n  domainIamRoleName: 'domainIamRoleName',\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  enableIamDatabaseAuthentication: false,\n  enablePerformanceInsights: false,\n  engine: 'engine',\n  engineVersion: 'engineVersion',\n  iops: 123,\n  kmsKeyId: 'kmsKeyId',\n  licenseModel: 'licenseModel',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  maxAllocatedStorage: 123,\n  monitoringInterval: 123,\n  monitoringRoleArn: 'monitoringRoleArn',\n  multiAz: false,\n  optionGroupName: 'optionGroupName',\n  performanceInsightsKmsKeyId: 'performanceInsightsKmsKeyId',\n  performanceInsightsRetentionPeriod: 123,\n  port: 'port',\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  processorFeatures: [{\n    name: 'name',\n    value: 'value',\n  }],\n  promotionTier: 123,\n  publiclyAccessible: false,\n  sourceDbInstanceIdentifier: 'sourceDbInstanceIdentifier',\n  sourceRegion: 'sourceRegion',\n  storageEncrypted: false,\n  storageType: 'storageType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  timezone: 'timezone',\n  useDefaultProcessorFeatures: false,\n  vpcSecurityGroups: ['vpcSecurityGroups'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 39,
        "75": 62,
        "91": 11,
        "153": 1,
        "169": 1,
        "192": 6,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 58,
        "290": 1
      },
      "fqnsFingerprint": "71e81080ec250e629a40ea7cfa576f3c60ccbdae4f6b2b65977ac77472693f18"
    },
    "211c0426157440a550a11b7cac29ce18d2ec159f71323c522203d80672b8b87f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBParameter_group = rds.CfnDBParameterGroup(self, \"MyCfnDBParameterGroup\",\n    description=\"description\",\n    family=\"family\",\n\n    # the properties below are optional\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBParameterGroup cfnDBParameterGroup = new CfnDBParameterGroup(this, \"MyCfnDBParameterGroup\", new CfnDBParameterGroupProps {\n    Description = \"description\",\n    Family = \"family\",\n\n    // the properties below are optional\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBParameterGroup cfnDBParameterGroup = CfnDBParameterGroup.Builder.create(this, \"MyCfnDBParameterGroup\")\n        .description(\"description\")\n        .family(\"family\")\n\n        // the properties below are optional\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBParameterGroup := rds.NewCfnDBParameterGroup(this, jsii.String(\"MyCfnDBParameterGroup\"), &cfnDBParameterGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tfamily: jsii.String(\"family\"),\n\n\t// the properties below are optional\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBParameterGroup = new rds.CfnDBParameterGroup(this, 'MyCfnDBParameterGroup', {\n  description: 'description',\n  family: 'family',\n\n  // the properties below are optional\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBParameterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBParameterGroup",
        "@aws-cdk/aws-rds.CfnDBParameterGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBParameterGroup = new rds.CfnDBParameterGroup(this, 'MyCfnDBParameterGroup', {\n  description: 'description',\n  family: 'family',\n\n  // the properties below are optional\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 11,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "d8b9d2c6176c1d91bff6afded58655613cf8c39a5dff91db3f2f1ef972236a65"
    },
    "12d911d6e7a064ecf11fc2388989faf4fe4c03d3e39f21c9acc0498ae7e557dd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBParameter_group_props = rds.CfnDBParameterGroupProps(\n    description=\"description\",\n    family=\"family\",\n\n    # the properties below are optional\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBParameterGroupProps cfnDBParameterGroupProps = new CfnDBParameterGroupProps {\n    Description = \"description\",\n    Family = \"family\",\n\n    // the properties below are optional\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBParameterGroupProps cfnDBParameterGroupProps = CfnDBParameterGroupProps.builder()\n        .description(\"description\")\n        .family(\"family\")\n\n        // the properties below are optional\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBParameterGroupProps := &cfnDBParameterGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tfamily: jsii.String(\"family\"),\n\n\t// the properties below are optional\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBParameterGroupProps: rds.CfnDBParameterGroupProps = {\n  description: 'description',\n  family: 'family',\n\n  // the properties below are optional\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBParameterGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBParameterGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBParameterGroupProps: rds.CfnDBParameterGroupProps = {\n  description: 'description',\n  family: 'family',\n\n  // the properties below are optional\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "99c7849f5098fd41d64555c518fd70d7e17436ef4e5fb4ed7e4c9eb63dbb3b5e"
    },
    "9e995831f99c4250e0a1b5fed4072c22e15686d4d36367b4f257d91954376869": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBProxy = rds.CfnDBProxy(self, \"MyCfnDBProxy\",\n    auth=[rds.CfnDBProxy.AuthFormatProperty(\n        auth_scheme=\"authScheme\",\n        description=\"description\",\n        iam_auth=\"iamAuth\",\n        secret_arn=\"secretArn\",\n        user_name=\"userName\"\n    )],\n    db_proxy_name=\"dbProxyName\",\n    engine_family=\"engineFamily\",\n    role_arn=\"roleArn\",\n    vpc_subnet_ids=[\"vpcSubnetIds\"],\n\n    # the properties below are optional\n    debug_logging=False,\n    idle_client_timeout=123,\n    require_tls=False,\n    tags=[rds.CfnDBProxy.TagFormatProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBProxy cfnDBProxy = new CfnDBProxy(this, \"MyCfnDBProxy\", new CfnDBProxyProps {\n    Auth = new [] { new AuthFormatProperty {\n        AuthScheme = \"authScheme\",\n        Description = \"description\",\n        IamAuth = \"iamAuth\",\n        SecretArn = \"secretArn\",\n        UserName = \"userName\"\n    } },\n    DbProxyName = \"dbProxyName\",\n    EngineFamily = \"engineFamily\",\n    RoleArn = \"roleArn\",\n    VpcSubnetIds = new [] { \"vpcSubnetIds\" },\n\n    // the properties below are optional\n    DebugLogging = false,\n    IdleClientTimeout = 123,\n    RequireTls = false,\n    Tags = new [] { new TagFormatProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBProxy cfnDBProxy = CfnDBProxy.Builder.create(this, \"MyCfnDBProxy\")\n        .auth(List.of(AuthFormatProperty.builder()\n                .authScheme(\"authScheme\")\n                .description(\"description\")\n                .iamAuth(\"iamAuth\")\n                .secretArn(\"secretArn\")\n                .userName(\"userName\")\n                .build()))\n        .dbProxyName(\"dbProxyName\")\n        .engineFamily(\"engineFamily\")\n        .roleArn(\"roleArn\")\n        .vpcSubnetIds(List.of(\"vpcSubnetIds\"))\n\n        // the properties below are optional\n        .debugLogging(false)\n        .idleClientTimeout(123)\n        .requireTls(false)\n        .tags(List.of(TagFormatProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBProxy := rds.NewCfnDBProxy(this, jsii.String(\"MyCfnDBProxy\"), &cfnDBProxyProps{\n\tauth: []interface{}{\n\t\t&authFormatProperty{\n\t\t\tauthScheme: jsii.String(\"authScheme\"),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tiamAuth: jsii.String(\"iamAuth\"),\n\t\t\tsecretArn: jsii.String(\"secretArn\"),\n\t\t\tuserName: jsii.String(\"userName\"),\n\t\t},\n\t},\n\tdbProxyName: jsii.String(\"dbProxyName\"),\n\tengineFamily: jsii.String(\"engineFamily\"),\n\troleArn: jsii.String(\"roleArn\"),\n\tvpcSubnetIds: []*string{\n\t\tjsii.String(\"vpcSubnetIds\"),\n\t},\n\n\t// the properties below are optional\n\tdebugLogging: jsii.Boolean(false),\n\tidleClientTimeout: jsii.Number(123),\n\trequireTls: jsii.Boolean(false),\n\ttags: []tagFormatProperty{\n\t\t&tagFormatProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBProxy = new rds.CfnDBProxy(this, 'MyCfnDBProxy', {\n  auth: [{\n    authScheme: 'authScheme',\n    description: 'description',\n    iamAuth: 'iamAuth',\n    secretArn: 'secretArn',\n    userName: 'userName',\n  }],\n  dbProxyName: 'dbProxyName',\n  engineFamily: 'engineFamily',\n  roleArn: 'roleArn',\n  vpcSubnetIds: ['vpcSubnetIds'],\n\n  // the properties below are optional\n  debugLogging: false,\n  idleClientTimeout: 123,\n  requireTls: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxy",
        "@aws-cdk/aws-rds.CfnDBProxyProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBProxy = new rds.CfnDBProxy(this, 'MyCfnDBProxy', {\n  auth: [{\n    authScheme: 'authScheme',\n    description: 'description',\n    iamAuth: 'iamAuth',\n    secretArn: 'secretArn',\n    userName: 'userName',\n  }],\n  dbProxyName: 'dbProxyName',\n  engineFamily: 'engineFamily',\n  roleArn: 'roleArn',\n  vpcSubnetIds: ['vpcSubnetIds'],\n\n  // the properties below are optional\n  debugLogging: false,\n  idleClientTimeout: 123,\n  requireTls: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 21,
        "91": 2,
        "104": 1,
        "192": 4,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "778c4b68560c5dc4139ee19204e6f46131f73b0177471fb7d7b968ba2b463ce6"
    },
    "680fde06316cc4dbd601c29e97a0c1239ae11a8c8d459f1ef5a4ccbde5f5a845": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nauth_format_property = rds.CfnDBProxy.AuthFormatProperty(\n    auth_scheme=\"authScheme\",\n    description=\"description\",\n    iam_auth=\"iamAuth\",\n    secret_arn=\"secretArn\",\n    user_name=\"userName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nAuthFormatProperty authFormatProperty = new AuthFormatProperty {\n    AuthScheme = \"authScheme\",\n    Description = \"description\",\n    IamAuth = \"iamAuth\",\n    SecretArn = \"secretArn\",\n    UserName = \"userName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nAuthFormatProperty authFormatProperty = AuthFormatProperty.builder()\n        .authScheme(\"authScheme\")\n        .description(\"description\")\n        .iamAuth(\"iamAuth\")\n        .secretArn(\"secretArn\")\n        .userName(\"userName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nauthFormatProperty := &authFormatProperty{\n\tauthScheme: jsii.String(\"authScheme\"),\n\tdescription: jsii.String(\"description\"),\n\tiamAuth: jsii.String(\"iamAuth\"),\n\tsecretArn: jsii.String(\"secretArn\"),\n\tuserName: jsii.String(\"userName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst authFormatProperty: rds.CfnDBProxy.AuthFormatProperty = {\n  authScheme: 'authScheme',\n  description: 'description',\n  iamAuth: 'iamAuth',\n  secretArn: 'secretArn',\n  userName: 'userName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxy.AuthFormatProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxy.AuthFormatProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst authFormatProperty: rds.CfnDBProxy.AuthFormatProperty = {\n  authScheme: 'authScheme',\n  description: 'description',\n  iamAuth: 'iamAuth',\n  secretArn: 'secretArn',\n  userName: 'userName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c0f1f71345fd95b40a7e1c3d09ceb4c480bae6331b763607e53168bcc21a509c"
    },
    "5697e5362df54371e5572e8ccc481de51d326edeace4495e077886ed3e8af7e2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ntag_format_property = rds.CfnDBProxy.TagFormatProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nTagFormatProperty tagFormatProperty = new TagFormatProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nTagFormatProperty tagFormatProperty = TagFormatProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ntagFormatProperty := &tagFormatProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst tagFormatProperty: rds.CfnDBProxy.TagFormatProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxy.TagFormatProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxy.TagFormatProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagFormatProperty: rds.CfnDBProxy.TagFormatProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "840e6c67f0199231b281bd4187764d1fe747facccb66fc3093f45b9f2d9a3896"
    },
    "3cdc0a44df70c7832e63133efad8464dd0c60141d8257d9524021d58adef0304": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBProxy_endpoint = rds.CfnDBProxyEndpoint(self, \"MyCfnDBProxyEndpoint\",\n    db_proxy_endpoint_name=\"dbProxyEndpointName\",\n    db_proxy_name=\"dbProxyName\",\n    vpc_subnet_ids=[\"vpcSubnetIds\"],\n\n    # the properties below are optional\n    tags=[rds.CfnDBProxyEndpoint.TagFormatProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    target_role=\"targetRole\",\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBProxyEndpoint cfnDBProxyEndpoint = new CfnDBProxyEndpoint(this, \"MyCfnDBProxyEndpoint\", new CfnDBProxyEndpointProps {\n    DbProxyEndpointName = \"dbProxyEndpointName\",\n    DbProxyName = \"dbProxyName\",\n    VpcSubnetIds = new [] { \"vpcSubnetIds\" },\n\n    // the properties below are optional\n    Tags = new [] { new TagFormatProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TargetRole = \"targetRole\",\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBProxyEndpoint cfnDBProxyEndpoint = CfnDBProxyEndpoint.Builder.create(this, \"MyCfnDBProxyEndpoint\")\n        .dbProxyEndpointName(\"dbProxyEndpointName\")\n        .dbProxyName(\"dbProxyName\")\n        .vpcSubnetIds(List.of(\"vpcSubnetIds\"))\n\n        // the properties below are optional\n        .tags(List.of(TagFormatProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .targetRole(\"targetRole\")\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBProxyEndpoint := rds.NewCfnDBProxyEndpoint(this, jsii.String(\"MyCfnDBProxyEndpoint\"), &cfnDBProxyEndpointProps{\n\tdbProxyEndpointName: jsii.String(\"dbProxyEndpointName\"),\n\tdbProxyName: jsii.String(\"dbProxyName\"),\n\tvpcSubnetIds: []*string{\n\t\tjsii.String(\"vpcSubnetIds\"),\n\t},\n\n\t// the properties below are optional\n\ttags: []tagFormatProperty{\n\t\t&tagFormatProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttargetRole: jsii.String(\"targetRole\"),\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBProxyEndpoint = new rds.CfnDBProxyEndpoint(this, 'MyCfnDBProxyEndpoint', {\n  dbProxyEndpointName: 'dbProxyEndpointName',\n  dbProxyName: 'dbProxyName',\n  vpcSubnetIds: ['vpcSubnetIds'],\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  targetRole: 'targetRole',\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxyEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxyEndpoint",
        "@aws-cdk/aws-rds.CfnDBProxyEndpointProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBProxyEndpoint = new rds.CfnDBProxyEndpoint(this, 'MyCfnDBProxyEndpoint', {\n  dbProxyEndpointName: 'dbProxyEndpointName',\n  dbProxyName: 'dbProxyName',\n  vpcSubnetIds: ['vpcSubnetIds'],\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  targetRole: 'targetRole',\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "266e8e919748da431c66d3557ae8e5807545f4a29bfd56a01b2103cbc8daf1fd"
    },
    "2f21eb843cca3444ba6b0f65252172473a4248208b10a4c6bfe1707df9812ca9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ntag_format_property = rds.CfnDBProxyEndpoint.TagFormatProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nTagFormatProperty tagFormatProperty = new TagFormatProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nTagFormatProperty tagFormatProperty = TagFormatProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ntagFormatProperty := &tagFormatProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst tagFormatProperty: rds.CfnDBProxyEndpoint.TagFormatProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxyEndpoint.TagFormatProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxyEndpoint.TagFormatProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagFormatProperty: rds.CfnDBProxyEndpoint.TagFormatProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b74cd6ff08e81c3414bcaedbe394418ed4d280c27f64669d39c78e385719a481"
    },
    "fdd00c3724221227751d331553b7a65a8d686f9574c444fbc2d18dfcb5ba742e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBProxy_endpoint_props = rds.CfnDBProxyEndpointProps(\n    db_proxy_endpoint_name=\"dbProxyEndpointName\",\n    db_proxy_name=\"dbProxyName\",\n    vpc_subnet_ids=[\"vpcSubnetIds\"],\n\n    # the properties below are optional\n    tags=[rds.CfnDBProxyEndpoint.TagFormatProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    target_role=\"targetRole\",\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBProxyEndpointProps cfnDBProxyEndpointProps = new CfnDBProxyEndpointProps {\n    DbProxyEndpointName = \"dbProxyEndpointName\",\n    DbProxyName = \"dbProxyName\",\n    VpcSubnetIds = new [] { \"vpcSubnetIds\" },\n\n    // the properties below are optional\n    Tags = new [] { new TagFormatProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TargetRole = \"targetRole\",\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBProxyEndpointProps cfnDBProxyEndpointProps = CfnDBProxyEndpointProps.builder()\n        .dbProxyEndpointName(\"dbProxyEndpointName\")\n        .dbProxyName(\"dbProxyName\")\n        .vpcSubnetIds(List.of(\"vpcSubnetIds\"))\n\n        // the properties below are optional\n        .tags(List.of(TagFormatProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .targetRole(\"targetRole\")\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBProxyEndpointProps := &cfnDBProxyEndpointProps{\n\tdbProxyEndpointName: jsii.String(\"dbProxyEndpointName\"),\n\tdbProxyName: jsii.String(\"dbProxyName\"),\n\tvpcSubnetIds: []*string{\n\t\tjsii.String(\"vpcSubnetIds\"),\n\t},\n\n\t// the properties below are optional\n\ttags: []tagFormatProperty{\n\t\t&tagFormatProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttargetRole: jsii.String(\"targetRole\"),\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBProxyEndpointProps: rds.CfnDBProxyEndpointProps = {\n  dbProxyEndpointName: 'dbProxyEndpointName',\n  dbProxyName: 'dbProxyName',\n  vpcSubnetIds: ['vpcSubnetIds'],\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  targetRole: 'targetRole',\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxyEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxyEndpointProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBProxyEndpointProps: rds.CfnDBProxyEndpointProps = {\n  dbProxyEndpointName: 'dbProxyEndpointName',\n  dbProxyName: 'dbProxyName',\n  vpcSubnetIds: ['vpcSubnetIds'],\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  targetRole: 'targetRole',\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 12,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e370d9a904b5731ae182032177c3b1deee55977161c0a6dcfa902924135156d6"
    },
    "72e481d4ca14eb826ef957369b37a392555eb5c5d0f8d7cb44bdde26a4f7e4d7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBProxy_props = rds.CfnDBProxyProps(\n    auth=[rds.CfnDBProxy.AuthFormatProperty(\n        auth_scheme=\"authScheme\",\n        description=\"description\",\n        iam_auth=\"iamAuth\",\n        secret_arn=\"secretArn\",\n        user_name=\"userName\"\n    )],\n    db_proxy_name=\"dbProxyName\",\n    engine_family=\"engineFamily\",\n    role_arn=\"roleArn\",\n    vpc_subnet_ids=[\"vpcSubnetIds\"],\n\n    # the properties below are optional\n    debug_logging=False,\n    idle_client_timeout=123,\n    require_tls=False,\n    tags=[rds.CfnDBProxy.TagFormatProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBProxyProps cfnDBProxyProps = new CfnDBProxyProps {\n    Auth = new [] { new AuthFormatProperty {\n        AuthScheme = \"authScheme\",\n        Description = \"description\",\n        IamAuth = \"iamAuth\",\n        SecretArn = \"secretArn\",\n        UserName = \"userName\"\n    } },\n    DbProxyName = \"dbProxyName\",\n    EngineFamily = \"engineFamily\",\n    RoleArn = \"roleArn\",\n    VpcSubnetIds = new [] { \"vpcSubnetIds\" },\n\n    // the properties below are optional\n    DebugLogging = false,\n    IdleClientTimeout = 123,\n    RequireTls = false,\n    Tags = new [] { new TagFormatProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBProxyProps cfnDBProxyProps = CfnDBProxyProps.builder()\n        .auth(List.of(AuthFormatProperty.builder()\n                .authScheme(\"authScheme\")\n                .description(\"description\")\n                .iamAuth(\"iamAuth\")\n                .secretArn(\"secretArn\")\n                .userName(\"userName\")\n                .build()))\n        .dbProxyName(\"dbProxyName\")\n        .engineFamily(\"engineFamily\")\n        .roleArn(\"roleArn\")\n        .vpcSubnetIds(List.of(\"vpcSubnetIds\"))\n\n        // the properties below are optional\n        .debugLogging(false)\n        .idleClientTimeout(123)\n        .requireTls(false)\n        .tags(List.of(TagFormatProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBProxyProps := &cfnDBProxyProps{\n\tauth: []interface{}{\n\t\t&authFormatProperty{\n\t\t\tauthScheme: jsii.String(\"authScheme\"),\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t\tiamAuth: jsii.String(\"iamAuth\"),\n\t\t\tsecretArn: jsii.String(\"secretArn\"),\n\t\t\tuserName: jsii.String(\"userName\"),\n\t\t},\n\t},\n\tdbProxyName: jsii.String(\"dbProxyName\"),\n\tengineFamily: jsii.String(\"engineFamily\"),\n\troleArn: jsii.String(\"roleArn\"),\n\tvpcSubnetIds: []*string{\n\t\tjsii.String(\"vpcSubnetIds\"),\n\t},\n\n\t// the properties below are optional\n\tdebugLogging: jsii.Boolean(false),\n\tidleClientTimeout: jsii.Number(123),\n\trequireTls: jsii.Boolean(false),\n\ttags: []tagFormatProperty{\n\t\t&tagFormatProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBProxyProps: rds.CfnDBProxyProps = {\n  auth: [{\n    authScheme: 'authScheme',\n    description: 'description',\n    iamAuth: 'iamAuth',\n    secretArn: 'secretArn',\n    userName: 'userName',\n  }],\n  dbProxyName: 'dbProxyName',\n  engineFamily: 'engineFamily',\n  roleArn: 'roleArn',\n  vpcSubnetIds: ['vpcSubnetIds'],\n\n  // the properties below are optional\n  debugLogging: false,\n  idleClientTimeout: 123,\n  requireTls: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBProxyProps: rds.CfnDBProxyProps = {\n  auth: [{\n    authScheme: 'authScheme',\n    description: 'description',\n    iamAuth: 'iamAuth',\n    secretArn: 'secretArn',\n    userName: 'userName',\n  }],\n  dbProxyName: 'dbProxyName',\n  engineFamily: 'engineFamily',\n  roleArn: 'roleArn',\n  vpcSubnetIds: ['vpcSubnetIds'],\n\n  // the properties below are optional\n  debugLogging: false,\n  idleClientTimeout: 123,\n  requireTls: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 21,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "181e2e79daa9e1b434478241bf96c67a7516b4b1cd75cc72ce017e3ae64d494c"
    },
    "3ef2633d0359513a2a7e067175859705726b074301f344b269f12dc6c611d33a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBProxy_target_group = rds.CfnDBProxyTargetGroup(self, \"MyCfnDBProxyTargetGroup\",\n    db_proxy_name=\"dbProxyName\",\n    target_group_name=\"targetGroupName\",\n\n    # the properties below are optional\n    connection_pool_configuration_info=rds.CfnDBProxyTargetGroup.ConnectionPoolConfigurationInfoFormatProperty(\n        connection_borrow_timeout=123,\n        init_query=\"initQuery\",\n        max_connections_percent=123,\n        max_idle_connections_percent=123,\n        session_pinning_filters=[\"sessionPinningFilters\"]\n    ),\n    db_cluster_identifiers=[\"dbClusterIdentifiers\"],\n    db_instance_identifiers=[\"dbInstanceIdentifiers\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBProxyTargetGroup cfnDBProxyTargetGroup = new CfnDBProxyTargetGroup(this, \"MyCfnDBProxyTargetGroup\", new CfnDBProxyTargetGroupProps {\n    DbProxyName = \"dbProxyName\",\n    TargetGroupName = \"targetGroupName\",\n\n    // the properties below are optional\n    ConnectionPoolConfigurationInfo = new ConnectionPoolConfigurationInfoFormatProperty {\n        ConnectionBorrowTimeout = 123,\n        InitQuery = \"initQuery\",\n        MaxConnectionsPercent = 123,\n        MaxIdleConnectionsPercent = 123,\n        SessionPinningFilters = new [] { \"sessionPinningFilters\" }\n    },\n    DbClusterIdentifiers = new [] { \"dbClusterIdentifiers\" },\n    DbInstanceIdentifiers = new [] { \"dbInstanceIdentifiers\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBProxyTargetGroup cfnDBProxyTargetGroup = CfnDBProxyTargetGroup.Builder.create(this, \"MyCfnDBProxyTargetGroup\")\n        .dbProxyName(\"dbProxyName\")\n        .targetGroupName(\"targetGroupName\")\n\n        // the properties below are optional\n        .connectionPoolConfigurationInfo(ConnectionPoolConfigurationInfoFormatProperty.builder()\n                .connectionBorrowTimeout(123)\n                .initQuery(\"initQuery\")\n                .maxConnectionsPercent(123)\n                .maxIdleConnectionsPercent(123)\n                .sessionPinningFilters(List.of(\"sessionPinningFilters\"))\n                .build())\n        .dbClusterIdentifiers(List.of(\"dbClusterIdentifiers\"))\n        .dbInstanceIdentifiers(List.of(\"dbInstanceIdentifiers\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBProxyTargetGroup := rds.NewCfnDBProxyTargetGroup(this, jsii.String(\"MyCfnDBProxyTargetGroup\"), &cfnDBProxyTargetGroupProps{\n\tdbProxyName: jsii.String(\"dbProxyName\"),\n\ttargetGroupName: jsii.String(\"targetGroupName\"),\n\n\t// the properties below are optional\n\tconnectionPoolConfigurationInfo: &connectionPoolConfigurationInfoFormatProperty{\n\t\tconnectionBorrowTimeout: jsii.Number(123),\n\t\tinitQuery: jsii.String(\"initQuery\"),\n\t\tmaxConnectionsPercent: jsii.Number(123),\n\t\tmaxIdleConnectionsPercent: jsii.Number(123),\n\t\tsessionPinningFilters: []*string{\n\t\t\tjsii.String(\"sessionPinningFilters\"),\n\t\t},\n\t},\n\tdbClusterIdentifiers: []*string{\n\t\tjsii.String(\"dbClusterIdentifiers\"),\n\t},\n\tdbInstanceIdentifiers: []*string{\n\t\tjsii.String(\"dbInstanceIdentifiers\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBProxyTargetGroup = new rds.CfnDBProxyTargetGroup(this, 'MyCfnDBProxyTargetGroup', {\n  dbProxyName: 'dbProxyName',\n  targetGroupName: 'targetGroupName',\n\n  // the properties below are optional\n  connectionPoolConfigurationInfo: {\n    connectionBorrowTimeout: 123,\n    initQuery: 'initQuery',\n    maxConnectionsPercent: 123,\n    maxIdleConnectionsPercent: 123,\n    sessionPinningFilters: ['sessionPinningFilters'],\n  },\n  dbClusterIdentifiers: ['dbClusterIdentifiers'],\n  dbInstanceIdentifiers: ['dbInstanceIdentifiers'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxyTargetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxyTargetGroup",
        "@aws-cdk/aws-rds.CfnDBProxyTargetGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBProxyTargetGroup = new rds.CfnDBProxyTargetGroup(this, 'MyCfnDBProxyTargetGroup', {\n  dbProxyName: 'dbProxyName',\n  targetGroupName: 'targetGroupName',\n\n  // the properties below are optional\n  connectionPoolConfigurationInfo: {\n    connectionBorrowTimeout: 123,\n    initQuery: 'initQuery',\n    maxConnectionsPercent: 123,\n    maxIdleConnectionsPercent: 123,\n    sessionPinningFilters: ['sessionPinningFilters'],\n  },\n  dbClusterIdentifiers: ['dbClusterIdentifiers'],\n  dbInstanceIdentifiers: ['dbInstanceIdentifiers'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 8,
        "75": 14,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "e5c623a08ff3ca372527bd9c279e9b793350baff90a446344fdd0a380ff7aa64"
    },
    "cd163ce55b171f9637e04975b3b6f6e81e348e808244d5a0c30a3bd27c33b8b6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nconnection_pool_configuration_info_format_property = rds.CfnDBProxyTargetGroup.ConnectionPoolConfigurationInfoFormatProperty(\n    connection_borrow_timeout=123,\n    init_query=\"initQuery\",\n    max_connections_percent=123,\n    max_idle_connections_percent=123,\n    session_pinning_filters=[\"sessionPinningFilters\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nConnectionPoolConfigurationInfoFormatProperty connectionPoolConfigurationInfoFormatProperty = new ConnectionPoolConfigurationInfoFormatProperty {\n    ConnectionBorrowTimeout = 123,\n    InitQuery = \"initQuery\",\n    MaxConnectionsPercent = 123,\n    MaxIdleConnectionsPercent = 123,\n    SessionPinningFilters = new [] { \"sessionPinningFilters\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nConnectionPoolConfigurationInfoFormatProperty connectionPoolConfigurationInfoFormatProperty = ConnectionPoolConfigurationInfoFormatProperty.builder()\n        .connectionBorrowTimeout(123)\n        .initQuery(\"initQuery\")\n        .maxConnectionsPercent(123)\n        .maxIdleConnectionsPercent(123)\n        .sessionPinningFilters(List.of(\"sessionPinningFilters\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nconnectionPoolConfigurationInfoFormatProperty := &connectionPoolConfigurationInfoFormatProperty{\n\tconnectionBorrowTimeout: jsii.Number(123),\n\tinitQuery: jsii.String(\"initQuery\"),\n\tmaxConnectionsPercent: jsii.Number(123),\n\tmaxIdleConnectionsPercent: jsii.Number(123),\n\tsessionPinningFilters: []*string{\n\t\tjsii.String(\"sessionPinningFilters\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst connectionPoolConfigurationInfoFormatProperty: rds.CfnDBProxyTargetGroup.ConnectionPoolConfigurationInfoFormatProperty = {\n  connectionBorrowTimeout: 123,\n  initQuery: 'initQuery',\n  maxConnectionsPercent: 123,\n  maxIdleConnectionsPercent: 123,\n  sessionPinningFilters: ['sessionPinningFilters'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxyTargetGroup.ConnectionPoolConfigurationInfoFormatProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxyTargetGroup.ConnectionPoolConfigurationInfoFormatProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connectionPoolConfigurationInfoFormatProperty: rds.CfnDBProxyTargetGroup.ConnectionPoolConfigurationInfoFormatProperty = {\n  connectionBorrowTimeout: 123,\n  initQuery: 'initQuery',\n  maxConnectionsPercent: 123,\n  maxIdleConnectionsPercent: 123,\n  sessionPinningFilters: ['sessionPinningFilters'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "31855970d861e4809fbd4b2064f53f209eabcf061ad8150edb4c22d013ea9165"
    },
    "e92b8043c8ae83181c6909e9a1a1cfafcbc9ef61bdfc1de5466730ccb02432dd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBProxy_target_group_props = rds.CfnDBProxyTargetGroupProps(\n    db_proxy_name=\"dbProxyName\",\n    target_group_name=\"targetGroupName\",\n\n    # the properties below are optional\n    connection_pool_configuration_info=rds.CfnDBProxyTargetGroup.ConnectionPoolConfigurationInfoFormatProperty(\n        connection_borrow_timeout=123,\n        init_query=\"initQuery\",\n        max_connections_percent=123,\n        max_idle_connections_percent=123,\n        session_pinning_filters=[\"sessionPinningFilters\"]\n    ),\n    db_cluster_identifiers=[\"dbClusterIdentifiers\"],\n    db_instance_identifiers=[\"dbInstanceIdentifiers\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBProxyTargetGroupProps cfnDBProxyTargetGroupProps = new CfnDBProxyTargetGroupProps {\n    DbProxyName = \"dbProxyName\",\n    TargetGroupName = \"targetGroupName\",\n\n    // the properties below are optional\n    ConnectionPoolConfigurationInfo = new ConnectionPoolConfigurationInfoFormatProperty {\n        ConnectionBorrowTimeout = 123,\n        InitQuery = \"initQuery\",\n        MaxConnectionsPercent = 123,\n        MaxIdleConnectionsPercent = 123,\n        SessionPinningFilters = new [] { \"sessionPinningFilters\" }\n    },\n    DbClusterIdentifiers = new [] { \"dbClusterIdentifiers\" },\n    DbInstanceIdentifiers = new [] { \"dbInstanceIdentifiers\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBProxyTargetGroupProps cfnDBProxyTargetGroupProps = CfnDBProxyTargetGroupProps.builder()\n        .dbProxyName(\"dbProxyName\")\n        .targetGroupName(\"targetGroupName\")\n\n        // the properties below are optional\n        .connectionPoolConfigurationInfo(ConnectionPoolConfigurationInfoFormatProperty.builder()\n                .connectionBorrowTimeout(123)\n                .initQuery(\"initQuery\")\n                .maxConnectionsPercent(123)\n                .maxIdleConnectionsPercent(123)\n                .sessionPinningFilters(List.of(\"sessionPinningFilters\"))\n                .build())\n        .dbClusterIdentifiers(List.of(\"dbClusterIdentifiers\"))\n        .dbInstanceIdentifiers(List.of(\"dbInstanceIdentifiers\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBProxyTargetGroupProps := &cfnDBProxyTargetGroupProps{\n\tdbProxyName: jsii.String(\"dbProxyName\"),\n\ttargetGroupName: jsii.String(\"targetGroupName\"),\n\n\t// the properties below are optional\n\tconnectionPoolConfigurationInfo: &connectionPoolConfigurationInfoFormatProperty{\n\t\tconnectionBorrowTimeout: jsii.Number(123),\n\t\tinitQuery: jsii.String(\"initQuery\"),\n\t\tmaxConnectionsPercent: jsii.Number(123),\n\t\tmaxIdleConnectionsPercent: jsii.Number(123),\n\t\tsessionPinningFilters: []*string{\n\t\t\tjsii.String(\"sessionPinningFilters\"),\n\t\t},\n\t},\n\tdbClusterIdentifiers: []*string{\n\t\tjsii.String(\"dbClusterIdentifiers\"),\n\t},\n\tdbInstanceIdentifiers: []*string{\n\t\tjsii.String(\"dbInstanceIdentifiers\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBProxyTargetGroupProps: rds.CfnDBProxyTargetGroupProps = {\n  dbProxyName: 'dbProxyName',\n  targetGroupName: 'targetGroupName',\n\n  // the properties below are optional\n  connectionPoolConfigurationInfo: {\n    connectionBorrowTimeout: 123,\n    initQuery: 'initQuery',\n    maxConnectionsPercent: 123,\n    maxIdleConnectionsPercent: 123,\n    sessionPinningFilters: ['sessionPinningFilters'],\n  },\n  dbClusterIdentifiers: ['dbClusterIdentifiers'],\n  dbInstanceIdentifiers: ['dbInstanceIdentifiers'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBProxyTargetGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBProxyTargetGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBProxyTargetGroupProps: rds.CfnDBProxyTargetGroupProps = {\n  dbProxyName: 'dbProxyName',\n  targetGroupName: 'targetGroupName',\n\n  // the properties below are optional\n  connectionPoolConfigurationInfo: {\n    connectionBorrowTimeout: 123,\n    initQuery: 'initQuery',\n    maxConnectionsPercent: 123,\n    maxIdleConnectionsPercent: 123,\n    sessionPinningFilters: ['sessionPinningFilters'],\n  },\n  dbClusterIdentifiers: ['dbClusterIdentifiers'],\n  dbInstanceIdentifiers: ['dbInstanceIdentifiers'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "81fe9886a57254f2cacc89e38fa11891d8f3edd8262e6db842cb8dfaba2025c0"
    },
    "698bf73c3ca26abda70d863aa890a48a735f3104936ff093b6047c2bc19007f2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBSecurity_group = rds.CfnDBSecurityGroup(self, \"MyCfnDBSecurityGroup\",\n    db_security_group_ingress=[rds.CfnDBSecurityGroup.IngressProperty(\n        cidrip=\"cidrip\",\n        ec2_security_group_id=\"ec2SecurityGroupId\",\n        ec2_security_group_name=\"ec2SecurityGroupName\",\n        ec2_security_group_owner_id=\"ec2SecurityGroupOwnerId\"\n    )],\n    group_description=\"groupDescription\",\n\n    # the properties below are optional\n    ec2_vpc_id=\"ec2VpcId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBSecurityGroup cfnDBSecurityGroup = new CfnDBSecurityGroup(this, \"MyCfnDBSecurityGroup\", new CfnDBSecurityGroupProps {\n    DbSecurityGroupIngress = new [] { new IngressProperty {\n        Cidrip = \"cidrip\",\n        Ec2SecurityGroupId = \"ec2SecurityGroupId\",\n        Ec2SecurityGroupName = \"ec2SecurityGroupName\",\n        Ec2SecurityGroupOwnerId = \"ec2SecurityGroupOwnerId\"\n    } },\n    GroupDescription = \"groupDescription\",\n\n    // the properties below are optional\n    Ec2VpcId = \"ec2VpcId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBSecurityGroup cfnDBSecurityGroup = CfnDBSecurityGroup.Builder.create(this, \"MyCfnDBSecurityGroup\")\n        .dbSecurityGroupIngress(List.of(IngressProperty.builder()\n                .cidrip(\"cidrip\")\n                .ec2SecurityGroupId(\"ec2SecurityGroupId\")\n                .ec2SecurityGroupName(\"ec2SecurityGroupName\")\n                .ec2SecurityGroupOwnerId(\"ec2SecurityGroupOwnerId\")\n                .build()))\n        .groupDescription(\"groupDescription\")\n\n        // the properties below are optional\n        .ec2VpcId(\"ec2VpcId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBSecurityGroup := rds.NewCfnDBSecurityGroup(this, jsii.String(\"MyCfnDBSecurityGroup\"), &cfnDBSecurityGroupProps{\n\tdbSecurityGroupIngress: []interface{}{\n\t\t&ingressProperty{\n\t\t\tcidrip: jsii.String(\"cidrip\"),\n\t\t\tec2SecurityGroupId: jsii.String(\"ec2SecurityGroupId\"),\n\t\t\tec2SecurityGroupName: jsii.String(\"ec2SecurityGroupName\"),\n\t\t\tec2SecurityGroupOwnerId: jsii.String(\"ec2SecurityGroupOwnerId\"),\n\t\t},\n\t},\n\tgroupDescription: jsii.String(\"groupDescription\"),\n\n\t// the properties below are optional\n\tec2VpcId: jsii.String(\"ec2VpcId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBSecurityGroup = new rds.CfnDBSecurityGroup(this, 'MyCfnDBSecurityGroup', {\n  dbSecurityGroupIngress: [{\n    cidrip: 'cidrip',\n    ec2SecurityGroupId: 'ec2SecurityGroupId',\n    ec2SecurityGroupName: 'ec2SecurityGroupName',\n    ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n  }],\n  groupDescription: 'groupDescription',\n\n  // the properties below are optional\n  ec2VpcId: 'ec2VpcId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBSecurityGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBSecurityGroup",
        "@aws-cdk/aws-rds.CfnDBSecurityGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBSecurityGroup = new rds.CfnDBSecurityGroup(this, 'MyCfnDBSecurityGroup', {\n  dbSecurityGroupIngress: [{\n    cidrip: 'cidrip',\n    ec2SecurityGroupId: 'ec2SecurityGroupId',\n    ec2SecurityGroupName: 'ec2SecurityGroupName',\n    ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n  }],\n  groupDescription: 'groupDescription',\n\n  // the properties below are optional\n  ec2VpcId: 'ec2VpcId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 14,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "f43a8f629d9ae6924e30e1cd049c223c77759f45322bbeaba59d3988ba25dda7"
    },
    "2cdd9704d5ccc7b41af201d14c77fa6463f5121b7001a038cc93d78388eeca53": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ningress_property = rds.CfnDBSecurityGroup.IngressProperty(\n    cidrip=\"cidrip\",\n    ec2_security_group_id=\"ec2SecurityGroupId\",\n    ec2_security_group_name=\"ec2SecurityGroupName\",\n    ec2_security_group_owner_id=\"ec2SecurityGroupOwnerId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nIngressProperty ingressProperty = new IngressProperty {\n    Cidrip = \"cidrip\",\n    Ec2SecurityGroupId = \"ec2SecurityGroupId\",\n    Ec2SecurityGroupName = \"ec2SecurityGroupName\",\n    Ec2SecurityGroupOwnerId = \"ec2SecurityGroupOwnerId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nIngressProperty ingressProperty = IngressProperty.builder()\n        .cidrip(\"cidrip\")\n        .ec2SecurityGroupId(\"ec2SecurityGroupId\")\n        .ec2SecurityGroupName(\"ec2SecurityGroupName\")\n        .ec2SecurityGroupOwnerId(\"ec2SecurityGroupOwnerId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ningressProperty := &ingressProperty{\n\tcidrip: jsii.String(\"cidrip\"),\n\tec2SecurityGroupId: jsii.String(\"ec2SecurityGroupId\"),\n\tec2SecurityGroupName: jsii.String(\"ec2SecurityGroupName\"),\n\tec2SecurityGroupOwnerId: jsii.String(\"ec2SecurityGroupOwnerId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst ingressProperty: rds.CfnDBSecurityGroup.IngressProperty = {\n  cidrip: 'cidrip',\n  ec2SecurityGroupId: 'ec2SecurityGroupId',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBSecurityGroup.IngressProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBSecurityGroup.IngressProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ingressProperty: rds.CfnDBSecurityGroup.IngressProperty = {\n  cidrip: 'cidrip',\n  ec2SecurityGroupId: 'ec2SecurityGroupId',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "284025f2f6d4401494198b5498e7d9f7c7f27a9680a57e9395cd4b3a8ac6832e"
    },
    "eb1b95d7269442ebedf894357981ec7bd016d5c65d84fb2cde80c50c1fd217ff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBSecurity_group_ingress = rds.CfnDBSecurityGroupIngress(self, \"MyCfnDBSecurityGroupIngress\",\n    db_security_group_name=\"dbSecurityGroupName\",\n\n    # the properties below are optional\n    cidrip=\"cidrip\",\n    ec2_security_group_id=\"ec2SecurityGroupId\",\n    ec2_security_group_name=\"ec2SecurityGroupName\",\n    ec2_security_group_owner_id=\"ec2SecurityGroupOwnerId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBSecurityGroupIngress cfnDBSecurityGroupIngress = new CfnDBSecurityGroupIngress(this, \"MyCfnDBSecurityGroupIngress\", new CfnDBSecurityGroupIngressProps {\n    DbSecurityGroupName = \"dbSecurityGroupName\",\n\n    // the properties below are optional\n    Cidrip = \"cidrip\",\n    Ec2SecurityGroupId = \"ec2SecurityGroupId\",\n    Ec2SecurityGroupName = \"ec2SecurityGroupName\",\n    Ec2SecurityGroupOwnerId = \"ec2SecurityGroupOwnerId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBSecurityGroupIngress cfnDBSecurityGroupIngress = CfnDBSecurityGroupIngress.Builder.create(this, \"MyCfnDBSecurityGroupIngress\")\n        .dbSecurityGroupName(\"dbSecurityGroupName\")\n\n        // the properties below are optional\n        .cidrip(\"cidrip\")\n        .ec2SecurityGroupId(\"ec2SecurityGroupId\")\n        .ec2SecurityGroupName(\"ec2SecurityGroupName\")\n        .ec2SecurityGroupOwnerId(\"ec2SecurityGroupOwnerId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBSecurityGroupIngress := rds.NewCfnDBSecurityGroupIngress(this, jsii.String(\"MyCfnDBSecurityGroupIngress\"), &cfnDBSecurityGroupIngressProps{\n\tdbSecurityGroupName: jsii.String(\"dbSecurityGroupName\"),\n\n\t// the properties below are optional\n\tcidrip: jsii.String(\"cidrip\"),\n\tec2SecurityGroupId: jsii.String(\"ec2SecurityGroupId\"),\n\tec2SecurityGroupName: jsii.String(\"ec2SecurityGroupName\"),\n\tec2SecurityGroupOwnerId: jsii.String(\"ec2SecurityGroupOwnerId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBSecurityGroupIngress = new rds.CfnDBSecurityGroupIngress(this, 'MyCfnDBSecurityGroupIngress', {\n  dbSecurityGroupName: 'dbSecurityGroupName',\n\n  // the properties below are optional\n  cidrip: 'cidrip',\n  ec2SecurityGroupId: 'ec2SecurityGroupId',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBSecurityGroupIngress"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBSecurityGroupIngress",
        "@aws-cdk/aws-rds.CfnDBSecurityGroupIngressProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBSecurityGroupIngress = new rds.CfnDBSecurityGroupIngress(this, 'MyCfnDBSecurityGroupIngress', {\n  dbSecurityGroupName: 'dbSecurityGroupName',\n\n  // the properties below are optional\n  cidrip: 'cidrip',\n  ec2SecurityGroupId: 'ec2SecurityGroupId',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7c763841eb82baa2331aac502ef8800233292a35da5d92c47cd6bcc17455ec3e"
    },
    "383f8cf252d675b012637e85773a451be4c81cecff6ab69cea4f7ed40309bf7f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBSecurity_group_ingress_props = rds.CfnDBSecurityGroupIngressProps(\n    db_security_group_name=\"dbSecurityGroupName\",\n\n    # the properties below are optional\n    cidrip=\"cidrip\",\n    ec2_security_group_id=\"ec2SecurityGroupId\",\n    ec2_security_group_name=\"ec2SecurityGroupName\",\n    ec2_security_group_owner_id=\"ec2SecurityGroupOwnerId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBSecurityGroupIngressProps cfnDBSecurityGroupIngressProps = new CfnDBSecurityGroupIngressProps {\n    DbSecurityGroupName = \"dbSecurityGroupName\",\n\n    // the properties below are optional\n    Cidrip = \"cidrip\",\n    Ec2SecurityGroupId = \"ec2SecurityGroupId\",\n    Ec2SecurityGroupName = \"ec2SecurityGroupName\",\n    Ec2SecurityGroupOwnerId = \"ec2SecurityGroupOwnerId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBSecurityGroupIngressProps cfnDBSecurityGroupIngressProps = CfnDBSecurityGroupIngressProps.builder()\n        .dbSecurityGroupName(\"dbSecurityGroupName\")\n\n        // the properties below are optional\n        .cidrip(\"cidrip\")\n        .ec2SecurityGroupId(\"ec2SecurityGroupId\")\n        .ec2SecurityGroupName(\"ec2SecurityGroupName\")\n        .ec2SecurityGroupOwnerId(\"ec2SecurityGroupOwnerId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBSecurityGroupIngressProps := &cfnDBSecurityGroupIngressProps{\n\tdbSecurityGroupName: jsii.String(\"dbSecurityGroupName\"),\n\n\t// the properties below are optional\n\tcidrip: jsii.String(\"cidrip\"),\n\tec2SecurityGroupId: jsii.String(\"ec2SecurityGroupId\"),\n\tec2SecurityGroupName: jsii.String(\"ec2SecurityGroupName\"),\n\tec2SecurityGroupOwnerId: jsii.String(\"ec2SecurityGroupOwnerId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBSecurityGroupIngressProps: rds.CfnDBSecurityGroupIngressProps = {\n  dbSecurityGroupName: 'dbSecurityGroupName',\n\n  // the properties below are optional\n  cidrip: 'cidrip',\n  ec2SecurityGroupId: 'ec2SecurityGroupId',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBSecurityGroupIngressProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBSecurityGroupIngressProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBSecurityGroupIngressProps: rds.CfnDBSecurityGroupIngressProps = {\n  dbSecurityGroupName: 'dbSecurityGroupName',\n\n  // the properties below are optional\n  cidrip: 'cidrip',\n  ec2SecurityGroupId: 'ec2SecurityGroupId',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "5a9ed1e21ef1d8d9e9730ba093841dffbf6aa7eae7d3a19556fa1769f988ff5d"
    },
    "a5cac38a0a5f25fe1633fa2d79490c031944a5a7fa15b6f6157ff49ba3752b54": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBSecurity_group_props = rds.CfnDBSecurityGroupProps(\n    db_security_group_ingress=[rds.CfnDBSecurityGroup.IngressProperty(\n        cidrip=\"cidrip\",\n        ec2_security_group_id=\"ec2SecurityGroupId\",\n        ec2_security_group_name=\"ec2SecurityGroupName\",\n        ec2_security_group_owner_id=\"ec2SecurityGroupOwnerId\"\n    )],\n    group_description=\"groupDescription\",\n\n    # the properties below are optional\n    ec2_vpc_id=\"ec2VpcId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBSecurityGroupProps cfnDBSecurityGroupProps = new CfnDBSecurityGroupProps {\n    DbSecurityGroupIngress = new [] { new IngressProperty {\n        Cidrip = \"cidrip\",\n        Ec2SecurityGroupId = \"ec2SecurityGroupId\",\n        Ec2SecurityGroupName = \"ec2SecurityGroupName\",\n        Ec2SecurityGroupOwnerId = \"ec2SecurityGroupOwnerId\"\n    } },\n    GroupDescription = \"groupDescription\",\n\n    // the properties below are optional\n    Ec2VpcId = \"ec2VpcId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBSecurityGroupProps cfnDBSecurityGroupProps = CfnDBSecurityGroupProps.builder()\n        .dbSecurityGroupIngress(List.of(IngressProperty.builder()\n                .cidrip(\"cidrip\")\n                .ec2SecurityGroupId(\"ec2SecurityGroupId\")\n                .ec2SecurityGroupName(\"ec2SecurityGroupName\")\n                .ec2SecurityGroupOwnerId(\"ec2SecurityGroupOwnerId\")\n                .build()))\n        .groupDescription(\"groupDescription\")\n\n        // the properties below are optional\n        .ec2VpcId(\"ec2VpcId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBSecurityGroupProps := &cfnDBSecurityGroupProps{\n\tdbSecurityGroupIngress: []interface{}{\n\t\t&ingressProperty{\n\t\t\tcidrip: jsii.String(\"cidrip\"),\n\t\t\tec2SecurityGroupId: jsii.String(\"ec2SecurityGroupId\"),\n\t\t\tec2SecurityGroupName: jsii.String(\"ec2SecurityGroupName\"),\n\t\t\tec2SecurityGroupOwnerId: jsii.String(\"ec2SecurityGroupOwnerId\"),\n\t\t},\n\t},\n\tgroupDescription: jsii.String(\"groupDescription\"),\n\n\t// the properties below are optional\n\tec2VpcId: jsii.String(\"ec2VpcId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBSecurityGroupProps: rds.CfnDBSecurityGroupProps = {\n  dbSecurityGroupIngress: [{\n    cidrip: 'cidrip',\n    ec2SecurityGroupId: 'ec2SecurityGroupId',\n    ec2SecurityGroupName: 'ec2SecurityGroupName',\n    ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n  }],\n  groupDescription: 'groupDescription',\n\n  // the properties below are optional\n  ec2VpcId: 'ec2VpcId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBSecurityGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBSecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBSecurityGroupProps: rds.CfnDBSecurityGroupProps = {\n  dbSecurityGroupIngress: [{\n    cidrip: 'cidrip',\n    ec2SecurityGroupId: 'ec2SecurityGroupId',\n    ec2SecurityGroupName: 'ec2SecurityGroupName',\n    ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n  }],\n  groupDescription: 'groupDescription',\n\n  // the properties below are optional\n  ec2VpcId: 'ec2VpcId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "37afce0adab1714f4019d9adb09fd026fbf3f25c297ded7379be5909c6c22a14"
    },
    "38d7eb7eeef1cef2f1980a42a4c95973767fd86a65360f854e1621892fd4f341": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBSubnet_group = rds.CfnDBSubnetGroup(self, \"MyCfnDBSubnetGroup\",\n    db_subnet_group_description=\"dbSubnetGroupDescription\",\n    subnet_ids=[\"subnetIds\"],\n\n    # the properties below are optional\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBSubnetGroup cfnDBSubnetGroup = new CfnDBSubnetGroup(this, \"MyCfnDBSubnetGroup\", new CfnDBSubnetGroupProps {\n    DbSubnetGroupDescription = \"dbSubnetGroupDescription\",\n    SubnetIds = new [] { \"subnetIds\" },\n\n    // the properties below are optional\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBSubnetGroup cfnDBSubnetGroup = CfnDBSubnetGroup.Builder.create(this, \"MyCfnDBSubnetGroup\")\n        .dbSubnetGroupDescription(\"dbSubnetGroupDescription\")\n        .subnetIds(List.of(\"subnetIds\"))\n\n        // the properties below are optional\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBSubnetGroup := rds.NewCfnDBSubnetGroup(this, jsii.String(\"MyCfnDBSubnetGroup\"), &cfnDBSubnetGroupProps{\n\tdbSubnetGroupDescription: jsii.String(\"dbSubnetGroupDescription\"),\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\n\t// the properties below are optional\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBSubnetGroup = new rds.CfnDBSubnetGroup(this, 'MyCfnDBSubnetGroup', {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBSubnetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBSubnetGroup",
        "@aws-cdk/aws-rds.CfnDBSubnetGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBSubnetGroup = new rds.CfnDBSubnetGroup(this, 'MyCfnDBSubnetGroup', {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d1a85498b85ed1549bfdd603cbd1508c9a6a117b6ee9ad3990353b55db8d0cd2"
    },
    "2e5dffd41b285012ebaa60716bdd37121529eacdc620f0cec51572a3b84a72f8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_dBSubnet_group_props = rds.CfnDBSubnetGroupProps(\n    db_subnet_group_description=\"dbSubnetGroupDescription\",\n    subnet_ids=[\"subnetIds\"],\n\n    # the properties below are optional\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnDBSubnetGroupProps cfnDBSubnetGroupProps = new CfnDBSubnetGroupProps {\n    DbSubnetGroupDescription = \"dbSubnetGroupDescription\",\n    SubnetIds = new [] { \"subnetIds\" },\n\n    // the properties below are optional\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnDBSubnetGroupProps cfnDBSubnetGroupProps = CfnDBSubnetGroupProps.builder()\n        .dbSubnetGroupDescription(\"dbSubnetGroupDescription\")\n        .subnetIds(List.of(\"subnetIds\"))\n\n        // the properties below are optional\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnDBSubnetGroupProps := &cfnDBSubnetGroupProps{\n\tdbSubnetGroupDescription: jsii.String(\"dbSubnetGroupDescription\"),\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\n\t// the properties below are optional\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnDBSubnetGroupProps: rds.CfnDBSubnetGroupProps = {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnDBSubnetGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnDBSubnetGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBSubnetGroupProps: rds.CfnDBSubnetGroupProps = {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "cd57cd2366868052285a48de30d38fd55413188d1320e4eb2292397e8c76a57e"
    },
    "a8587a81519531c4dda6ffebb31e25ee55f275c97ec4a95afb074a245d34830d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_event_subscription = rds.CfnEventSubscription(self, \"MyCfnEventSubscription\",\n    sns_topic_arn=\"snsTopicArn\",\n\n    # the properties below are optional\n    enabled=False,\n    event_categories=[\"eventCategories\"],\n    source_ids=[\"sourceIds\"],\n    source_type=\"sourceType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnEventSubscription cfnEventSubscription = new CfnEventSubscription(this, \"MyCfnEventSubscription\", new CfnEventSubscriptionProps {\n    SnsTopicArn = \"snsTopicArn\",\n\n    // the properties below are optional\n    Enabled = false,\n    EventCategories = new [] { \"eventCategories\" },\n    SourceIds = new [] { \"sourceIds\" },\n    SourceType = \"sourceType\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnEventSubscription cfnEventSubscription = CfnEventSubscription.Builder.create(this, \"MyCfnEventSubscription\")\n        .snsTopicArn(\"snsTopicArn\")\n\n        // the properties below are optional\n        .enabled(false)\n        .eventCategories(List.of(\"eventCategories\"))\n        .sourceIds(List.of(\"sourceIds\"))\n        .sourceType(\"sourceType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnEventSubscription := rds.NewCfnEventSubscription(this, jsii.String(\"MyCfnEventSubscription\"), &cfnEventSubscriptionProps{\n\tsnsTopicArn: jsii.String(\"snsTopicArn\"),\n\n\t// the properties below are optional\n\tenabled: jsii.Boolean(false),\n\teventCategories: []*string{\n\t\tjsii.String(\"eventCategories\"),\n\t},\n\tsourceIds: []*string{\n\t\tjsii.String(\"sourceIds\"),\n\t},\n\tsourceType: jsii.String(\"sourceType\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnEventSubscription = new rds.CfnEventSubscription(this, 'MyCfnEventSubscription', {\n  snsTopicArn: 'snsTopicArn',\n\n  // the properties below are optional\n  enabled: false,\n  eventCategories: ['eventCategories'],\n  sourceIds: ['sourceIds'],\n  sourceType: 'sourceType',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnEventSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnEventSubscription",
        "@aws-cdk/aws-rds.CfnEventSubscriptionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventSubscription = new rds.CfnEventSubscription(this, 'MyCfnEventSubscription', {\n  snsTopicArn: 'snsTopicArn',\n\n  // the properties below are optional\n  enabled: false,\n  eventCategories: ['eventCategories'],\n  sourceIds: ['sourceIds'],\n  sourceType: 'sourceType',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "91": 1,
        "104": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6534b8c799559e34e7580272b6a2bb233cc6ddf48e2a5d53ecf87501f1cc5ea7"
    },
    "4106ce7e151590ca16b4c4417a66b0f019fd9bb479b6cac5e11e713c1413a251": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_event_subscription_props = rds.CfnEventSubscriptionProps(\n    sns_topic_arn=\"snsTopicArn\",\n\n    # the properties below are optional\n    enabled=False,\n    event_categories=[\"eventCategories\"],\n    source_ids=[\"sourceIds\"],\n    source_type=\"sourceType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnEventSubscriptionProps cfnEventSubscriptionProps = new CfnEventSubscriptionProps {\n    SnsTopicArn = \"snsTopicArn\",\n\n    // the properties below are optional\n    Enabled = false,\n    EventCategories = new [] { \"eventCategories\" },\n    SourceIds = new [] { \"sourceIds\" },\n    SourceType = \"sourceType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnEventSubscriptionProps cfnEventSubscriptionProps = CfnEventSubscriptionProps.builder()\n        .snsTopicArn(\"snsTopicArn\")\n\n        // the properties below are optional\n        .enabled(false)\n        .eventCategories(List.of(\"eventCategories\"))\n        .sourceIds(List.of(\"sourceIds\"))\n        .sourceType(\"sourceType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnEventSubscriptionProps := &cfnEventSubscriptionProps{\n\tsnsTopicArn: jsii.String(\"snsTopicArn\"),\n\n\t// the properties below are optional\n\tenabled: jsii.Boolean(false),\n\teventCategories: []*string{\n\t\tjsii.String(\"eventCategories\"),\n\t},\n\tsourceIds: []*string{\n\t\tjsii.String(\"sourceIds\"),\n\t},\n\tsourceType: jsii.String(\"sourceType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnEventSubscriptionProps: rds.CfnEventSubscriptionProps = {\n  snsTopicArn: 'snsTopicArn',\n\n  // the properties below are optional\n  enabled: false,\n  eventCategories: ['eventCategories'],\n  sourceIds: ['sourceIds'],\n  sourceType: 'sourceType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnEventSubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnEventSubscriptionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventSubscriptionProps: rds.CfnEventSubscriptionProps = {\n  snsTopicArn: 'snsTopicArn',\n\n  // the properties below are optional\n  enabled: false,\n  eventCategories: ['eventCategories'],\n  sourceIds: ['sourceIds'],\n  sourceType: 'sourceType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "22ddb64a04b5be5f2d6e00b9cef49df57d781f2d3544199143eb4651f02805c2"
    },
    "d87aee9448d616a5d8e44ad91e3d969e8125e041e67ec6bc3b4a6c954c2897f1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_global_cluster = rds.CfnGlobalCluster(self, \"MyCfnGlobalCluster\",\n    deletion_protection=False,\n    engine=\"engine\",\n    engine_version=\"engineVersion\",\n    global_cluster_identifier=\"globalClusterIdentifier\",\n    source_db_cluster_identifier=\"sourceDbClusterIdentifier\",\n    storage_encrypted=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnGlobalCluster cfnGlobalCluster = new CfnGlobalCluster(this, \"MyCfnGlobalCluster\", new CfnGlobalClusterProps {\n    DeletionProtection = false,\n    Engine = \"engine\",\n    EngineVersion = \"engineVersion\",\n    GlobalClusterIdentifier = \"globalClusterIdentifier\",\n    SourceDbClusterIdentifier = \"sourceDbClusterIdentifier\",\n    StorageEncrypted = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnGlobalCluster cfnGlobalCluster = CfnGlobalCluster.Builder.create(this, \"MyCfnGlobalCluster\")\n        .deletionProtection(false)\n        .engine(\"engine\")\n        .engineVersion(\"engineVersion\")\n        .globalClusterIdentifier(\"globalClusterIdentifier\")\n        .sourceDbClusterIdentifier(\"sourceDbClusterIdentifier\")\n        .storageEncrypted(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnGlobalCluster := rds.NewCfnGlobalCluster(this, jsii.String(\"MyCfnGlobalCluster\"), &cfnGlobalClusterProps{\n\tdeletionProtection: jsii.Boolean(false),\n\tengine: jsii.String(\"engine\"),\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tglobalClusterIdentifier: jsii.String(\"globalClusterIdentifier\"),\n\tsourceDbClusterIdentifier: jsii.String(\"sourceDbClusterIdentifier\"),\n\tstorageEncrypted: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnGlobalCluster = new rds.CfnGlobalCluster(this, 'MyCfnGlobalCluster', /* all optional props */ {\n  deletionProtection: false,\n  engine: 'engine',\n  engineVersion: 'engineVersion',\n  globalClusterIdentifier: 'globalClusterIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnGlobalCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnGlobalCluster",
        "@aws-cdk/aws-rds.CfnGlobalClusterProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGlobalCluster = new rds.CfnGlobalCluster(this, 'MyCfnGlobalCluster', /* all optional props */ {\n  deletionProtection: false,\n  engine: 'engine',\n  engineVersion: 'engineVersion',\n  globalClusterIdentifier: 'globalClusterIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "91": 2,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "352231f3e1807dfb43f03b5aed984bc40aeb8626484576d149d28093849e01b3"
    },
    "868716906c1cfce08b90e4bf516201ffbfcd9cd9e466b3d420295039a9dcb8d8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_global_cluster_props = rds.CfnGlobalClusterProps(\n    deletion_protection=False,\n    engine=\"engine\",\n    engine_version=\"engineVersion\",\n    global_cluster_identifier=\"globalClusterIdentifier\",\n    source_db_cluster_identifier=\"sourceDbClusterIdentifier\",\n    storage_encrypted=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnGlobalClusterProps cfnGlobalClusterProps = new CfnGlobalClusterProps {\n    DeletionProtection = false,\n    Engine = \"engine\",\n    EngineVersion = \"engineVersion\",\n    GlobalClusterIdentifier = \"globalClusterIdentifier\",\n    SourceDbClusterIdentifier = \"sourceDbClusterIdentifier\",\n    StorageEncrypted = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnGlobalClusterProps cfnGlobalClusterProps = CfnGlobalClusterProps.builder()\n        .deletionProtection(false)\n        .engine(\"engine\")\n        .engineVersion(\"engineVersion\")\n        .globalClusterIdentifier(\"globalClusterIdentifier\")\n        .sourceDbClusterIdentifier(\"sourceDbClusterIdentifier\")\n        .storageEncrypted(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnGlobalClusterProps := &cfnGlobalClusterProps{\n\tdeletionProtection: jsii.Boolean(false),\n\tengine: jsii.String(\"engine\"),\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tglobalClusterIdentifier: jsii.String(\"globalClusterIdentifier\"),\n\tsourceDbClusterIdentifier: jsii.String(\"sourceDbClusterIdentifier\"),\n\tstorageEncrypted: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnGlobalClusterProps: rds.CfnGlobalClusterProps = {\n  deletionProtection: false,\n  engine: 'engine',\n  engineVersion: 'engineVersion',\n  globalClusterIdentifier: 'globalClusterIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnGlobalClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnGlobalClusterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGlobalClusterProps: rds.CfnGlobalClusterProps = {\n  deletionProtection: false,\n  engine: 'engine',\n  engineVersion: 'engineVersion',\n  globalClusterIdentifier: 'globalClusterIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "a4ac96bb595c4a76bc7274b82a79f285f7e76b0e23e584dcf38265463c1fe339"
    },
    "47e6f4383eb89a0e824521fb4a102fa52628f8677aec02616995b7a8c5694c32": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_option_group = rds.CfnOptionGroup(self, \"MyCfnOptionGroup\",\n    engine_name=\"engineName\",\n    major_engine_version=\"majorEngineVersion\",\n    option_configurations=[rds.CfnOptionGroup.OptionConfigurationProperty(\n        option_name=\"optionName\",\n\n        # the properties below are optional\n        db_security_group_memberships=[\"dbSecurityGroupMemberships\"],\n        option_settings=[rds.CfnOptionGroup.OptionSettingProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        option_version=\"optionVersion\",\n        port=123,\n        vpc_security_group_memberships=[\"vpcSecurityGroupMemberships\"]\n    )],\n    option_group_description=\"optionGroupDescription\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnOptionGroup cfnOptionGroup = new CfnOptionGroup(this, \"MyCfnOptionGroup\", new CfnOptionGroupProps {\n    EngineName = \"engineName\",\n    MajorEngineVersion = \"majorEngineVersion\",\n    OptionConfigurations = new [] { new OptionConfigurationProperty {\n        OptionName = \"optionName\",\n\n        // the properties below are optional\n        DbSecurityGroupMemberships = new [] { \"dbSecurityGroupMemberships\" },\n        OptionSettings = new [] { new OptionSettingProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        OptionVersion = \"optionVersion\",\n        Port = 123,\n        VpcSecurityGroupMemberships = new [] { \"vpcSecurityGroupMemberships\" }\n    } },\n    OptionGroupDescription = \"optionGroupDescription\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnOptionGroup cfnOptionGroup = CfnOptionGroup.Builder.create(this, \"MyCfnOptionGroup\")\n        .engineName(\"engineName\")\n        .majorEngineVersion(\"majorEngineVersion\")\n        .optionConfigurations(List.of(OptionConfigurationProperty.builder()\n                .optionName(\"optionName\")\n\n                // the properties below are optional\n                .dbSecurityGroupMemberships(List.of(\"dbSecurityGroupMemberships\"))\n                .optionSettings(List.of(OptionSettingProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .optionVersion(\"optionVersion\")\n                .port(123)\n                .vpcSecurityGroupMemberships(List.of(\"vpcSecurityGroupMemberships\"))\n                .build()))\n        .optionGroupDescription(\"optionGroupDescription\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnOptionGroup := rds.NewCfnOptionGroup(this, jsii.String(\"MyCfnOptionGroup\"), &cfnOptionGroupProps{\n\tengineName: jsii.String(\"engineName\"),\n\tmajorEngineVersion: jsii.String(\"majorEngineVersion\"),\n\toptionConfigurations: []interface{}{\n\t\t&optionConfigurationProperty{\n\t\t\toptionName: jsii.String(\"optionName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdbSecurityGroupMemberships: []*string{\n\t\t\t\tjsii.String(\"dbSecurityGroupMemberships\"),\n\t\t\t},\n\t\t\toptionSettings: []interface{}{\n\t\t\t\t&optionSettingProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\toptionVersion: jsii.String(\"optionVersion\"),\n\t\t\tport: jsii.Number(123),\n\t\t\tvpcSecurityGroupMemberships: []*string{\n\t\t\t\tjsii.String(\"vpcSecurityGroupMemberships\"),\n\t\t\t},\n\t\t},\n\t},\n\toptionGroupDescription: jsii.String(\"optionGroupDescription\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnOptionGroup = new rds.CfnOptionGroup(this, 'MyCfnOptionGroup', {\n  engineName: 'engineName',\n  majorEngineVersion: 'majorEngineVersion',\n  optionConfigurations: [{\n    optionName: 'optionName',\n\n    // the properties below are optional\n    dbSecurityGroupMemberships: ['dbSecurityGroupMemberships'],\n    optionSettings: [{\n      name: 'name',\n      value: 'value',\n    }],\n    optionVersion: 'optionVersion',\n    port: 123,\n    vpcSecurityGroupMemberships: ['vpcSecurityGroupMemberships'],\n  }],\n  optionGroupDescription: 'optionGroupDescription',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnOptionGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnOptionGroup",
        "@aws-cdk/aws-rds.CfnOptionGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnOptionGroup = new rds.CfnOptionGroup(this, 'MyCfnOptionGroup', {\n  engineName: 'engineName',\n  majorEngineVersion: 'majorEngineVersion',\n  optionConfigurations: [{\n    optionName: 'optionName',\n\n    // the properties below are optional\n    dbSecurityGroupMemberships: ['dbSecurityGroupMemberships'],\n    optionSettings: [{\n      name: 'name',\n      value: 'value',\n    }],\n    optionVersion: 'optionVersion',\n    port: 123,\n    vpcSecurityGroupMemberships: ['vpcSecurityGroupMemberships'],\n  }],\n  optionGroupDescription: 'optionGroupDescription',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 19,
        "104": 1,
        "192": 5,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "354943d37b953aa849d744f74084fb86651318d9a137d380b2d6217c111f6ab5"
    },
    "99bbf2b42f6c29ae4f54c3ee21c6351a1e0b9922d0c8995f81f34a53db1d518d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\noption_configuration_property = rds.CfnOptionGroup.OptionConfigurationProperty(\n    option_name=\"optionName\",\n\n    # the properties below are optional\n    db_security_group_memberships=[\"dbSecurityGroupMemberships\"],\n    option_settings=[rds.CfnOptionGroup.OptionSettingProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    option_version=\"optionVersion\",\n    port=123,\n    vpc_security_group_memberships=[\"vpcSecurityGroupMemberships\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nOptionConfigurationProperty optionConfigurationProperty = new OptionConfigurationProperty {\n    OptionName = \"optionName\",\n\n    // the properties below are optional\n    DbSecurityGroupMemberships = new [] { \"dbSecurityGroupMemberships\" },\n    OptionSettings = new [] { new OptionSettingProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    OptionVersion = \"optionVersion\",\n    Port = 123,\n    VpcSecurityGroupMemberships = new [] { \"vpcSecurityGroupMemberships\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nOptionConfigurationProperty optionConfigurationProperty = OptionConfigurationProperty.builder()\n        .optionName(\"optionName\")\n\n        // the properties below are optional\n        .dbSecurityGroupMemberships(List.of(\"dbSecurityGroupMemberships\"))\n        .optionSettings(List.of(OptionSettingProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .optionVersion(\"optionVersion\")\n        .port(123)\n        .vpcSecurityGroupMemberships(List.of(\"vpcSecurityGroupMemberships\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\noptionConfigurationProperty := &optionConfigurationProperty{\n\toptionName: jsii.String(\"optionName\"),\n\n\t// the properties below are optional\n\tdbSecurityGroupMemberships: []*string{\n\t\tjsii.String(\"dbSecurityGroupMemberships\"),\n\t},\n\toptionSettings: []interface{}{\n\t\t&optionSettingProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\toptionVersion: jsii.String(\"optionVersion\"),\n\tport: jsii.Number(123),\n\tvpcSecurityGroupMemberships: []*string{\n\t\tjsii.String(\"vpcSecurityGroupMemberships\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst optionConfigurationProperty: rds.CfnOptionGroup.OptionConfigurationProperty = {\n  optionName: 'optionName',\n\n  // the properties below are optional\n  dbSecurityGroupMemberships: ['dbSecurityGroupMemberships'],\n  optionSettings: [{\n    name: 'name',\n    value: 'value',\n  }],\n  optionVersion: 'optionVersion',\n  port: 123,\n  vpcSecurityGroupMemberships: ['vpcSecurityGroupMemberships'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnOptionGroup.OptionConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnOptionGroup.OptionConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst optionConfigurationProperty: rds.CfnOptionGroup.OptionConfigurationProperty = {\n  optionName: 'optionName',\n\n  // the properties below are optional\n  dbSecurityGroupMemberships: ['dbSecurityGroupMemberships'],\n  optionSettings: [{\n    name: 'name',\n    value: 'value',\n  }],\n  optionVersion: 'optionVersion',\n  port: 123,\n  vpcSecurityGroupMemberships: ['vpcSecurityGroupMemberships'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 13,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "3f505640342c5a8a1e079b10c2f3aded02fe375ecc98e294034c70b2d6c13f34"
    },
    "f6c28e6de0da55094bdc32920eecd37f229ae543446b3eef411c1576da839f9c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\noption_setting_property = rds.CfnOptionGroup.OptionSettingProperty(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nOptionSettingProperty optionSettingProperty = new OptionSettingProperty {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nOptionSettingProperty optionSettingProperty = OptionSettingProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\noptionSettingProperty := &optionSettingProperty{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst optionSettingProperty: rds.CfnOptionGroup.OptionSettingProperty = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnOptionGroup.OptionSettingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnOptionGroup.OptionSettingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst optionSettingProperty: rds.CfnOptionGroup.OptionSettingProperty = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c9b254e07f17e0063163c8da25057dbff3e617bfa4a9e2460fb03398aae314e4"
    },
    "73967c2f450cbe7a34052773645026b82c270f68025e4ecb08d1617a55fa9013": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncfn_option_group_props = rds.CfnOptionGroupProps(\n    engine_name=\"engineName\",\n    major_engine_version=\"majorEngineVersion\",\n    option_configurations=[rds.CfnOptionGroup.OptionConfigurationProperty(\n        option_name=\"optionName\",\n\n        # the properties below are optional\n        db_security_group_memberships=[\"dbSecurityGroupMemberships\"],\n        option_settings=[rds.CfnOptionGroup.OptionSettingProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        option_version=\"optionVersion\",\n        port=123,\n        vpc_security_group_memberships=[\"vpcSecurityGroupMemberships\"]\n    )],\n    option_group_description=\"optionGroupDescription\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nCfnOptionGroupProps cfnOptionGroupProps = new CfnOptionGroupProps {\n    EngineName = \"engineName\",\n    MajorEngineVersion = \"majorEngineVersion\",\n    OptionConfigurations = new [] { new OptionConfigurationProperty {\n        OptionName = \"optionName\",\n\n        // the properties below are optional\n        DbSecurityGroupMemberships = new [] { \"dbSecurityGroupMemberships\" },\n        OptionSettings = new [] { new OptionSettingProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        OptionVersion = \"optionVersion\",\n        Port = 123,\n        VpcSecurityGroupMemberships = new [] { \"vpcSecurityGroupMemberships\" }\n    } },\n    OptionGroupDescription = \"optionGroupDescription\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nCfnOptionGroupProps cfnOptionGroupProps = CfnOptionGroupProps.builder()\n        .engineName(\"engineName\")\n        .majorEngineVersion(\"majorEngineVersion\")\n        .optionConfigurations(List.of(OptionConfigurationProperty.builder()\n                .optionName(\"optionName\")\n\n                // the properties below are optional\n                .dbSecurityGroupMemberships(List.of(\"dbSecurityGroupMemberships\"))\n                .optionSettings(List.of(OptionSettingProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .optionVersion(\"optionVersion\")\n                .port(123)\n                .vpcSecurityGroupMemberships(List.of(\"vpcSecurityGroupMemberships\"))\n                .build()))\n        .optionGroupDescription(\"optionGroupDescription\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ncfnOptionGroupProps := &cfnOptionGroupProps{\n\tengineName: jsii.String(\"engineName\"),\n\tmajorEngineVersion: jsii.String(\"majorEngineVersion\"),\n\toptionConfigurations: []interface{}{\n\t\t&optionConfigurationProperty{\n\t\t\toptionName: jsii.String(\"optionName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdbSecurityGroupMemberships: []*string{\n\t\t\t\tjsii.String(\"dbSecurityGroupMemberships\"),\n\t\t\t},\n\t\t\toptionSettings: []interface{}{\n\t\t\t\t&optionSettingProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\toptionVersion: jsii.String(\"optionVersion\"),\n\t\t\tport: jsii.Number(123),\n\t\t\tvpcSecurityGroupMemberships: []*string{\n\t\t\t\tjsii.String(\"vpcSecurityGroupMemberships\"),\n\t\t\t},\n\t\t},\n\t},\n\toptionGroupDescription: jsii.String(\"optionGroupDescription\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst cfnOptionGroupProps: rds.CfnOptionGroupProps = {\n  engineName: 'engineName',\n  majorEngineVersion: 'majorEngineVersion',\n  optionConfigurations: [{\n    optionName: 'optionName',\n\n    // the properties below are optional\n    dbSecurityGroupMemberships: ['dbSecurityGroupMemberships'],\n    optionSettings: [{\n      name: 'name',\n      value: 'value',\n    }],\n    optionVersion: 'optionVersion',\n    port: 123,\n    vpcSecurityGroupMemberships: ['vpcSecurityGroupMemberships'],\n  }],\n  optionGroupDescription: 'optionGroupDescription',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CfnOptionGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.CfnOptionGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnOptionGroupProps: rds.CfnOptionGroupProps = {\n  engineName: 'engineName',\n  majorEngineVersion: 'majorEngineVersion',\n  optionConfigurations: [{\n    optionName: 'optionName',\n\n    // the properties below are optional\n    dbSecurityGroupMemberships: ['dbSecurityGroupMemberships'],\n    optionSettings: [{\n      name: 'name',\n      value: 'value',\n    }],\n    optionVersion: 'optionVersion',\n    port: 123,\n    vpcSecurityGroupMemberships: ['vpcSecurityGroupMemberships'],\n  }],\n  optionGroupDescription: 'optionGroupDescription',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 19,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "fe5e7f491c977d64c395414f9257b95bcae0d3039ed744e317924b2fa007063c"
    },
    "fba3323f71829c2200980f1f1dcb870a3b524fb316d02a32c2f6cf28b6f6a8ef": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_rds as rds\n\n# parameter_group: rds.ParameterGroup\n# role: iam.Role\n\ncluster_engine_bind_options = rds.ClusterEngineBindOptions(\n    parameter_group=parameter_group,\n    s3_export_role=role,\n    s3_import_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.RDS;\n\nParameterGroup parameterGroup;\nRole role;\n\nClusterEngineBindOptions clusterEngineBindOptions = new ClusterEngineBindOptions {\n    ParameterGroup = parameterGroup,\n    S3ExportRole = role,\n    S3ImportRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.rds.*;\n\nParameterGroup parameterGroup;\nRole role;\n\nClusterEngineBindOptions clusterEngineBindOptions = ClusterEngineBindOptions.builder()\n        .parameterGroup(parameterGroup)\n        .s3ExportRole(role)\n        .s3ImportRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar parameterGroup parameterGroup\nvar role role\nclusterEngineBindOptions := &clusterEngineBindOptions{\n\tparameterGroup: parameterGroup,\n\ts3ExportRole: role,\n\ts3ImportRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const parameterGroup: rds.ParameterGroup;\ndeclare const role: iam.Role;\nconst clusterEngineBindOptions: rds.ClusterEngineBindOptions = {\n  parameterGroup: parameterGroup,\n  s3ExportRole: role,\n  s3ImportRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ClusterEngineBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-rds.ClusterEngineBindOptions",
        "@aws-cdk/aws-rds.IParameterGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const parameterGroup: rds.ParameterGroup;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterEngineBindOptions: rds.ClusterEngineBindOptions = {\n  parameterGroup: parameterGroup,\n  s3ExportRole: role,\n  s3ImportRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "18933c783c69ab570dd32da50c421c7248bde636698918fee712e1addcdc8067"
    },
    "23936b7b1f809d2db6c728e70ce07a81eacc601344bacc66fe8d20b7034496ef": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# parameter_group: rds.ParameterGroup\n\ncluster_engine_config = rds.ClusterEngineConfig(\n    features=rds.ClusterEngineFeatures(\n        s3_export=\"s3Export\",\n        s3_import=\"s3Import\"\n    ),\n    parameter_group=parameter_group,\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nParameterGroup parameterGroup;\n\nClusterEngineConfig clusterEngineConfig = new ClusterEngineConfig {\n    Features = new ClusterEngineFeatures {\n        S3Export = \"s3Export\",\n        S3Import = \"s3Import\"\n    },\n    ParameterGroup = parameterGroup,\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nParameterGroup parameterGroup;\n\nClusterEngineConfig clusterEngineConfig = ClusterEngineConfig.builder()\n        .features(ClusterEngineFeatures.builder()\n                .s3Export(\"s3Export\")\n                .s3Import(\"s3Import\")\n                .build())\n        .parameterGroup(parameterGroup)\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar parameterGroup parameterGroup\nclusterEngineConfig := &clusterEngineConfig{\n\tfeatures: &clusterEngineFeatures{\n\t\ts3Export: jsii.String(\"s3Export\"),\n\t\ts3Import: jsii.String(\"s3Import\"),\n\t},\n\tparameterGroup: parameterGroup,\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const parameterGroup: rds.ParameterGroup;\nconst clusterEngineConfig: rds.ClusterEngineConfig = {\n  features: {\n    s3Export: 's3Export',\n    s3Import: 's3Import',\n  },\n  parameterGroup: parameterGroup,\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ClusterEngineConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ClusterEngineConfig",
        "@aws-cdk/aws-rds.ClusterEngineFeatures",
        "@aws-cdk/aws-rds.IParameterGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const parameterGroup: rds.ParameterGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterEngineConfig: rds.ClusterEngineConfig = {\n  features: {\n    s3Export: 's3Export',\n    s3Import: 's3Import',\n  },\n  parameterGroup: parameterGroup,\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e0f079a8ab6f939f835dee97084a87a1da40094f637b3f8b7fbfddf5b1d8fd28"
    },
    "72239742fad34043a231c3b935a40e6e103310f978d0ff8079e32b0d7b683766": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ncluster_engine_features = rds.ClusterEngineFeatures(\n    s3_export=\"s3Export\",\n    s3_import=\"s3Import\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nClusterEngineFeatures clusterEngineFeatures = new ClusterEngineFeatures {\n    S3Export = \"s3Export\",\n    S3Import = \"s3Import\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nClusterEngineFeatures clusterEngineFeatures = ClusterEngineFeatures.builder()\n        .s3Export(\"s3Export\")\n        .s3Import(\"s3Import\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nclusterEngineFeatures := &clusterEngineFeatures{\n\ts3Export: jsii.String(\"s3Export\"),\n\ts3Import: jsii.String(\"s3Import\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst clusterEngineFeatures: rds.ClusterEngineFeatures = {\n  s3Export: 's3Export',\n  s3Import: 's3Import',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ClusterEngineFeatures"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ClusterEngineFeatures"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterEngineFeatures: rds.ClusterEngineFeatures = {\n  s3Export: 's3Export',\n  s3Import: 's3Import',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "73878992f5171775a3c023ce9a303a2d51dfa9a1058039dece0b3ff032d169a4"
    },
    "41466833951305c0f79c5dcbd00c8e355c6bc02d3948e5e30da01464f21da751": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.core as cdk\n\n# interface_vpc_endpoint: ec2.InterfaceVpcEndpoint\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n\ncommon_rotation_user_options = rds.CommonRotationUserOptions(\n    automatically_after=cdk.Duration.minutes(30),\n    endpoint=interface_vpc_endpoint,\n    exclude_characters=\"excludeCharacters\",\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK;\n\nInterfaceVpcEndpoint interfaceVpcEndpoint;\nSubnet subnet;\nSubnetFilter subnetFilter;\nCommonRotationUserOptions commonRotationUserOptions = new CommonRotationUserOptions {\n    AutomaticallyAfter = Duration.Minutes(30),\n    Endpoint = interfaceVpcEndpoint,\n    ExcludeCharacters = \"excludeCharacters\",\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.core.*;\n\nInterfaceVpcEndpoint interfaceVpcEndpoint;\nSubnet subnet;\nSubnetFilter subnetFilter;\n\nCommonRotationUserOptions commonRotationUserOptions = CommonRotationUserOptions.builder()\n        .automaticallyAfter(Duration.minutes(30))\n        .endpoint(interfaceVpcEndpoint)\n        .excludeCharacters(\"excludeCharacters\")\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar interfaceVpcEndpoint interfaceVpcEndpoint\nvar subnet subnet\nvar subnetFilter subnetFilter\ncommonRotationUserOptions := &commonRotationUserOptions{\n\tautomaticallyAfter: cdk.duration.minutes(jsii.Number(30)),\n\tendpoint: interfaceVpcEndpoint,\n\texcludeCharacters: jsii.String(\"excludeCharacters\"),\n\tvpcSubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const interfaceVpcEndpoint: ec2.InterfaceVpcEndpoint;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\nconst commonRotationUserOptions: rds.CommonRotationUserOptions = {\n  automaticallyAfter: cdk.Duration.minutes(30),\n  endpoint: interfaceVpcEndpoint,\n  excludeCharacters: 'excludeCharacters',\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CommonRotationUserOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-rds.CommonRotationUserOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const interfaceVpcEndpoint: ec2.InterfaceVpcEndpoint;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonRotationUserOptions: rds.CommonRotationUserOptions = {\n  automaticallyAfter: cdk.Duration.minutes(30),\n  endpoint: interfaceVpcEndpoint,\n  excludeCharacters: 'excludeCharacters',\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 35,
        "91": 1,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 3,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "4b9923713963a1ac01ae22333cbafb27b370d76372daba196e1568c74a0a03a7"
    },
    "d5e28d50b4f9e63ebe8eac1bf4bb4a8c36cb34ddc71dafce5fffecf01ac7062f": {
      "translations": {
        "python": {
          "source": "# Build a data source for AppSync to access the database.\n# api: appsync.GraphqlApi\n# Create username and password secret for DB Cluster\nsecret = rds.DatabaseSecret(self, \"AuroraSecret\",\n    username=\"clusteradmin\"\n)\n\n# The VPC to place the cluster in\nvpc = ec2.Vpc(self, \"AuroraVpc\")\n\n# Create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.ServerlessCluster(self, \"AuroraCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_dS = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# Set up a resolver for an RDS query.\nrds_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemosRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"SELECT * FROM demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n          \"\"\")\n)\n\n# Set up a resolver for an RDS mutation.\nrds_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemoRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"INSERT INTO demos VALUES (:id, :version)\",\n              \"SELECT * WHERE id = :id\"\n            ],\n            \"variableMap\": {\n              \":id\": $util.toJson($util.autoId()),\n              \":version\": $util.toJson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n          \"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = new DatabaseSecret(this, \"AuroraSecret\", new DatabaseSecretProps {\n    Username = \"clusteradmin\"\n});\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = new ServerlessCluster(this, \"AuroraCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    Credentials = new Dictionary<string, string> { { \"username\", \"clusteradmin\" } },\n    ClusterIdentifier = \"db-endpoint-test\",\n    DefaultDatabaseName = \"demos\"\n});\nRdsDataSource rdsDS = api.AddRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemosRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"SELECT * FROM demos\"\"\n        ]\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n      \")\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemoRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"INSERT INTO demos VALUES (:id, :version)\"\",\n          \"\"SELECT * WHERE id = :id\"\"\n        ],\n        \"\"variableMap\"\": {\n          \"\":id\"\": $util.toJson($util.autoId()),\n          \"\":version\"\": $util.toJson($ctx.args.version)\n        }\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n      \")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = DatabaseSecret.Builder.create(this, \"AuroraSecret\")\n        .username(\"clusteradmin\")\n        .build();\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AuroraCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .credentials(Map.of(\"username\", \"clusteradmin\"))\n        .clusterIdentifier(\"db-endpoint-test\")\n        .defaultDatabaseName(\"demos\")\n        .build();\nRdsDataSource rdsDS = api.addRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemosRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \"))\n        .build());\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemoRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Build a data source for AppSync to access the database.\nvar api graphqlApi// Create username and password secret for DB Cluster\nsecret := rds.NewDatabaseSecret(this, jsii.String(\"AuroraSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"clusteradmin\"),\n})\n\n// The VPC to place the cluster in\nvpc := ec2.NewVpc(this, jsii.String(\"AuroraVpc\"))\n\n// Create the serverless cluster, provide all values needed to customise the database.\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AuroraCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tcredentials: map[string]*string{\n\t\t\"username\": jsii.String(\"clusteradmin\"),\n\t},\n\tclusterIdentifier: jsii.String(\"db-endpoint-test\"),\n\tdefaultDatabaseName: jsii.String(\"demos\"),\n})\nrdsDS := api.addRdsDataSource(jsii.String(\"rds\"), cluster, secret, jsii.String(\"demos\"))\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemosRds\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \")),\n})\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemoRds\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.Credentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addRdsDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync.RdsDataSource",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "14": 4,
        "75": 51,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 16,
        "196": 7,
        "197": 3,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 14,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "08cb37dc59509edae6cc6bb3f6843084398eff8a2e4f4f2db5415e54adc0af1e"
    },
    "cb27022b8adc1af70a5902e48213b29c3c6cee8d9288aab4c0e05bbb580dc949": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nmy_key = kms.Key(self, \"MyKey\")\n\nrds.DatabaseInstance(self, \"InstanceWithCustomizedSecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.ReplicaRegion(region=\"eu-west-1\"), secretsmanager.ReplicaRegion(region=\"eu-west-2\")]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nKey myKey = new Key(this, \"MyKey\");\n\nnew DatabaseInstance(this, \"InstanceWithCustomizedSecret\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\", new CredentialsBaseOptions {\n        SecretName = \"my-cool-name\",\n        EncryptionKey = myKey,\n        ExcludeCharacters = \"!&*^#@()\",\n        ReplicaRegions = new [] { new ReplicaRegion { Region = \"eu-west-1\" }, new ReplicaRegion { Region = \"eu-west-2\" } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nKey myKey = new Key(this, \"MyKey\");\n\nDatabaseInstance.Builder.create(this, \"InstanceWithCustomizedSecret\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\", CredentialsBaseOptions.builder()\n                .secretName(\"my-cool-name\")\n                .encryptionKey(myKey)\n                .excludeCharacters(\"!&*^#@()\")\n                .replicaRegions(List.of(ReplicaRegion.builder().region(\"eu-west-1\").build(), ReplicaRegion.builder().region(\"eu-west-2\").build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nengine := rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\tversion: rds.postgresEngineVersion_VER_12_3(),\n})\nmyKey := kms.NewKey(this, jsii.String(\"MyKey\"))\n\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithCustomizedSecret\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"postgres\"), &credentialsBaseOptions{\n\t\tsecretName: jsii.String(\"my-cool-name\"),\n\t\tencryptionKey: myKey,\n\t\texcludeCharacters: jsii.String(\"!&*^#@()\"),\n\t\treplicaRegions: []replicaRegion{\n\t\t\t&replicaRegion{\n\t\t\t\tregion: jsii.String(\"eu-west-1\"),\n\t\t\t},\n\t\t\t&replicaRegion{\n\t\t\t\tregion: jsii.String(\"eu-west-2\"),\n\t\t\t},\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CredentialsBaseOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.CredentialsBaseOptions",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "6037a87f60165d789b2feadfbfc4ffdb3f96476023707daf14019a0801d6d79c"
    },
    "18c6c7a94bcb4cb61e28a24df9595707d5167d278d0e2c052c062283b6bb1aac": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.core as cdk\n\n# key: kms.Key\n# secret_value: cdk.SecretValue\n\ncredentials_from_username_options = rds.CredentialsFromUsernameOptions(\n    encryption_key=key,\n    exclude_characters=\"excludeCharacters\",\n    password=secret_value,\n    replica_regions=[ReplicaRegion(\n        region=\"region\",\n\n        # the properties below are optional\n        encryption_key=key\n    )],\n    secret_name=\"secretName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK;\n\nKey key;\nSecretValue secretValue;\nCredentialsFromUsernameOptions credentialsFromUsernameOptions = new CredentialsFromUsernameOptions {\n    EncryptionKey = key,\n    ExcludeCharacters = \"excludeCharacters\",\n    Password = secretValue,\n    ReplicaRegions = new [] { new ReplicaRegion {\n        Region = \"region\",\n\n        // the properties below are optional\n        EncryptionKey = key\n    } },\n    SecretName = \"secretName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.core.*;\n\nKey key;\nSecretValue secretValue;\n\nCredentialsFromUsernameOptions credentialsFromUsernameOptions = CredentialsFromUsernameOptions.builder()\n        .encryptionKey(key)\n        .excludeCharacters(\"excludeCharacters\")\n        .password(secretValue)\n        .replicaRegions(List.of(ReplicaRegion.builder()\n                .region(\"region\")\n\n                // the properties below are optional\n                .encryptionKey(key)\n                .build()))\n        .secretName(\"secretName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import kms \"github.com/aws-samples/dummy/awscdkawskms\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar key key\nvar secretValue secretValue\ncredentialsFromUsernameOptions := &credentialsFromUsernameOptions{\n\tencryptionKey: key,\n\texcludeCharacters: jsii.String(\"excludeCharacters\"),\n\tpassword: secretValue,\n\treplicaRegions: []replicaRegion{\n\t\t&replicaRegion{\n\t\t\tregion: jsii.String(\"region\"),\n\n\t\t\t// the properties below are optional\n\t\t\tencryptionKey: key,\n\t\t},\n\t},\n\tsecretName: jsii.String(\"secretName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const key: kms.Key;\ndeclare const secretValue: cdk.SecretValue;\nconst credentialsFromUsernameOptions: rds.CredentialsFromUsernameOptions = {\n  encryptionKey: key,\n  excludeCharacters: 'excludeCharacters',\n  password: secretValue,\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    encryptionKey: key,\n  }],\n  secretName: 'secretName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CredentialsFromUsernameOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-rds.CredentialsFromUsernameOptions",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const key: kms.Key;\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst credentialsFromUsernameOptions: rds.CredentialsFromUsernameOptions = {\n  encryptionKey: key,\n  excludeCharacters: 'excludeCharacters',\n  password: secretValue,\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    encryptionKey: key,\n  }],\n  secretName: 'secretName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 22,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "68e53be558a47cfde10b9eb9dcdf7c3bba4d8fc8a7d5be383cda36117722a94d"
    },
    "fc0653096a36167bba40734055a510533200f50a441361083afdf59d23d2d2a4": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n})\n\nproxy := rds.NewDatabaseProxy(this, jsii.String(\"Proxy\"), &databaseProxyProps{\n\tproxyTarget: rds.proxyTarget.fromCluster(cluster),\n\tsecrets: []iSecret{\n\t\tcluster.secret,\n\t},\n\tvpc: vpc,\n})\n\nrole := iam.NewRole(this, jsii.String(\"DBProxyRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(this.account),\n})\nproxy.grantConnect(role, jsii.String(\"admin\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "dc223bebdc9ce0f212d113a0d0ae55888b3061f8afd79cb561dd33c38e1b4f74"
    },
    "67a4380c2aca60e8a37676332f47eb53ee92cd39fe0538a7fa6533879b37b6d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\n\n# cluster_engine: rds.IClusterEngine\n# security_group: ec2.SecurityGroup\n\ndatabase_cluster_attributes = rds.DatabaseClusterAttributes(\n    cluster_identifier=\"clusterIdentifier\",\n\n    # the properties below are optional\n    cluster_endpoint_address=\"clusterEndpointAddress\",\n    engine=cluster_engine,\n    instance_endpoint_addresses=[\"instanceEndpointAddresses\"],\n    instance_identifiers=[\"instanceIdentifiers\"],\n    port=123,\n    reader_endpoint_address=\"readerEndpointAddress\",\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\n\nIClusterEngine clusterEngine;\nSecurityGroup securityGroup;\n\nDatabaseClusterAttributes databaseClusterAttributes = new DatabaseClusterAttributes {\n    ClusterIdentifier = \"clusterIdentifier\",\n\n    // the properties below are optional\n    ClusterEndpointAddress = \"clusterEndpointAddress\",\n    Engine = clusterEngine,\n    InstanceEndpointAddresses = new [] { \"instanceEndpointAddresses\" },\n    InstanceIdentifiers = new [] { \"instanceIdentifiers\" },\n    Port = 123,\n    ReaderEndpointAddress = \"readerEndpointAddress\",\n    SecurityGroups = new [] { securityGroup }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\n\nIClusterEngine clusterEngine;\nSecurityGroup securityGroup;\n\nDatabaseClusterAttributes databaseClusterAttributes = DatabaseClusterAttributes.builder()\n        .clusterIdentifier(\"clusterIdentifier\")\n\n        // the properties below are optional\n        .clusterEndpointAddress(\"clusterEndpointAddress\")\n        .engine(clusterEngine)\n        .instanceEndpointAddresses(List.of(\"instanceEndpointAddresses\"))\n        .instanceIdentifiers(List.of(\"instanceIdentifiers\"))\n        .port(123)\n        .readerEndpointAddress(\"readerEndpointAddress\")\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar clusterEngine iClusterEngine\nvar securityGroup securityGroup\ndatabaseClusterAttributes := &databaseClusterAttributes{\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\n\t// the properties below are optional\n\tclusterEndpointAddress: jsii.String(\"clusterEndpointAddress\"),\n\tengine: clusterEngine,\n\tinstanceEndpointAddresses: []*string{\n\t\tjsii.String(\"instanceEndpointAddresses\"),\n\t},\n\tinstanceIdentifiers: []*string{\n\t\tjsii.String(\"instanceIdentifiers\"),\n\t},\n\tport: jsii.Number(123),\n\treaderEndpointAddress: jsii.String(\"readerEndpointAddress\"),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const clusterEngine: rds.IClusterEngine;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst databaseClusterAttributes: rds.DatabaseClusterAttributes = {\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  engine: clusterEngine,\n  instanceEndpointAddresses: ['instanceEndpointAddresses'],\n  instanceIdentifiers: ['instanceIdentifiers'],\n  port: 123,\n  readerEndpointAddress: 'readerEndpointAddress',\n  securityGroups: [securityGroup],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseClusterAttributes",
        "@aws-cdk/aws-rds.IClusterEngine"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const clusterEngine: rds.IClusterEngine;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseClusterAttributes: rds.DatabaseClusterAttributes = {\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  engine: clusterEngine,\n  instanceEndpointAddresses: ['instanceEndpointAddresses'],\n  instanceIdentifiers: ['instanceIdentifiers'],\n  port: 123,\n  readerEndpointAddress: 'readerEndpointAddress',\n  securityGroups: [securityGroup],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 21,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "4c8991b42fe228f2a0bff37c7921329f6ee284bbab7a3c23f235f4d41aaf6aab"
    },
    "97c364d678b4e366f5587c75d82360fdf2a85c47f8bdaab5db1fe43c1354b38a": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AnotherCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_POSTGRESQL(),\n\tparameterGroup: rds.parameterGroup.fromParameterGroupName(this, jsii.String(\"ParameterGroup\"), jsii.String(\"default.aurora-postgresql10\")),\n\tvpc: vpc,\n\tscaling: &serverlessScalingOptions{\n\t\tautoPause: duration.minutes(jsii.Number(10)),\n\t\t // default is to pause after 5 minutes of idle time\n\t\tminCapacity: rds.auroraCapacityUnit_ACU_8,\n\t\t // default is 2 Aurora capacity units (ACUs)\n\t\tmaxCapacity: rds.*auroraCapacityUnit_ACU_32,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterEngine"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e27b5de7fb62214ea869e917f1a7a82be663678962564cb15a6b44493727fddf"
    },
    "2a159dfe87ddde61416015e88d74cf83bcc8a59b87c08fbadce6b010381a64eb": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrds.NewDatabaseClusterFromSnapshot(this, jsii.String(\"Database\"), &databaseClusterFromSnapshotProps{\n\tengine: rds.databaseClusterEngine.aurora(&auroraClusterEngineProps{\n\t\tversion: rds.auroraEngineVersion_VER_1_22_2(),\n\t}),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n\tsnapshotIdentifier: jsii.String(\"mySnapshot\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "420018d37c80d8e3dc17c5624d0d265848471ef2afecb838b0220600d19ee37d"
    },
    "f81d49249c235b47d7ff0faf7975a2b649365122ced9de194b62b44c0c2cab74": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrds.NewDatabaseClusterFromSnapshot(this, jsii.String(\"Database\"), &databaseClusterFromSnapshotProps{\n\tengine: rds.databaseClusterEngine.aurora(&auroraClusterEngineProps{\n\t\tversion: rds.auroraEngineVersion_VER_1_22_2(),\n\t}),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n\tsnapshotIdentifier: jsii.String(\"mySnapshot\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "420018d37c80d8e3dc17c5624d0d265848471ef2afecb838b0220600d19ee37d"
    },
    "dae439d13d52fe2a14c91d2e25c03b58fd2f47a4574e32f7b2a06d52bfc61a53": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n})\n\nproxy := rds.NewDatabaseProxy(this, jsii.String(\"Proxy\"), &databaseProxyProps{\n\tproxyTarget: rds.proxyTarget.fromCluster(cluster),\n\tsecrets: []iSecret{\n\t\tcluster.secret,\n\t},\n\tvpc: vpc,\n})\n\nrole := iam.NewRole(this, jsii.String(\"DBProxyRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(this.account),\n})\nproxy.grantConnect(role, jsii.String(\"admin\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "dc223bebdc9ce0f212d113a0d0ae55888b3061f8afd79cb561dd33c38e1b4f74"
    },
    "2412b9df5ead47d238839a3b7bb98c955e1fa6b3c2b8ff4987d05066e089aba9": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nrds.DatabaseInstance(self, \"InstanceWithUsername\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\")\n)\n\nrds.DatabaseInstance(self, \"InstanceWithUsernameAndPassword\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_password(\"postgres\", SecretValue.ssm_secure(\"/dbPassword\", \"1\"))\n)\n\nmy_secret = secretsmanager.Secret.from_secret_name(self, \"DBSecret\", \"myDBLoginInfo\")\nrds.DatabaseInstance(self, \"InstanceWithSecretLogin\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_secret(my_secret)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nnew DatabaseInstance(this, \"InstanceWithUsername\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\")\n});\n\nnew DatabaseInstance(this, \"InstanceWithUsernameAndPassword\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromPassword(\"postgres\", SecretValue.SsmSecure(\"/dbPassword\", \"1\"))\n});\n\nISecret mySecret = Secret.FromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nnew DatabaseInstance(this, \"InstanceWithSecretLogin\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromSecret(mySecret)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nDatabaseInstance.Builder.create(this, \"InstanceWithUsername\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"InstanceWithUsernameAndPassword\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromPassword(\"postgres\", SecretValue.ssmSecure(\"/dbPassword\", \"1\")))\n        .build();\n\nISecret mySecret = Secret.fromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nDatabaseInstance.Builder.create(this, \"InstanceWithSecretLogin\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromSecret(mySecret))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nengine := rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\tversion: rds.postgresEngineVersion_VER_12_3(),\n})\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithUsername\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"postgres\")),\n})\n\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithUsernameAndPassword\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.*credentials.fromPassword(jsii.String(\"postgres\"), secretValue.ssmSecure(jsii.String(\"/dbPassword\"), jsii.String(\"1\"))),\n})\n\nmySecret := secretsmanager.secret.fromSecretName(this, jsii.String(\"DBSecret\"), jsii.String(\"myDBLoginInfo\"))\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithSecretLogin\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.*credentials.fromSecret(mySecret),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.Credentials#fromPassword",
        "@aws-cdk/aws-rds.Credentials#fromSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretName",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#ssmSecure",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 42,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 16,
        "196": 6,
        "197": 3,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "872c4f6627f81fcdd23b465e157df8d044964aed9a5b7b2aab3f1740efbbc370"
    },
    "5c0a2c926ce0ef39bac9cbe618d1db966aae4606b55604db8e38bb37d158227e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\n\n# instance_engine: rds.IInstanceEngine\n# security_group: ec2.SecurityGroup\n\ndatabase_instance_attributes = rds.DatabaseInstanceAttributes(\n    instance_endpoint_address=\"instanceEndpointAddress\",\n    instance_identifier=\"instanceIdentifier\",\n    port=123,\n    security_groups=[security_group],\n\n    # the properties below are optional\n    engine=instance_engine\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\n\nIInstanceEngine instanceEngine;\nSecurityGroup securityGroup;\n\nDatabaseInstanceAttributes databaseInstanceAttributes = new DatabaseInstanceAttributes {\n    InstanceEndpointAddress = \"instanceEndpointAddress\",\n    InstanceIdentifier = \"instanceIdentifier\",\n    Port = 123,\n    SecurityGroups = new [] { securityGroup },\n\n    // the properties below are optional\n    Engine = instanceEngine\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\n\nIInstanceEngine instanceEngine;\nSecurityGroup securityGroup;\n\nDatabaseInstanceAttributes databaseInstanceAttributes = DatabaseInstanceAttributes.builder()\n        .instanceEndpointAddress(\"instanceEndpointAddress\")\n        .instanceIdentifier(\"instanceIdentifier\")\n        .port(123)\n        .securityGroups(List.of(securityGroup))\n\n        // the properties below are optional\n        .engine(instanceEngine)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar instanceEngine iInstanceEngine\nvar securityGroup securityGroup\ndatabaseInstanceAttributes := &databaseInstanceAttributes{\n\tinstanceEndpointAddress: jsii.String(\"instanceEndpointAddress\"),\n\tinstanceIdentifier: jsii.String(\"instanceIdentifier\"),\n\tport: jsii.Number(123),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n\n\t// the properties below are optional\n\tengine: instanceEngine,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const instanceEngine: rds.IInstanceEngine;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst databaseInstanceAttributes: rds.DatabaseInstanceAttributes = {\n  instanceEndpointAddress: 'instanceEndpointAddress',\n  instanceIdentifier: 'instanceIdentifier',\n  port: 123,\n  securityGroups: [securityGroup],\n\n  // the properties below are optional\n  engine: instanceEngine,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstanceAttributes",
        "@aws-cdk/aws-rds.IInstanceEngine"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const instanceEngine: rds.IInstanceEngine;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseInstanceAttributes: rds.DatabaseInstanceAttributes = {\n  instanceEndpointAddress: 'instanceEndpointAddress',\n  instanceIdentifier: 'instanceIdentifier',\n  port: 123,\n  securityGroups: [securityGroup],\n\n  // the properties below are optional\n  engine: instanceEngine,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 18,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "bf6e41e57c7cadff4a50cf9ed67fb3769e464418daa00e17924ace251c0f4a3d"
    },
    "9b10b5028de3ef431313edaa2a549ef3d4ed20080b32e9f538981dfe705c9d35": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\n\n# instance_engine: rds.IInstanceEngine\n# security_group: ec2.SecurityGroup\n\ndatabase_instance_base = rds.DatabaseInstanceBase.from_database_instance_attributes(self, \"MyDatabaseInstanceBase\",\n    instance_endpoint_address=\"instanceEndpointAddress\",\n    instance_identifier=\"instanceIdentifier\",\n    port=123,\n    security_groups=[security_group],\n\n    # the properties below are optional\n    engine=instance_engine\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\n\nIInstanceEngine instanceEngine;\nSecurityGroup securityGroup;\n\nIDatabaseInstance databaseInstanceBase = DatabaseInstanceBase.FromDatabaseInstanceAttributes(this, \"MyDatabaseInstanceBase\", new DatabaseInstanceAttributes {\n    InstanceEndpointAddress = \"instanceEndpointAddress\",\n    InstanceIdentifier = \"instanceIdentifier\",\n    Port = 123,\n    SecurityGroups = new [] { securityGroup },\n\n    // the properties below are optional\n    Engine = instanceEngine\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\n\nIInstanceEngine instanceEngine;\nSecurityGroup securityGroup;\n\nIDatabaseInstance databaseInstanceBase = DatabaseInstanceBase.fromDatabaseInstanceAttributes(this, \"MyDatabaseInstanceBase\", DatabaseInstanceAttributes.builder()\n        .instanceEndpointAddress(\"instanceEndpointAddress\")\n        .instanceIdentifier(\"instanceIdentifier\")\n        .port(123)\n        .securityGroups(List.of(securityGroup))\n\n        // the properties below are optional\n        .engine(instanceEngine)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar instanceEngine iInstanceEngine\nvar securityGroup securityGroup\ndatabaseInstanceBase := rds.databaseInstanceBase.fromDatabaseInstanceAttributes(this, jsii.String(\"MyDatabaseInstanceBase\"), &databaseInstanceAttributes{\n\tinstanceEndpointAddress: jsii.String(\"instanceEndpointAddress\"),\n\tinstanceIdentifier: jsii.String(\"instanceIdentifier\"),\n\tport: jsii.Number(123),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n\n\t// the properties below are optional\n\tengine: instanceEngine,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const instanceEngine: rds.IInstanceEngine;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst databaseInstanceBase = rds.DatabaseInstanceBase.fromDatabaseInstanceAttributes(this, 'MyDatabaseInstanceBase', {\n  instanceEndpointAddress: 'instanceEndpointAddress',\n  instanceIdentifier: 'instanceIdentifier',\n  port: 123,\n  securityGroups: [securityGroup],\n\n  // the properties below are optional\n  engine: instanceEngine,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceBase"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstanceAttributes",
        "@aws-cdk/aws-rds.DatabaseInstanceBase",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#fromDatabaseInstanceAttributes",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const instanceEngine: rds.IInstanceEngine;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseInstanceBase = rds.DatabaseInstanceBase.fromDatabaseInstanceAttributes(this, 'MyDatabaseInstanceBase', {\n  instanceEndpointAddress: 'instanceEndpointAddress',\n  instanceIdentifier: 'instanceIdentifier',\n  port: 123,\n  securityGroups: [securityGroup],\n\n  // the properties below are optional\n  engine: instanceEngine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "0fc9c94df090c04b9ca2911cc3c46ab360418bff566b1f8f83ba033bf85bff01"
    },
    "0fbc87006061fe1aea554a597dbdd1335baec5ecff24cf509b4a25f21cfd5ca8": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# source_instance: rds.DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar sourceInstance databaseInstance\nrds.NewDatabaseInstanceFromSnapshot(this, jsii.String(\"Instance\"), &databaseInstanceFromSnapshotProps{\n\tsnapshotIdentifier: jsii.String(\"my-snapshot\"),\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n})\nrds.NewDatabaseInstanceReadReplica(this, jsii.String(\"ReadReplica\"), &databaseInstanceReadReplicaProps{\n\tsourceDatabaseInstance: sourceInstance,\n\tinstanceType: ec2.*instanceType.of(ec2.*instanceClass_BURSTABLE2, ec2.*instanceSize_LARGE),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceEngine"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "90e24cbe234db51a0fc8cca6bd8fbeb49a5535331c5d6d7d24131d6b6a146094"
    },
    "eefb49f3cf5cf844dc2c8a785ab29064a42ec67917e4826116904e9193cda8b9": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# source_instance: rds.DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar sourceInstance databaseInstance\nrds.NewDatabaseInstanceFromSnapshot(this, jsii.String(\"Instance\"), &databaseInstanceFromSnapshotProps{\n\tsnapshotIdentifier: jsii.String(\"my-snapshot\"),\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n})\nrds.NewDatabaseInstanceReadReplica(this, jsii.String(\"ReadReplica\"), &databaseInstanceReadReplicaProps{\n\tsourceDatabaseInstance: sourceInstance,\n\tinstanceType: ec2.*instanceType.of(ec2.*instanceClass_BURSTABLE2, ec2.*instanceSize_LARGE),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "90e24cbe234db51a0fc8cca6bd8fbeb49a5535331c5d6d7d24131d6b6a146094"
    },
    "0e19e3dbd819a901eeba69ec3034de4a3ae5927fc26a388197207922e8b329fa": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# source_instance: rds.DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar sourceInstance databaseInstance\nrds.NewDatabaseInstanceFromSnapshot(this, jsii.String(\"Instance\"), &databaseInstanceFromSnapshotProps{\n\tsnapshotIdentifier: jsii.String(\"my-snapshot\"),\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n})\nrds.NewDatabaseInstanceReadReplica(this, jsii.String(\"ReadReplica\"), &databaseInstanceReadReplicaProps{\n\tsourceDatabaseInstance: sourceInstance,\n\tinstanceType: ec2.*instanceType.of(ec2.*instanceClass_BURSTABLE2, ec2.*instanceSize_LARGE),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "90e24cbe234db51a0fc8cca6bd8fbeb49a5535331c5d6d7d24131d6b6a146094"
    },
    "ff756e133536309b845d9afb21c916ceb56a90ba2fab9f8eb47d02357a868664": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\n\n# bucket: s3.Bucket\n# key: kms.Key\n# option_group: rds.OptionGroup\n# parameter_group: rds.ParameterGroup\n# role: iam.Role\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# subnet_group: rds.SubnetGroup\n# vpc: ec2.Vpc\n\ndatabase_instance_new_props = rds.DatabaseInstanceNewProps(\n    vpc=vpc,\n\n    # the properties below are optional\n    auto_minor_version_upgrade=False,\n    availability_zone=\"availabilityZone\",\n    backup_retention=cdk.Duration.minutes(30),\n    cloudwatch_logs_exports=[\"cloudwatchLogsExports\"],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_DAY,\n    cloudwatch_logs_retention_role=role,\n    copy_tags_to_snapshot=False,\n    delete_automated_backups=False,\n    deletion_protection=False,\n    domain=\"domain\",\n    domain_role=role,\n    enable_performance_insights=False,\n    iam_authentication=False,\n    instance_identifier=\"instanceIdentifier\",\n    iops=123,\n    max_allocated_storage=123,\n    monitoring_interval=cdk.Duration.minutes(30),\n    monitoring_role=role,\n    multi_az=False,\n    option_group=option_group,\n    parameter_group=parameter_group,\n    performance_insight_encryption_key=key,\n    performance_insight_retention=rds.PerformanceInsightRetention.DEFAULT,\n    port=123,\n    preferred_backup_window=\"preferredBackupWindow\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    processor_features=rds.ProcessorFeatures(\n        core_count=123,\n        threads_per_core=123\n    ),\n    publicly_accessible=False,\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    s3_export_buckets=[bucket],\n    s3_export_role=role,\n    s3_import_buckets=[bucket],\n    s3_import_role=role,\n    security_groups=[security_group],\n    storage_type=rds.StorageType.STANDARD,\n    subnet_group=subnet_group,\n    vpc_placement=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\n\nBucket bucket;\nKey key;\nOptionGroup optionGroup;\nParameterGroup parameterGroup;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nSubnetGroup subnetGroup;\nVpc vpc;\nDatabaseInstanceNewProps databaseInstanceNewProps = new DatabaseInstanceNewProps {\n    Vpc = vpc,\n\n    // the properties below are optional\n    AutoMinorVersionUpgrade = false,\n    AvailabilityZone = \"availabilityZone\",\n    BackupRetention = Duration.Minutes(30),\n    CloudwatchLogsExports = new [] { \"cloudwatchLogsExports\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_DAY,\n    CloudwatchLogsRetentionRole = role,\n    CopyTagsToSnapshot = false,\n    DeleteAutomatedBackups = false,\n    DeletionProtection = false,\n    Domain = \"domain\",\n    DomainRole = role,\n    EnablePerformanceInsights = false,\n    IamAuthentication = false,\n    InstanceIdentifier = \"instanceIdentifier\",\n    Iops = 123,\n    MaxAllocatedStorage = 123,\n    MonitoringInterval = Duration.Minutes(30),\n    MonitoringRole = role,\n    MultiAz = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup,\n    PerformanceInsightEncryptionKey = key,\n    PerformanceInsightRetention = PerformanceInsightRetention.DEFAULT,\n    Port = 123,\n    PreferredBackupWindow = \"preferredBackupWindow\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    ProcessorFeatures = new ProcessorFeatures {\n        CoreCount = 123,\n        ThreadsPerCore = 123\n    },\n    PubliclyAccessible = false,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    S3ExportBuckets = new [] { bucket },\n    S3ExportRole = role,\n    S3ImportBuckets = new [] { bucket },\n    S3ImportRole = role,\n    SecurityGroups = new [] { securityGroup },\n    StorageType = StorageType.STANDARD,\n    SubnetGroup = subnetGroup,\n    VpcPlacement = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\n\nBucket bucket;\nKey key;\nOptionGroup optionGroup;\nParameterGroup parameterGroup;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nSubnetGroup subnetGroup;\nVpc vpc;\n\nDatabaseInstanceNewProps databaseInstanceNewProps = DatabaseInstanceNewProps.builder()\n        .vpc(vpc)\n\n        // the properties below are optional\n        .autoMinorVersionUpgrade(false)\n        .availabilityZone(\"availabilityZone\")\n        .backupRetention(Duration.minutes(30))\n        .cloudwatchLogsExports(List.of(\"cloudwatchLogsExports\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_DAY)\n        .cloudwatchLogsRetentionRole(role)\n        .copyTagsToSnapshot(false)\n        .deleteAutomatedBackups(false)\n        .deletionProtection(false)\n        .domain(\"domain\")\n        .domainRole(role)\n        .enablePerformanceInsights(false)\n        .iamAuthentication(false)\n        .instanceIdentifier(\"instanceIdentifier\")\n        .iops(123)\n        .maxAllocatedStorage(123)\n        .monitoringInterval(Duration.minutes(30))\n        .monitoringRole(role)\n        .multiAz(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .performanceInsightEncryptionKey(key)\n        .performanceInsightRetention(PerformanceInsightRetention.DEFAULT)\n        .port(123)\n        .preferredBackupWindow(\"preferredBackupWindow\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .processorFeatures(ProcessorFeatures.builder()\n                .coreCount(123)\n                .threadsPerCore(123)\n                .build())\n        .publiclyAccessible(false)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .s3ExportBuckets(List.of(bucket))\n        .s3ExportRole(role)\n        .s3ImportBuckets(List.of(bucket))\n        .s3ImportRole(role)\n        .securityGroups(List.of(securityGroup))\n        .storageType(StorageType.STANDARD)\n        .subnetGroup(subnetGroup)\n        .vpcPlacement(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import kms \"github.com/aws-samples/dummy/awscdkawskms\"import logs \"github.com/aws-samples/dummy/awscdkawslogs\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"import s3 \"github.com/aws-samples/dummy/awscdkawss3\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar bucket bucket\nvar key key\nvar optionGroup optionGroup\nvar parameterGroup parameterGroup\nvar role role\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar subnetGroup subnetGroup\nvar vpc vpc\ndatabaseInstanceNewProps := &databaseInstanceNewProps{\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tbackupRetention: cdk.duration.minutes(jsii.Number(30)),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"cloudwatchLogsExports\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_DAY,\n\tcloudwatchLogsRetentionRole: role,\n\tcopyTagsToSnapshot: jsii.Boolean(false),\n\tdeleteAutomatedBackups: jsii.Boolean(false),\n\tdeletionProtection: jsii.Boolean(false),\n\tdomain: jsii.String(\"domain\"),\n\tdomainRole: role,\n\tenablePerformanceInsights: jsii.Boolean(false),\n\tiamAuthentication: jsii.Boolean(false),\n\tinstanceIdentifier: jsii.String(\"instanceIdentifier\"),\n\tiops: jsii.Number(123),\n\tmaxAllocatedStorage: jsii.Number(123),\n\tmonitoringInterval: cdk.*duration.minutes(jsii.Number(30)),\n\tmonitoringRole: role,\n\tmultiAz: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n\tperformanceInsightEncryptionKey: key,\n\tperformanceInsightRetention: rds.performanceInsightRetention_DEFAULT,\n\tport: jsii.Number(123),\n\tpreferredBackupWindow: jsii.String(\"preferredBackupWindow\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\tprocessorFeatures: &processorFeatures{\n\t\tcoreCount: jsii.Number(123),\n\t\tthreadsPerCore: jsii.Number(123),\n\t},\n\tpubliclyAccessible: jsii.Boolean(false),\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n\ts3ExportBuckets: []iBucket{\n\t\tbucket,\n\t},\n\ts3ExportRole: role,\n\ts3ImportBuckets: []*iBucket{\n\t\tbucket,\n\t},\n\ts3ImportRole: role,\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n\tstorageType: rds.storageType_STANDARD,\n\tsubnetGroup: subnetGroup,\n\tvpcPlacement: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n\tvpcSubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []*iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.*subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const bucket: s3.Bucket;\ndeclare const key: kms.Key;\ndeclare const optionGroup: rds.OptionGroup;\ndeclare const parameterGroup: rds.ParameterGroup;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const subnetGroup: rds.SubnetGroup;\ndeclare const vpc: ec2.Vpc;\nconst databaseInstanceNewProps: rds.DatabaseInstanceNewProps = {\n  vpc: vpc,\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  backupRetention: cdk.Duration.minutes(30),\n  cloudwatchLogsExports: ['cloudwatchLogsExports'],\n  cloudwatchLogsRetention: logs.RetentionDays.ONE_DAY,\n  cloudwatchLogsRetentionRole: role,\n  copyTagsToSnapshot: false,\n  deleteAutomatedBackups: false,\n  deletionProtection: false,\n  domain: 'domain',\n  domainRole: role,\n  enablePerformanceInsights: false,\n  iamAuthentication: false,\n  instanceIdentifier: 'instanceIdentifier',\n  iops: 123,\n  maxAllocatedStorage: 123,\n  monitoringInterval: cdk.Duration.minutes(30),\n  monitoringRole: role,\n  multiAz: false,\n  optionGroup: optionGroup,\n  parameterGroup: parameterGroup,\n  performanceInsightEncryptionKey: key,\n  performanceInsightRetention: rds.PerformanceInsightRetention.DEFAULT,\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  processorFeatures: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  publiclyAccessible: false,\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  s3ExportBuckets: [bucket],\n  s3ExportRole: role,\n  s3ImportBuckets: [bucket],\n  s3ImportRole: role,\n  securityGroups: [securityGroup],\n  storageType: rds.StorageType.STANDARD,\n  subnetGroup: subnetGroup,\n  vpcPlacement: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceNewProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_DAY",
        "@aws-cdk/aws-rds.DatabaseInstanceNewProps",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ISubnetGroup",
        "@aws-cdk/aws-rds.PerformanceInsightRetention",
        "@aws-cdk/aws-rds.PerformanceInsightRetention#DEFAULT",
        "@aws-cdk/aws-rds.ProcessorFeatures",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#STANDARD",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const bucket: s3.Bucket;\ndeclare const key: kms.Key;\ndeclare const optionGroup: rds.OptionGroup;\ndeclare const parameterGroup: rds.ParameterGroup;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const subnetGroup: rds.SubnetGroup;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseInstanceNewProps: rds.DatabaseInstanceNewProps = {\n  vpc: vpc,\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  backupRetention: cdk.Duration.minutes(30),\n  cloudwatchLogsExports: ['cloudwatchLogsExports'],\n  cloudwatchLogsRetention: logs.RetentionDays.ONE_DAY,\n  cloudwatchLogsRetentionRole: role,\n  copyTagsToSnapshot: false,\n  deleteAutomatedBackups: false,\n  deletionProtection: false,\n  domain: 'domain',\n  domainRole: role,\n  enablePerformanceInsights: false,\n  iamAuthentication: false,\n  instanceIdentifier: 'instanceIdentifier',\n  iops: 123,\n  maxAllocatedStorage: 123,\n  monitoringInterval: cdk.Duration.minutes(30),\n  monitoringRole: role,\n  multiAz: false,\n  optionGroup: optionGroup,\n  parameterGroup: parameterGroup,\n  performanceInsightEncryptionKey: key,\n  performanceInsightRetention: rds.PerformanceInsightRetention.DEFAULT,\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  processorFeatures: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  publiclyAccessible: false,\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  s3ExportBuckets: [bucket],\n  s3ExportRole: role,\n  s3ImportBuckets: [bucket],\n  s3ImportRole: role,\n  securityGroups: [securityGroup],\n  storageType: rds.StorageType.STANDARD,\n  subnetGroup: subnetGroup,\n  vpcPlacement: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 19,
        "75": 136,
        "91": 10,
        "130": 10,
        "153": 11,
        "169": 11,
        "192": 10,
        "193": 4,
        "194": 16,
        "196": 2,
        "225": 11,
        "242": 11,
        "243": 11,
        "254": 7,
        "255": 7,
        "256": 7,
        "281": 55,
        "290": 1
      },
      "fqnsFingerprint": "1cb0e6554d1c540a3be65e3275267e9603ea12cf6fd91202e7ab6960fc9912ef"
    },
    "4402a8ecc999a8449ca35fbb05212eccc3d9318d49d77df9de2985ab5274e5f6": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nrds.DatabaseInstance(self, \"InstanceWithUsername\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\")\n)\n\nrds.DatabaseInstance(self, \"InstanceWithUsernameAndPassword\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_password(\"postgres\", SecretValue.ssm_secure(\"/dbPassword\", \"1\"))\n)\n\nmy_secret = secretsmanager.Secret.from_secret_name(self, \"DBSecret\", \"myDBLoginInfo\")\nrds.DatabaseInstance(self, \"InstanceWithSecretLogin\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_secret(my_secret)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nnew DatabaseInstance(this, \"InstanceWithUsername\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\")\n});\n\nnew DatabaseInstance(this, \"InstanceWithUsernameAndPassword\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromPassword(\"postgres\", SecretValue.SsmSecure(\"/dbPassword\", \"1\"))\n});\n\nISecret mySecret = Secret.FromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nnew DatabaseInstance(this, \"InstanceWithSecretLogin\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromSecret(mySecret)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nDatabaseInstance.Builder.create(this, \"InstanceWithUsername\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"InstanceWithUsernameAndPassword\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromPassword(\"postgres\", SecretValue.ssmSecure(\"/dbPassword\", \"1\")))\n        .build();\n\nISecret mySecret = Secret.fromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nDatabaseInstance.Builder.create(this, \"InstanceWithSecretLogin\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromSecret(mySecret))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nengine := rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\tversion: rds.postgresEngineVersion_VER_12_3(),\n})\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithUsername\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"postgres\")),\n})\n\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithUsernameAndPassword\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.*credentials.fromPassword(jsii.String(\"postgres\"), secretValue.ssmSecure(jsii.String(\"/dbPassword\"), jsii.String(\"1\"))),\n})\n\nmySecret := secretsmanager.secret.fromSecretName(this, jsii.String(\"DBSecret\"), jsii.String(\"myDBLoginInfo\"))\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithSecretLogin\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.*credentials.fromSecret(mySecret),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.Credentials#fromPassword",
        "@aws-cdk/aws-rds.Credentials#fromSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretName",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#ssmSecure",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 42,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 16,
        "196": 6,
        "197": 3,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "872c4f6627f81fcdd23b465e157df8d044964aed9a5b7b2aab3f1740efbbc370"
    },
    "6206de6b6316a54acdb7f168672f3810ac5b55da6ccf4cbaf36d0a7b250751e0": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# source_instance: rds.DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar sourceInstance databaseInstance\nrds.NewDatabaseInstanceFromSnapshot(this, jsii.String(\"Instance\"), &databaseInstanceFromSnapshotProps{\n\tsnapshotIdentifier: jsii.String(\"my-snapshot\"),\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n})\nrds.NewDatabaseInstanceReadReplica(this, jsii.String(\"ReadReplica\"), &databaseInstanceReadReplicaProps{\n\tsourceDatabaseInstance: sourceInstance,\n\tinstanceType: ec2.*instanceType.of(ec2.*instanceClass_BURSTABLE2, ec2.*instanceSize_LARGE),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceReadReplica"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "90e24cbe234db51a0fc8cca6bd8fbeb49a5535331c5d6d7d24131d6b6a146094"
    },
    "3b53b977245d100f6ec719f2f5c4f2f9eef59e9c0059bddd225e61a4e26a1bb4": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# source_instance: rds.DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar sourceInstance databaseInstance\nrds.NewDatabaseInstanceFromSnapshot(this, jsii.String(\"Instance\"), &databaseInstanceFromSnapshotProps{\n\tsnapshotIdentifier: jsii.String(\"my-snapshot\"),\n\tengine: rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\t\tversion: rds.postgresEngineVersion_VER_12_3(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE2, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n})\nrds.NewDatabaseInstanceReadReplica(this, jsii.String(\"ReadReplica\"), &databaseInstanceReadReplicaProps{\n\tsourceDatabaseInstance: sourceInstance,\n\tinstanceType: ec2.*instanceType.of(ec2.*instanceClass_BURSTABLE2, ec2.*instanceSize_LARGE),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "90e24cbe234db51a0fc8cca6bd8fbeb49a5535331c5d6d7d24131d6b6a146094"
    },
    "dfcc84ce7d3a13ad4f286f43162cf5d489021862e39e14c9b1a56c49e1714206": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\n\n# bucket: s3.Bucket\n# instance_engine: rds.IInstanceEngine\n# instance_type: ec2.InstanceType\n# key: kms.Key\n# option_group: rds.OptionGroup\n# parameter_group: rds.ParameterGroup\n# role: iam.Role\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# subnet_group: rds.SubnetGroup\n# vpc: ec2.Vpc\n\ndatabase_instance_source_props = rds.DatabaseInstanceSourceProps(\n    engine=instance_engine,\n    vpc=vpc,\n\n    # the properties below are optional\n    allocated_storage=123,\n    allow_major_version_upgrade=False,\n    auto_minor_version_upgrade=False,\n    availability_zone=\"availabilityZone\",\n    backup_retention=cdk.Duration.minutes(30),\n    cloudwatch_logs_exports=[\"cloudwatchLogsExports\"],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_DAY,\n    cloudwatch_logs_retention_role=role,\n    copy_tags_to_snapshot=False,\n    database_name=\"databaseName\",\n    delete_automated_backups=False,\n    deletion_protection=False,\n    domain=\"domain\",\n    domain_role=role,\n    enable_performance_insights=False,\n    iam_authentication=False,\n    instance_identifier=\"instanceIdentifier\",\n    instance_type=instance_type,\n    iops=123,\n    license_model=rds.LicenseModel.LICENSE_INCLUDED,\n    max_allocated_storage=123,\n    monitoring_interval=cdk.Duration.minutes(30),\n    monitoring_role=role,\n    multi_az=False,\n    option_group=option_group,\n    parameter_group=parameter_group,\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    performance_insight_encryption_key=key,\n    performance_insight_retention=rds.PerformanceInsightRetention.DEFAULT,\n    port=123,\n    preferred_backup_window=\"preferredBackupWindow\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    processor_features=rds.ProcessorFeatures(\n        core_count=123,\n        threads_per_core=123\n    ),\n    publicly_accessible=False,\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    s3_export_buckets=[bucket],\n    s3_export_role=role,\n    s3_import_buckets=[bucket],\n    s3_import_role=role,\n    security_groups=[security_group],\n    storage_type=rds.StorageType.STANDARD,\n    subnet_group=subnet_group,\n    timezone=\"timezone\",\n    vpc_placement=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\n\nBucket bucket;\nIInstanceEngine instanceEngine;\nInstanceType instanceType;\nKey key;\nOptionGroup optionGroup;\nParameterGroup parameterGroup;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nSubnetGroup subnetGroup;\nVpc vpc;\nDatabaseInstanceSourceProps databaseInstanceSourceProps = new DatabaseInstanceSourceProps {\n    Engine = instanceEngine,\n    Vpc = vpc,\n\n    // the properties below are optional\n    AllocatedStorage = 123,\n    AllowMajorVersionUpgrade = false,\n    AutoMinorVersionUpgrade = false,\n    AvailabilityZone = \"availabilityZone\",\n    BackupRetention = Duration.Minutes(30),\n    CloudwatchLogsExports = new [] { \"cloudwatchLogsExports\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_DAY,\n    CloudwatchLogsRetentionRole = role,\n    CopyTagsToSnapshot = false,\n    DatabaseName = \"databaseName\",\n    DeleteAutomatedBackups = false,\n    DeletionProtection = false,\n    Domain = \"domain\",\n    DomainRole = role,\n    EnablePerformanceInsights = false,\n    IamAuthentication = false,\n    InstanceIdentifier = \"instanceIdentifier\",\n    InstanceType = instanceType,\n    Iops = 123,\n    LicenseModel = LicenseModel.LICENSE_INCLUDED,\n    MaxAllocatedStorage = 123,\n    MonitoringInterval = Duration.Minutes(30),\n    MonitoringRole = role,\n    MultiAz = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup,\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    PerformanceInsightEncryptionKey = key,\n    PerformanceInsightRetention = PerformanceInsightRetention.DEFAULT,\n    Port = 123,\n    PreferredBackupWindow = \"preferredBackupWindow\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    ProcessorFeatures = new ProcessorFeatures {\n        CoreCount = 123,\n        ThreadsPerCore = 123\n    },\n    PubliclyAccessible = false,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    S3ExportBuckets = new [] { bucket },\n    S3ExportRole = role,\n    S3ImportBuckets = new [] { bucket },\n    S3ImportRole = role,\n    SecurityGroups = new [] { securityGroup },\n    StorageType = StorageType.STANDARD,\n    SubnetGroup = subnetGroup,\n    Timezone = \"timezone\",\n    VpcPlacement = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\n\nBucket bucket;\nIInstanceEngine instanceEngine;\nInstanceType instanceType;\nKey key;\nOptionGroup optionGroup;\nParameterGroup parameterGroup;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nSubnetGroup subnetGroup;\nVpc vpc;\n\nDatabaseInstanceSourceProps databaseInstanceSourceProps = DatabaseInstanceSourceProps.builder()\n        .engine(instanceEngine)\n        .vpc(vpc)\n\n        // the properties below are optional\n        .allocatedStorage(123)\n        .allowMajorVersionUpgrade(false)\n        .autoMinorVersionUpgrade(false)\n        .availabilityZone(\"availabilityZone\")\n        .backupRetention(Duration.minutes(30))\n        .cloudwatchLogsExports(List.of(\"cloudwatchLogsExports\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_DAY)\n        .cloudwatchLogsRetentionRole(role)\n        .copyTagsToSnapshot(false)\n        .databaseName(\"databaseName\")\n        .deleteAutomatedBackups(false)\n        .deletionProtection(false)\n        .domain(\"domain\")\n        .domainRole(role)\n        .enablePerformanceInsights(false)\n        .iamAuthentication(false)\n        .instanceIdentifier(\"instanceIdentifier\")\n        .instanceType(instanceType)\n        .iops(123)\n        .licenseModel(LicenseModel.LICENSE_INCLUDED)\n        .maxAllocatedStorage(123)\n        .monitoringInterval(Duration.minutes(30))\n        .monitoringRole(role)\n        .multiAz(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .performanceInsightEncryptionKey(key)\n        .performanceInsightRetention(PerformanceInsightRetention.DEFAULT)\n        .port(123)\n        .preferredBackupWindow(\"preferredBackupWindow\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .processorFeatures(ProcessorFeatures.builder()\n                .coreCount(123)\n                .threadsPerCore(123)\n                .build())\n        .publiclyAccessible(false)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .s3ExportBuckets(List.of(bucket))\n        .s3ExportRole(role)\n        .s3ImportBuckets(List.of(bucket))\n        .s3ImportRole(role)\n        .securityGroups(List.of(securityGroup))\n        .storageType(StorageType.STANDARD)\n        .subnetGroup(subnetGroup)\n        .timezone(\"timezone\")\n        .vpcPlacement(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import kms \"github.com/aws-samples/dummy/awscdkawskms\"import logs \"github.com/aws-samples/dummy/awscdkawslogs\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"import s3 \"github.com/aws-samples/dummy/awscdkawss3\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar bucket bucket\nvar instanceEngine iInstanceEngine\nvar instanceType instanceType\nvar key key\nvar optionGroup optionGroup\nvar parameterGroup parameterGroup\nvar role role\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar subnetGroup subnetGroup\nvar vpc vpc\ndatabaseInstanceSourceProps := &databaseInstanceSourceProps{\n\tengine: instanceEngine,\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tallocatedStorage: jsii.Number(123),\n\tallowMajorVersionUpgrade: jsii.Boolean(false),\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tbackupRetention: cdk.duration.minutes(jsii.Number(30)),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"cloudwatchLogsExports\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_DAY,\n\tcloudwatchLogsRetentionRole: role,\n\tcopyTagsToSnapshot: jsii.Boolean(false),\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdeleteAutomatedBackups: jsii.Boolean(false),\n\tdeletionProtection: jsii.Boolean(false),\n\tdomain: jsii.String(\"domain\"),\n\tdomainRole: role,\n\tenablePerformanceInsights: jsii.Boolean(false),\n\tiamAuthentication: jsii.Boolean(false),\n\tinstanceIdentifier: jsii.String(\"instanceIdentifier\"),\n\tinstanceType: instanceType,\n\tiops: jsii.Number(123),\n\tlicenseModel: rds.licenseModel_LICENSE_INCLUDED,\n\tmaxAllocatedStorage: jsii.Number(123),\n\tmonitoringInterval: cdk.*duration.minutes(jsii.Number(30)),\n\tmonitoringRole: role,\n\tmultiAz: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\tperformanceInsightEncryptionKey: key,\n\tperformanceInsightRetention: rds.performanceInsightRetention_DEFAULT,\n\tport: jsii.Number(123),\n\tpreferredBackupWindow: jsii.String(\"preferredBackupWindow\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\tprocessorFeatures: &processorFeatures{\n\t\tcoreCount: jsii.Number(123),\n\t\tthreadsPerCore: jsii.Number(123),\n\t},\n\tpubliclyAccessible: jsii.Boolean(false),\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n\ts3ExportBuckets: []iBucket{\n\t\tbucket,\n\t},\n\ts3ExportRole: role,\n\ts3ImportBuckets: []*iBucket{\n\t\tbucket,\n\t},\n\ts3ImportRole: role,\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n\tstorageType: rds.storageType_STANDARD,\n\tsubnetGroup: subnetGroup,\n\ttimezone: jsii.String(\"timezone\"),\n\tvpcPlacement: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n\tvpcSubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []*iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.*subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const bucket: s3.Bucket;\ndeclare const instanceEngine: rds.IInstanceEngine;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const key: kms.Key;\ndeclare const optionGroup: rds.OptionGroup;\ndeclare const parameterGroup: rds.ParameterGroup;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const subnetGroup: rds.SubnetGroup;\ndeclare const vpc: ec2.Vpc;\nconst databaseInstanceSourceProps: rds.DatabaseInstanceSourceProps = {\n  engine: instanceEngine,\n  vpc: vpc,\n\n  // the properties below are optional\n  allocatedStorage: 123,\n  allowMajorVersionUpgrade: false,\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  backupRetention: cdk.Duration.minutes(30),\n  cloudwatchLogsExports: ['cloudwatchLogsExports'],\n  cloudwatchLogsRetention: logs.RetentionDays.ONE_DAY,\n  cloudwatchLogsRetentionRole: role,\n  copyTagsToSnapshot: false,\n  databaseName: 'databaseName',\n  deleteAutomatedBackups: false,\n  deletionProtection: false,\n  domain: 'domain',\n  domainRole: role,\n  enablePerformanceInsights: false,\n  iamAuthentication: false,\n  instanceIdentifier: 'instanceIdentifier',\n  instanceType: instanceType,\n  iops: 123,\n  licenseModel: rds.LicenseModel.LICENSE_INCLUDED,\n  maxAllocatedStorage: 123,\n  monitoringInterval: cdk.Duration.minutes(30),\n  monitoringRole: role,\n  multiAz: false,\n  optionGroup: optionGroup,\n  parameterGroup: parameterGroup,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  performanceInsightEncryptionKey: key,\n  performanceInsightRetention: rds.PerformanceInsightRetention.DEFAULT,\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  processorFeatures: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  publiclyAccessible: false,\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  s3ExportBuckets: [bucket],\n  s3ExportRole: role,\n  s3ImportBuckets: [bucket],\n  s3ImportRole: role,\n  securityGroups: [securityGroup],\n  storageType: rds.StorageType.STANDARD,\n  subnetGroup: subnetGroup,\n  timezone: 'timezone',\n  vpcPlacement: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_DAY",
        "@aws-cdk/aws-rds.DatabaseInstanceSourceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ISubnetGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#LICENSE_INCLUDED",
        "@aws-cdk/aws-rds.PerformanceInsightRetention",
        "@aws-cdk/aws-rds.PerformanceInsightRetention#DEFAULT",
        "@aws-cdk/aws-rds.ProcessorFeatures",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#STANDARD",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const bucket: s3.Bucket;\ndeclare const instanceEngine: rds.IInstanceEngine;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const key: kms.Key;\ndeclare const optionGroup: rds.OptionGroup;\ndeclare const parameterGroup: rds.ParameterGroup;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const subnetGroup: rds.SubnetGroup;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseInstanceSourceProps: rds.DatabaseInstanceSourceProps = {\n  engine: instanceEngine,\n  vpc: vpc,\n\n  // the properties below are optional\n  allocatedStorage: 123,\n  allowMajorVersionUpgrade: false,\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  backupRetention: cdk.Duration.minutes(30),\n  cloudwatchLogsExports: ['cloudwatchLogsExports'],\n  cloudwatchLogsRetention: logs.RetentionDays.ONE_DAY,\n  cloudwatchLogsRetentionRole: role,\n  copyTagsToSnapshot: false,\n  databaseName: 'databaseName',\n  deleteAutomatedBackups: false,\n  deletionProtection: false,\n  domain: 'domain',\n  domainRole: role,\n  enablePerformanceInsights: false,\n  iamAuthentication: false,\n  instanceIdentifier: 'instanceIdentifier',\n  instanceType: instanceType,\n  iops: 123,\n  licenseModel: rds.LicenseModel.LICENSE_INCLUDED,\n  maxAllocatedStorage: 123,\n  monitoringInterval: cdk.Duration.minutes(30),\n  monitoringRole: role,\n  multiAz: false,\n  optionGroup: optionGroup,\n  parameterGroup: parameterGroup,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  performanceInsightEncryptionKey: key,\n  performanceInsightRetention: rds.PerformanceInsightRetention.DEFAULT,\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  processorFeatures: {\n    coreCount: 123,\n    threadsPerCore: 123,\n  },\n  publiclyAccessible: false,\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  s3ExportBuckets: [bucket],\n  s3ExportRole: role,\n  s3ImportBuckets: [bucket],\n  s3ImportRole: role,\n  securityGroups: [securityGroup],\n  storageType: rds.StorageType.STANDARD,\n  subnetGroup: subnetGroup,\n  timezone: 'timezone',\n  vpcPlacement: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 22,
        "75": 156,
        "91": 11,
        "130": 12,
        "153": 13,
        "169": 13,
        "192": 10,
        "193": 5,
        "194": 18,
        "196": 2,
        "225": 13,
        "242": 13,
        "243": 13,
        "254": 7,
        "255": 7,
        "256": 7,
        "281": 64,
        "290": 1
      },
      "fqnsFingerprint": "b55ba8fdb3b072e3863f42c1b12f47233050f83de97ffdf4d850b799cb42158f"
    },
    "b926197bac19936989cb0ec509c780aaa556d0fa5cdeff480478bf8d388550ae": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n})\n\nproxy := rds.NewDatabaseProxy(this, jsii.String(\"Proxy\"), &databaseProxyProps{\n\tproxyTarget: rds.proxyTarget.fromCluster(cluster),\n\tsecrets: []iSecret{\n\t\tcluster.secret,\n\t},\n\tvpc: vpc,\n})\n\nrole := iam.NewRole(this, jsii.String(\"DBProxyRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(this.account),\n})\nproxy.grantConnect(role, jsii.String(\"admin\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseProxy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "dc223bebdc9ce0f212d113a0d0ae55888b3061f8afd79cb561dd33c38e1b4f74"
    },
    "46ccea4bbe0ad00857feb6b61f1ba587a571abf95300b8ece796611f7c5546e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\n\n# security_group: ec2.SecurityGroup\n\ndatabase_proxy_attributes = rds.DatabaseProxyAttributes(\n    db_proxy_arn=\"dbProxyArn\",\n    db_proxy_name=\"dbProxyName\",\n    endpoint=\"endpoint\",\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\n\nSecurityGroup securityGroup;\n\nDatabaseProxyAttributes databaseProxyAttributes = new DatabaseProxyAttributes {\n    DbProxyArn = \"dbProxyArn\",\n    DbProxyName = \"dbProxyName\",\n    Endpoint = \"endpoint\",\n    SecurityGroups = new [] { securityGroup }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\n\nSecurityGroup securityGroup;\n\nDatabaseProxyAttributes databaseProxyAttributes = DatabaseProxyAttributes.builder()\n        .dbProxyArn(\"dbProxyArn\")\n        .dbProxyName(\"dbProxyName\")\n        .endpoint(\"endpoint\")\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar securityGroup securityGroup\ndatabaseProxyAttributes := &databaseProxyAttributes{\n\tdbProxyArn: jsii.String(\"dbProxyArn\"),\n\tdbProxyName: jsii.String(\"dbProxyName\"),\n\tendpoint: jsii.String(\"endpoint\"),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst databaseProxyAttributes: rds.DatabaseProxyAttributes = {\n  dbProxyArn: 'dbProxyArn',\n  dbProxyName: 'dbProxyName',\n  endpoint: 'endpoint',\n  securityGroups: [securityGroup],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseProxyAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseProxyAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseProxyAttributes: rds.DatabaseProxyAttributes = {\n  dbProxyArn: 'dbProxyArn',\n  dbProxyName: 'dbProxyName',\n  endpoint: 'endpoint',\n  securityGroups: [securityGroup],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9d14fa336110efdfae6b1d78b803f2090152555d84cbd07ef3ef8c9e5109e872"
    },
    "c1df6258c0db0dfd8fbcfbad8984dca252ac16c56f7f0c0742d336edb400ada2": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# security_group: ec2.SecurityGroup\n# secrets: List[secretsmanager.Secret[]]\n# db_instance: rds.DatabaseInstance\n\n\nproxy = db_instance.add_proxy(\"proxy\",\n    borrow_timeout=Duration.seconds(30),\n    max_connections_percent=50,\n    secrets=secrets,\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\nSecret[] secrets;\nDatabaseInstance dbInstance;\n\n\nDatabaseProxy proxy = dbInstance.AddProxy(\"proxy\", new DatabaseProxyOptions {\n    BorrowTimeout = Duration.Seconds(30),\n    MaxConnectionsPercent = 50,\n    Secrets = secrets,\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\nSecret[] secrets;\nDatabaseInstance dbInstance;\n\n\nDatabaseProxy proxy = dbInstance.addProxy(\"proxy\", DatabaseProxyOptions.builder()\n        .borrowTimeout(Duration.seconds(30))\n        .maxConnectionsPercent(50)\n        .secrets(secrets)\n        .vpc(vpc)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar securityGroup securityGroup\nvar secrets []secret\nvar dbInstance databaseInstance\n\nproxy := dbInstance.addProxy(jsii.String(\"proxy\"), &databaseProxyOptions{\n\tborrowTimeout: duration.seconds(jsii.Number(30)),\n\tmaxConnectionsPercent: jsii.Number(50),\n\tsecrets: secrets,\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const secrets: secretsmanager.Secret[];\ndeclare const dbInstance: rds.DatabaseInstance;\n\nconst proxy = dbInstance.addProxy('proxy', {\n    borrowTimeout: Duration.seconds(30),\n    maxConnectionsPercent: 50,\n    secrets,\n    vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseProxyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#addProxy",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxyOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const secrets: secretsmanager.Secret[];\ndeclare const dbInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst proxy = dbInstance.addProxy('proxy', {\n    borrowTimeout: Duration.seconds(30),\n    maxConnectionsPercent: 50,\n    secrets,\n    vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 21,
        "130": 4,
        "153": 4,
        "169": 4,
        "174": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "f02332641c9add13f3d0102a8e5db56e4ad2b7d2571b521a1e571850b55583de"
    },
    "c09c3a69a4fe610e55d3e9c48f3260c73ccd97977dc9233c4e7ebeb054e52f9c": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n})\n\nproxy := rds.NewDatabaseProxy(this, jsii.String(\"Proxy\"), &databaseProxyProps{\n\tproxyTarget: rds.proxyTarget.fromCluster(cluster),\n\tsecrets: []iSecret{\n\t\tcluster.secret,\n\t},\n\tvpc: vpc,\n})\n\nrole := iam.NewRole(this, jsii.String(\"DBProxyRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(this.account),\n})\nproxy.grantConnect(role, jsii.String(\"admin\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseProxyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "dc223bebdc9ce0f212d113a0d0ae55888b3061f8afd79cb561dd33c38e1b4f74"
    },
    "dbd5083f92393299692754e017283bd7da434eb3ec029cbaa207a85874c1b019": {
      "translations": {
        "python": {
          "source": "# instance: rds.DatabaseInstance\n\nmy_user_secret = rds.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    secret_name=\"my-user-secret\",  # optional, defaults to a CloudFormation-generated name\n    master_secret=instance.secret,\n    exclude_characters=\"{}[]()'\\\"/\\\\\"\n)\nmy_user_secret_attached = my_user_secret.attach(instance) # Adds DB connections information in the secret\n\ninstance.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    SecretName = \"my-user-secret\",  // optional, defaults to a CloudFormation-generated name\n    MasterSecret = instance.Secret,\n    ExcludeCharacters = \"{}[]()'\\\"/\\\\\"\n});\nISecret myUserSecretAttached = myUserSecret.Attach(instance); // Adds DB connections information in the secret\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .secretName(\"my-user-secret\") // optional, defaults to a CloudFormation-generated name\n        .masterSecret(instance.getSecret())\n        .excludeCharacters(\"{}[]()'\\\"/\\\\\")\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "go": {
          "source": "var instance databaseInstance\nmyUserSecret := rds.NewDatabaseSecret(this, jsii.String(\"MyUserSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"myuser\"),\n\tsecretName: jsii.String(\"my-user-secret\"),\n\t // optional, defaults to a CloudFormation-generated name\n\tmasterSecret: instance.secret,\n\texcludeCharacters: jsii.String(\"{}[]()'\\\"/\\\\\"),\n})\nmyUserSecretAttached := myUserSecret.attach(instance) // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\t // Add rotation using the multi user scheme\n\tsecret: myUserSecretAttached,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseSecret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstance#secret",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "be17f4fa80a87c209a912bfa60a91823b4f7cc8814534f105308fa18d111d3ad"
    },
    "918ce3402efd98e96221c7a42bae2b41a560903bc64b1a4fab9f8c68b6913dca": {
      "translations": {
        "python": {
          "source": "# instance: rds.DatabaseInstance\n\nmy_user_secret = rds.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    secret_name=\"my-user-secret\",  # optional, defaults to a CloudFormation-generated name\n    master_secret=instance.secret,\n    exclude_characters=\"{}[]()'\\\"/\\\\\"\n)\nmy_user_secret_attached = my_user_secret.attach(instance) # Adds DB connections information in the secret\n\ninstance.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    SecretName = \"my-user-secret\",  // optional, defaults to a CloudFormation-generated name\n    MasterSecret = instance.Secret,\n    ExcludeCharacters = \"{}[]()'\\\"/\\\\\"\n});\nISecret myUserSecretAttached = myUserSecret.Attach(instance); // Adds DB connections information in the secret\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .secretName(\"my-user-secret\") // optional, defaults to a CloudFormation-generated name\n        .masterSecret(instance.getSecret())\n        .excludeCharacters(\"{}[]()'\\\"/\\\\\")\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "go": {
          "source": "var instance databaseInstance\nmyUserSecret := rds.NewDatabaseSecret(this, jsii.String(\"MyUserSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"myuser\"),\n\tsecretName: jsii.String(\"my-user-secret\"),\n\t // optional, defaults to a CloudFormation-generated name\n\tmasterSecret: instance.secret,\n\texcludeCharacters: jsii.String(\"{}[]()'\\\"/\\\\\"),\n})\nmyUserSecretAttached := myUserSecret.attach(instance) // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\t // Add rotation using the multi user scheme\n\tsecret: myUserSecretAttached,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseSecretProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstance#secret",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "be17f4fa80a87c209a912bfa60a91823b4f7cc8814534f105308fa18d111d3ad"
    },
    "7583d0a4c99132cf36aeba1f1ffd2ce4b28cadc6960542b7a4c4877d8ad976b9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nendpoint = rds.Endpoint(\"address\", 123)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nEndpoint endpoint = new Endpoint(\"address\", 123);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nEndpoint endpoint = new Endpoint(\"address\", 123);",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nendpoint := rds.NewEndpoint(jsii.String(\"address\"), jsii.Number(123))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst endpoint = new rds.Endpoint('address', 123);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.Endpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.Endpoint"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpoint = new rds.Endpoint('address', 123);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "ec0607883017da73611b3635eb6342627bada5d5eef063ce75dec4d4ecb9fc37"
    },
    "6d8c85e235c8919261f041bd5e8dde0b1c305b274b48bbabf17176284f3edd6f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nengine_version = rds.EngineVersion(\n    major_version=\"majorVersion\",\n\n    # the properties below are optional\n    full_version=\"fullVersion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nEngineVersion engineVersion = new EngineVersion {\n    MajorVersion = \"majorVersion\",\n\n    // the properties below are optional\n    FullVersion = \"fullVersion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nEngineVersion engineVersion = EngineVersion.builder()\n        .majorVersion(\"majorVersion\")\n\n        // the properties below are optional\n        .fullVersion(\"fullVersion\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nengineVersion := &engineVersion{\n\tmajorVersion: jsii.String(\"majorVersion\"),\n\n\t// the properties below are optional\n\tfullVersion: jsii.String(\"fullVersion\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst engineVersion: rds.EngineVersion = {\n  majorVersion: 'majorVersion',\n\n  // the properties below are optional\n  fullVersion: 'fullVersion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.EngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.EngineVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst engineVersion: rds.EngineVersion = {\n  majorVersion: 'majorVersion',\n\n  // the properties below are optional\n  fullVersion: 'fullVersion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d49ce53bb97ae5083974f2f3979e4f2416452ada3d2242c887bf48c0d9f946f4"
    },
    "e0cb2176c6a9d74a65dc382a777c356aa5b3b604bea27630d42b20bfd6668f2e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_rds as rds\n\n# option_group: rds.OptionGroup\n# role: iam.Role\n\ninstance_engine_bind_options = rds.InstanceEngineBindOptions(\n    domain=\"domain\",\n    option_group=option_group,\n    s3_export_role=role,\n    s3_import_role=role,\n    timezone=\"timezone\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.RDS;\n\nOptionGroup optionGroup;\nRole role;\n\nInstanceEngineBindOptions instanceEngineBindOptions = new InstanceEngineBindOptions {\n    Domain = \"domain\",\n    OptionGroup = optionGroup,\n    S3ExportRole = role,\n    S3ImportRole = role,\n    Timezone = \"timezone\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.rds.*;\n\nOptionGroup optionGroup;\nRole role;\n\nInstanceEngineBindOptions instanceEngineBindOptions = InstanceEngineBindOptions.builder()\n        .domain(\"domain\")\n        .optionGroup(optionGroup)\n        .s3ExportRole(role)\n        .s3ImportRole(role)\n        .timezone(\"timezone\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar optionGroup optionGroup\nvar role role\ninstanceEngineBindOptions := &instanceEngineBindOptions{\n\tdomain: jsii.String(\"domain\"),\n\toptionGroup: optionGroup,\n\ts3ExportRole: role,\n\ts3ImportRole: role,\n\ttimezone: jsii.String(\"timezone\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const optionGroup: rds.OptionGroup;\ndeclare const role: iam.Role;\nconst instanceEngineBindOptions: rds.InstanceEngineBindOptions = {\n  domain: 'domain',\n  optionGroup: optionGroup,\n  s3ExportRole: role,\n  s3ImportRole: role,\n  timezone: 'timezone',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.InstanceEngineBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.InstanceEngineBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const optionGroup: rds.OptionGroup;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceEngineBindOptions: rds.InstanceEngineBindOptions = {\n  domain: 'domain',\n  optionGroup: optionGroup,\n  s3ExportRole: role,\n  s3ImportRole: role,\n  timezone: 'timezone',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c1df9f68ab907b0cde6fabe6491054ac44b7771ae53d527608c77134dfe57484"
    },
    "b592d81054d07d5596103a35ce3190d152f9915724b8bf692d24595fcaf8f92e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# option_group: rds.OptionGroup\n\ninstance_engine_config = rds.InstanceEngineConfig(\n    features=rds.InstanceEngineFeatures(\n        s3_export=\"s3Export\",\n        s3_import=\"s3Import\"\n    ),\n    option_group=option_group\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nOptionGroup optionGroup;\n\nInstanceEngineConfig instanceEngineConfig = new InstanceEngineConfig {\n    Features = new InstanceEngineFeatures {\n        S3Export = \"s3Export\",\n        S3Import = \"s3Import\"\n    },\n    OptionGroup = optionGroup\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nOptionGroup optionGroup;\n\nInstanceEngineConfig instanceEngineConfig = InstanceEngineConfig.builder()\n        .features(InstanceEngineFeatures.builder()\n                .s3Export(\"s3Export\")\n                .s3Import(\"s3Import\")\n                .build())\n        .optionGroup(optionGroup)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar optionGroup optionGroup\ninstanceEngineConfig := &instanceEngineConfig{\n\tfeatures: &instanceEngineFeatures{\n\t\ts3Export: jsii.String(\"s3Export\"),\n\t\ts3Import: jsii.String(\"s3Import\"),\n\t},\n\toptionGroup: optionGroup,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const optionGroup: rds.OptionGroup;\nconst instanceEngineConfig: rds.InstanceEngineConfig = {\n  features: {\n    s3Export: 's3Export',\n    s3Import: 's3Import',\n  },\n  optionGroup: optionGroup,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.InstanceEngineConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.InstanceEngineConfig",
        "@aws-cdk/aws-rds.InstanceEngineFeatures"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const optionGroup: rds.OptionGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceEngineConfig: rds.InstanceEngineConfig = {\n  features: {\n    s3Export: 's3Export',\n    s3Import: 's3Import',\n  },\n  optionGroup: optionGroup,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7e04457194324fe150138ad5ca7d7311ae218c59026178974d081b93a96a5015"
    },
    "bc48a4a9aa91a2a5d3593c22a815e26f8e969a5ec86b3935618530096ec388be": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\ninstance_engine_features = rds.InstanceEngineFeatures(\n    s3_export=\"s3Export\",\n    s3_import=\"s3Import\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nInstanceEngineFeatures instanceEngineFeatures = new InstanceEngineFeatures {\n    S3Export = \"s3Export\",\n    S3Import = \"s3Import\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nInstanceEngineFeatures instanceEngineFeatures = InstanceEngineFeatures.builder()\n        .s3Export(\"s3Export\")\n        .s3Import(\"s3Import\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\ninstanceEngineFeatures := &instanceEngineFeatures{\n\ts3Export: jsii.String(\"s3Export\"),\n\ts3Import: jsii.String(\"s3Import\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst instanceEngineFeatures: rds.InstanceEngineFeatures = {\n  s3Export: 's3Export',\n  s3Import: 's3Import',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.InstanceEngineFeatures"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.InstanceEngineFeatures"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceEngineFeatures: rds.InstanceEngineFeatures = {\n  s3Export: 's3Export',\n  s3Import: 's3Import',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0b637a5672a1cae4e2e68bc894654943d244d84da04a7a061e4f024e0de31b22"
    },
    "83e56feeab9fa436d21f6e39f839e28cfcbb136e05ded383772864d52b355148": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n})\n\nproxy := rds.NewDatabaseProxy(this, jsii.String(\"Proxy\"), &databaseProxyProps{\n\tproxyTarget: rds.proxyTarget.fromCluster(cluster),\n\tsecrets: []iSecret{\n\t\tcluster.secret,\n\t},\n\tvpc: vpc,\n})\n\nrole := iam.NewRole(this, jsii.String(\"DBProxyRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(this.account),\n})\nproxy.grantConnect(role, jsii.String(\"admin\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.InstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "dc223bebdc9ce0f212d113a0d0ae55888b3061f8afd79cb561dd33c38e1b4f74"
    },
    "cd52d73791973ca18f3eb1a48587ae57ba773d40c6f2501460b3b1fc404fb0d4": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Set open cursors with parameter group\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"open_cursors\": jsii.String(\"2500\"),\n\t},\n})\n\noptionGroup := rds.NewOptionGroup(this, jsii.String(\"OptionGroup\"), &optionGroupProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tconfigurations: []optionConfiguration{\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"LOCATOR\"),\n\t\t},\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"OEM\"),\n\t\t\tport: jsii.Number(1158),\n\t\t\tvpc: vpc,\n\t\t},\n\t},\n})\n\n// Allow connections to OEM\noptionGroup.optionConnections.oEM.connections.allowDefaultPortFromAnyIpv4()\n\n// Database instance with production values\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tlicenseModel: rds.licenseModel_BRING_YOUR_OWN_LICENSE,\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_MEDIUM),\n\tmultiAz: jsii.Boolean(true),\n\tstorageType: rds.storageType_IO1,\n\tcredentials: rds.credentials.fromUsername(jsii.String(\"syscdk\")),\n\tvpc: vpc,\n\tdatabaseName: jsii.String(\"ORCL\"),\n\tstorageEncrypted: jsii.Boolean(true),\n\tbackupRetention: cdk.duration.days(jsii.Number(7)),\n\tmonitoringInterval: cdk.*duration.seconds(jsii.Number(60)),\n\tenablePerformanceInsights: jsii.Boolean(true),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"trace\"),\n\t\tjsii.String(\"audit\"),\n\t\tjsii.String(\"alert\"),\n\t\tjsii.String(\"listener\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_MONTH,\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n})\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4()\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser()\n\n// Add alarm for high CPU\n// Add alarm for high CPU\ncloudwatch.NewAlarm(this, jsii.String(\"HighCPU\"), &alarmProps{\n\tmetric: instance.metricCPUUtilization(),\n\tthreshold: jsii.Number(90),\n\tevaluationPeriods: jsii.Number(1),\n})\n\n// Trigger Lambda function on instance availability events\nfn := lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = (event) => console.log(event);\")),\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_12_X(),\n})\n\navailabilityRule := instance.onEvent(jsii.String(\"Availability\"), &onEventOptions{\n\ttarget: targets.NewLambdaFunction(fn),\n})\navailabilityRule.addEventPattern(&eventPattern{\n\tdetail: map[string]interface{}{\n\t\t\"EventCategories\": []interface{}{\n\t\t\tjsii.String(\"availability\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.LicenseModel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "ab85152a603a2f1ecc1ee993562e61f4e53ddb760405b917bab8fa23c977308d"
    },
    "b1e7ad893e14c88b8204f6d2410ec996cf25fd6447b1f14513f5b57f675b1e59": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nmaria_db_engine_version = rds.MariaDbEngineVersion.VER_10_0",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nMariaDbEngineVersion mariaDbEngineVersion = MariaDbEngineVersion.VER_10_0;",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nMariaDbEngineVersion mariaDbEngineVersion = MariaDbEngineVersion.VER_10_0;",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nmariaDbEngineVersion := rds.mariaDbEngineVersion_VER_10_0()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst mariaDbEngineVersion = rds.MariaDbEngineVersion.VER_10_0;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.MariaDbEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.MariaDbEngineVersion",
        "@aws-cdk/aws-rds.MariaDbEngineVersion#VER_10_0"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mariaDbEngineVersion = rds.MariaDbEngineVersion.VER_10_0;\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "88e6cc43a1a01425c5149be6c65dd54307307ef27ebcac0861a03c5a620df16e"
    },
    "ce563eb8f9799ecb7f26f1b94013d64afac2e2de684419f6bc059c227909c8e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# maria_db_engine_version: rds.MariaDbEngineVersion\n\nmaria_db_instance_engine_props = rds.MariaDbInstanceEngineProps(\n    version=maria_db_engine_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nMariaDbEngineVersion mariaDbEngineVersion;\n\nMariaDbInstanceEngineProps mariaDbInstanceEngineProps = new MariaDbInstanceEngineProps {\n    Version = mariaDbEngineVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nMariaDbEngineVersion mariaDbEngineVersion;\n\nMariaDbInstanceEngineProps mariaDbInstanceEngineProps = MariaDbInstanceEngineProps.builder()\n        .version(mariaDbEngineVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar mariaDbEngineVersion mariaDbEngineVersion\nmariaDbInstanceEngineProps := &mariaDbInstanceEngineProps{\n\tversion: mariaDbEngineVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const mariaDbEngineVersion: rds.MariaDbEngineVersion;\nconst mariaDbInstanceEngineProps: rds.MariaDbInstanceEngineProps = {\n  version: mariaDbEngineVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.MariaDbInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.MariaDbEngineVersion",
        "@aws-cdk/aws-rds.MariaDbInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const mariaDbEngineVersion: rds.MariaDbEngineVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mariaDbInstanceEngineProps: rds.MariaDbInstanceEngineProps = {\n  version: mariaDbEngineVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c2406fa8dbc5efb280a73d59b01c151e16eb903d2f08d43a99daa6a37454b1b3"
    },
    "61c8d5bada7ae367023a856a468625f50eaf4733e6a69959c65ef31afac389d0": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrole = iam.Role(self, \"RDSDirectoryServicesRole\",\n    assumed_by=iam.ServicePrincipal(\"rds.amazonaws.com\"),\n    managed_policies=[\n        iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AmazonRDSDirectoryServiceAccess\")\n    ]\n)\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    domain=\"d-????????\",  # The ID of the domain for the instance to join.\n    domain_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nRole role = new Role(this, \"RDSDirectoryServicesRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"rds.amazonaws.com\"),\n    ManagedPolicies = new [] { ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\") }\n});\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    Domain = \"d-????????\",  // The ID of the domain for the instance to join.\n    DomainRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nRole role = Role.Builder.create(this, \"RDSDirectoryServicesRole\")\n        .assumedBy(new ServicePrincipal(\"rds.amazonaws.com\"))\n        .managedPolicies(List.of(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\")))\n        .build();\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .domain(\"d-????????\") // The ID of the domain for the instance to join.\n        .domainRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrole := iam.NewRole(this, jsii.String(\"RDSDirectoryServicesRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"rds.amazonaws.com\")),\n\tmanagedPolicies: []iManagedPolicy{\n\t\tiam.managedPolicy.fromAwsManagedPolicyName(jsii.String(\"service-role/AmazonRDSDirectoryServiceAccess\")),\n\t},\n})\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.mysql(&mySqlInstanceEngineProps{\n\t\tversion: rds.mysqlEngineVersion_VER_8_0_19(),\n\t}),\n\tvpc: vpc,\n\tdomain: jsii.String(\"d-????????\"),\n\t // The ID of the domain for the instance to join.\n\tdomainRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.MySqlInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "84d849b9fe74cdf2ed3f91e20569f2c894c56feffaa52c16590b2db2246bb38d"
    },
    "1a319594bbe7c24c7c06d1ab3f733af23881b9ef69c4dde5166b1ec18e122334": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrole = iam.Role(self, \"RDSDirectoryServicesRole\",\n    assumed_by=iam.ServicePrincipal(\"rds.amazonaws.com\"),\n    managed_policies=[\n        iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AmazonRDSDirectoryServiceAccess\")\n    ]\n)\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    domain=\"d-????????\",  # The ID of the domain for the instance to join.\n    domain_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nRole role = new Role(this, \"RDSDirectoryServicesRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"rds.amazonaws.com\"),\n    ManagedPolicies = new [] { ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\") }\n});\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    Domain = \"d-????????\",  // The ID of the domain for the instance to join.\n    DomainRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nRole role = Role.Builder.create(this, \"RDSDirectoryServicesRole\")\n        .assumedBy(new ServicePrincipal(\"rds.amazonaws.com\"))\n        .managedPolicies(List.of(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\")))\n        .build();\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .domain(\"d-????????\") // The ID of the domain for the instance to join.\n        .domainRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrole := iam.NewRole(this, jsii.String(\"RDSDirectoryServicesRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"rds.amazonaws.com\")),\n\tmanagedPolicies: []iManagedPolicy{\n\t\tiam.managedPolicy.fromAwsManagedPolicyName(jsii.String(\"service-role/AmazonRDSDirectoryServiceAccess\")),\n\t},\n})\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.mysql(&mySqlInstanceEngineProps{\n\t\tversion: rds.mysqlEngineVersion_VER_8_0_19(),\n\t}),\n\tvpc: vpc,\n\tdomain: jsii.String(\"d-????????\"),\n\t // The ID of the domain for the instance to join.\n\tdomainRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.MysqlEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "84d849b9fe74cdf2ed3f91e20569f2c894c56feffaa52c16590b2db2246bb38d"
    },
    "5e1fba772d0a5b3eb0ec52b1d3cc419370b5d6852b91de0b7268e48539d3f267": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\n\n# security_group: ec2.SecurityGroup\n# vpc: ec2.Vpc\n\noption_configuration = rds.OptionConfiguration(\n    name=\"name\",\n\n    # the properties below are optional\n    port=123,\n    security_groups=[security_group],\n    settings={\n        \"settings_key\": \"settings\"\n    },\n    version=\"version\",\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\n\nSecurityGroup securityGroup;\nVpc vpc;\n\nOptionConfiguration optionConfiguration = new OptionConfiguration {\n    Name = \"name\",\n\n    // the properties below are optional\n    Port = 123,\n    SecurityGroups = new [] { securityGroup },\n    Settings = new Dictionary<string, string> {\n        { \"settingsKey\", \"settings\" }\n    },\n    Version = \"version\",\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\n\nSecurityGroup securityGroup;\nVpc vpc;\n\nOptionConfiguration optionConfiguration = OptionConfiguration.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .port(123)\n        .securityGroups(List.of(securityGroup))\n        .settings(Map.of(\n                \"settingsKey\", \"settings\"))\n        .version(\"version\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar securityGroup securityGroup\nvar vpc vpc\noptionConfiguration := &optionConfiguration{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tport: jsii.Number(123),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n\tsettings: map[string]*string{\n\t\t\"settingsKey\": jsii.String(\"settings\"),\n\t},\n\tversion: jsii.String(\"version\"),\n\tvpc: vpc,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const vpc: ec2.Vpc;\nconst optionConfiguration: rds.OptionConfiguration = {\n  name: 'name',\n\n  // the properties below are optional\n  port: 123,\n  securityGroups: [securityGroup],\n  settings: {\n    settingsKey: 'settings',\n  },\n  version: 'version',\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OptionConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.OptionConfiguration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst optionConfiguration: rds.OptionConfiguration = {\n  name: 'name',\n\n  // the properties below are optional\n  port: 123,\n  securityGroups: [securityGroup],\n  settings: {\n    settingsKey: 'settings',\n  },\n  version: 'version',\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 20,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "7491fe2cb1fc63f09f6b9c2dd01d45d4e874dc1fc8fd1f1750174001297b85e6"
    },
    "73c6756b4f805ffded46803f5998334c378584852705a06a55742f9bf3e91d63": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Set open cursors with parameter group\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"open_cursors\": jsii.String(\"2500\"),\n\t},\n})\n\noptionGroup := rds.NewOptionGroup(this, jsii.String(\"OptionGroup\"), &optionGroupProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tconfigurations: []optionConfiguration{\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"LOCATOR\"),\n\t\t},\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"OEM\"),\n\t\t\tport: jsii.Number(1158),\n\t\t\tvpc: vpc,\n\t\t},\n\t},\n})\n\n// Allow connections to OEM\noptionGroup.optionConnections.oEM.connections.allowDefaultPortFromAnyIpv4()\n\n// Database instance with production values\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tlicenseModel: rds.licenseModel_BRING_YOUR_OWN_LICENSE,\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_MEDIUM),\n\tmultiAz: jsii.Boolean(true),\n\tstorageType: rds.storageType_IO1,\n\tcredentials: rds.credentials.fromUsername(jsii.String(\"syscdk\")),\n\tvpc: vpc,\n\tdatabaseName: jsii.String(\"ORCL\"),\n\tstorageEncrypted: jsii.Boolean(true),\n\tbackupRetention: cdk.duration.days(jsii.Number(7)),\n\tmonitoringInterval: cdk.*duration.seconds(jsii.Number(60)),\n\tenablePerformanceInsights: jsii.Boolean(true),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"trace\"),\n\t\tjsii.String(\"audit\"),\n\t\tjsii.String(\"alert\"),\n\t\tjsii.String(\"listener\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_MONTH,\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n})\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4()\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser()\n\n// Add alarm for high CPU\n// Add alarm for high CPU\ncloudwatch.NewAlarm(this, jsii.String(\"HighCPU\"), &alarmProps{\n\tmetric: instance.metricCPUUtilization(),\n\tthreshold: jsii.Number(90),\n\tevaluationPeriods: jsii.Number(1),\n})\n\n// Trigger Lambda function on instance availability events\nfn := lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = (event) => console.log(event);\")),\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_12_X(),\n})\n\navailabilityRule := instance.onEvent(jsii.String(\"Availability\"), &onEventOptions{\n\ttarget: targets.NewLambdaFunction(fn),\n})\navailabilityRule.addEventPattern(&eventPattern{\n\tdetail: map[string]interface{}{\n\t\t\"EventCategories\": []interface{}{\n\t\t\tjsii.String(\"availability\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OptionGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "ab85152a603a2f1ecc1ee993562e61f4e53ddb760405b917bab8fa23c977308d"
    },
    "115a96bd4398a535f02d4d7fd17bea0aac1be64da0a34e1f8f657fc49d3b61f5": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Set open cursors with parameter group\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"open_cursors\": jsii.String(\"2500\"),\n\t},\n})\n\noptionGroup := rds.NewOptionGroup(this, jsii.String(\"OptionGroup\"), &optionGroupProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tconfigurations: []optionConfiguration{\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"LOCATOR\"),\n\t\t},\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"OEM\"),\n\t\t\tport: jsii.Number(1158),\n\t\t\tvpc: vpc,\n\t\t},\n\t},\n})\n\n// Allow connections to OEM\noptionGroup.optionConnections.oEM.connections.allowDefaultPortFromAnyIpv4()\n\n// Database instance with production values\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tlicenseModel: rds.licenseModel_BRING_YOUR_OWN_LICENSE,\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_MEDIUM),\n\tmultiAz: jsii.Boolean(true),\n\tstorageType: rds.storageType_IO1,\n\tcredentials: rds.credentials.fromUsername(jsii.String(\"syscdk\")),\n\tvpc: vpc,\n\tdatabaseName: jsii.String(\"ORCL\"),\n\tstorageEncrypted: jsii.Boolean(true),\n\tbackupRetention: cdk.duration.days(jsii.Number(7)),\n\tmonitoringInterval: cdk.*duration.seconds(jsii.Number(60)),\n\tenablePerformanceInsights: jsii.Boolean(true),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"trace\"),\n\t\tjsii.String(\"audit\"),\n\t\tjsii.String(\"alert\"),\n\t\tjsii.String(\"listener\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_MONTH,\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n})\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4()\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser()\n\n// Add alarm for high CPU\n// Add alarm for high CPU\ncloudwatch.NewAlarm(this, jsii.String(\"HighCPU\"), &alarmProps{\n\tmetric: instance.metricCPUUtilization(),\n\tthreshold: jsii.Number(90),\n\tevaluationPeriods: jsii.Number(1),\n})\n\n// Trigger Lambda function on instance availability events\nfn := lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = (event) => console.log(event);\")),\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_12_X(),\n})\n\navailabilityRule := instance.onEvent(jsii.String(\"Availability\"), &onEventOptions{\n\ttarget: targets.NewLambdaFunction(fn),\n})\navailabilityRule.addEventPattern(&eventPattern{\n\tdetail: map[string]interface{}{\n\t\t\"EventCategories\": []interface{}{\n\t\t\tjsii.String(\"availability\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OptionGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "ab85152a603a2f1ecc1ee993562e61f4e53ddb760405b917bab8fa23c977308d"
    },
    "202ec21f48cb9ed64e55a1f9592939e460163cecea7e5362a7f943c5cfb34604": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# oracle_engine_version: rds.OracleEngineVersion\n\noracle_ee_instance_engine_props = rds.OracleEeInstanceEngineProps(\n    version=oracle_engine_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nOracleEngineVersion oracleEngineVersion;\n\nOracleEeInstanceEngineProps oracleEeInstanceEngineProps = new OracleEeInstanceEngineProps {\n    Version = oracleEngineVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nOracleEngineVersion oracleEngineVersion;\n\nOracleEeInstanceEngineProps oracleEeInstanceEngineProps = OracleEeInstanceEngineProps.builder()\n        .version(oracleEngineVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar oracleEngineVersion oracleEngineVersion\noracleEeInstanceEngineProps := &oracleEeInstanceEngineProps{\n\tversion: oracleEngineVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const oracleEngineVersion: rds.OracleEngineVersion;\nconst oracleEeInstanceEngineProps: rds.OracleEeInstanceEngineProps = {\n  version: oracleEngineVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OracleEeInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.OracleEeInstanceEngineProps",
        "@aws-cdk/aws-rds.OracleEngineVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const oracleEngineVersion: rds.OracleEngineVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst oracleEeInstanceEngineProps: rds.OracleEeInstanceEngineProps = {\n  version: oracleEngineVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "37d25f16c6086d0ecbd780aaab0104eb38038e58b05b9c2ea5cbc58c17768071"
    },
    "7d42f6e3a71afef938cc7177a641ea0576b28cf5e15816840921a1421a82dc38": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    credentials=rds.Credentials.from_generated_secret(\"syscdk\"),  # Optional - will default to 'admin' username and generated password\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.SMALL),\n    Credentials = Credentials.FromGeneratedSecret(\"syscdk\"),  // Optional - will default to 'admin' username and generated password\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.SMALL))\n        .credentials(Credentials.fromGeneratedSecret(\"syscdk\")) // Optional - will default to 'admin' username and generated password\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_SMALL),\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"syscdk\")),\n\t // Optional - will default to 'admin' username and generated password\n\tvpc: vpc,\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OracleEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 34,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7b09f6545a01b2cdf8339a341b7e2665de453e2a64011615becfe254c26d569b"
    },
    "830c93f84e4f72682af7b3c2b72babb78a52361858e7a94ab95fb7f6372add22": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\noracle_legacy_engine_version = rds.OracleLegacyEngineVersion.VER_11_2",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nOracleLegacyEngineVersion oracleLegacyEngineVersion = OracleLegacyEngineVersion.VER_11_2;",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nOracleLegacyEngineVersion oracleLegacyEngineVersion = OracleLegacyEngineVersion.VER_11_2;",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\noracleLegacyEngineVersion := rds.oracleLegacyEngineVersion_VER_11_2()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst oracleLegacyEngineVersion = rds.OracleLegacyEngineVersion.VER_11_2;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OracleLegacyEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.OracleLegacyEngineVersion",
        "@aws-cdk/aws-rds.OracleLegacyEngineVersion#VER_11_2"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst oracleLegacyEngineVersion = rds.OracleLegacyEngineVersion.VER_11_2;\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "c6f7b9ae954593721593c8b90d71c8714a7cec5da1111abec04393bddca7fbb1"
    },
    "068afc608f562a3001731cdb350f80cf45175cf618f10514aa4420dc31ba64a7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# oracle_legacy_engine_version: rds.OracleLegacyEngineVersion\n\noracle_se1_instance_engine_props = rds.OracleSe1InstanceEngineProps(\n    version=oracle_legacy_engine_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nOracleLegacyEngineVersion oracleLegacyEngineVersion;\n\nOracleSe1InstanceEngineProps oracleSe1InstanceEngineProps = new OracleSe1InstanceEngineProps {\n    Version = oracleLegacyEngineVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nOracleLegacyEngineVersion oracleLegacyEngineVersion;\n\nOracleSe1InstanceEngineProps oracleSe1InstanceEngineProps = OracleSe1InstanceEngineProps.builder()\n        .version(oracleLegacyEngineVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar oracleLegacyEngineVersion oracleLegacyEngineVersion\noracleSe1InstanceEngineProps := &oracleSe1InstanceEngineProps{\n\tversion: oracleLegacyEngineVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const oracleLegacyEngineVersion: rds.OracleLegacyEngineVersion;\nconst oracleSe1InstanceEngineProps: rds.OracleSe1InstanceEngineProps = {\n  version: oracleLegacyEngineVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OracleSe1InstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.OracleLegacyEngineVersion",
        "@aws-cdk/aws-rds.OracleSe1InstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const oracleLegacyEngineVersion: rds.OracleLegacyEngineVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst oracleSe1InstanceEngineProps: rds.OracleSe1InstanceEngineProps = {\n  version: oracleLegacyEngineVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f8e583d3dc92e09739d4049ef0e55acc34dd77b05fc3401cdba6e55724a29e50"
    },
    "eff0b6c91d3a5961f985fd83b6e7688e8e4b43d0dde29fd418a1d95e6e6a1654": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    credentials=rds.Credentials.from_generated_secret(\"syscdk\"),  # Optional - will default to 'admin' username and generated password\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.SMALL),\n    Credentials = Credentials.FromGeneratedSecret(\"syscdk\"),  // Optional - will default to 'admin' username and generated password\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.SMALL))\n        .credentials(Credentials.fromGeneratedSecret(\"syscdk\")) // Optional - will default to 'admin' username and generated password\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\t// optional, defaults to m5.large\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_SMALL),\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"syscdk\")),\n\t // Optional - will default to 'admin' username and generated password\n\tvpc: vpc,\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 34,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7b09f6545a01b2cdf8339a341b7e2665de453e2a64011615becfe254c26d569b"
    },
    "592c31f63665c1059d9b78b30d9c7d6e3299dbf96d8d37a7eef299952d09465d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# oracle_legacy_engine_version: rds.OracleLegacyEngineVersion\n\noracle_se_instance_engine_props = rds.OracleSeInstanceEngineProps(\n    version=oracle_legacy_engine_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nOracleLegacyEngineVersion oracleLegacyEngineVersion;\n\nOracleSeInstanceEngineProps oracleSeInstanceEngineProps = new OracleSeInstanceEngineProps {\n    Version = oracleLegacyEngineVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nOracleLegacyEngineVersion oracleLegacyEngineVersion;\n\nOracleSeInstanceEngineProps oracleSeInstanceEngineProps = OracleSeInstanceEngineProps.builder()\n        .version(oracleLegacyEngineVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar oracleLegacyEngineVersion oracleLegacyEngineVersion\noracleSeInstanceEngineProps := &oracleSeInstanceEngineProps{\n\tversion: oracleLegacyEngineVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const oracleLegacyEngineVersion: rds.OracleLegacyEngineVersion;\nconst oracleSeInstanceEngineProps: rds.OracleSeInstanceEngineProps = {\n  version: oracleLegacyEngineVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OracleSeInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.OracleLegacyEngineVersion",
        "@aws-cdk/aws-rds.OracleSeInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const oracleLegacyEngineVersion: rds.OracleLegacyEngineVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst oracleSeInstanceEngineProps: rds.OracleSeInstanceEngineProps = {\n  version: oracleLegacyEngineVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "18016828b6fe4ce7a0f66e97300a2b01dee15ea54be310aeeaf1af7197e626dd"
    },
    "b323752e9b98b3754db4c50d15046f0dbe3f9fda3aa3e8317a07d678010c67c8": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AnotherCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_POSTGRESQL(),\n\tparameterGroup: rds.parameterGroup.fromParameterGroupName(this, jsii.String(\"ParameterGroup\"), jsii.String(\"default.aurora-postgresql10\")),\n\tvpc: vpc,\n\tscaling: &serverlessScalingOptions{\n\t\tautoPause: duration.minutes(jsii.Number(10)),\n\t\t // default is to pause after 5 minutes of idle time\n\t\tminCapacity: rds.auroraCapacityUnit_ACU_8,\n\t\t // default is 2 Aurora capacity units (ACUs)\n\t\tmaxCapacity: rds.*auroraCapacityUnit_ACU_32,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ParameterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e27b5de7fb62214ea869e917f1a7a82be663678962564cb15a6b44493727fddf"
    },
    "194cee12b522285fa54b06104aa1768fb2605cc17b44bc701b35d7ce71b84c35": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nparameter_group_cluster_bind_options = rds.ParameterGroupClusterBindOptions()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nParameterGroupClusterBindOptions parameterGroupClusterBindOptions = new ParameterGroupClusterBindOptions { };",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nParameterGroupClusterBindOptions parameterGroupClusterBindOptions = ParameterGroupClusterBindOptions.builder().build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nparameterGroupClusterBindOptions := &parameterGroupClusterBindOptions{\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst parameterGroupClusterBindOptions: rds.ParameterGroupClusterBindOptions = { };",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ParameterGroupClusterBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ParameterGroupClusterBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterGroupClusterBindOptions: rds.ParameterGroupClusterBindOptions = { };\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "67060f6bda81852b627dd9a1089ff32a3c9a90ef452909177b5138d4bdfe114d"
    },
    "b2c0e69689bb144e29f45a72cf939f514f114b2b3470379f7ec3e01b9f2a53c6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nparameter_group_cluster_config = rds.ParameterGroupClusterConfig(\n    parameter_group_name=\"parameterGroupName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nParameterGroupClusterConfig parameterGroupClusterConfig = new ParameterGroupClusterConfig {\n    ParameterGroupName = \"parameterGroupName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nParameterGroupClusterConfig parameterGroupClusterConfig = ParameterGroupClusterConfig.builder()\n        .parameterGroupName(\"parameterGroupName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nparameterGroupClusterConfig := &parameterGroupClusterConfig{\n\tparameterGroupName: jsii.String(\"parameterGroupName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst parameterGroupClusterConfig: rds.ParameterGroupClusterConfig = {\n  parameterGroupName: 'parameterGroupName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ParameterGroupClusterConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ParameterGroupClusterConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterGroupClusterConfig: rds.ParameterGroupClusterConfig = {\n  parameterGroupName: 'parameterGroupName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e8b6502bc52532ed2073692d42c6be6c8d3f0117e09a6060b624ca956f35a9ae"
    },
    "e503761f29ddb4f805a458f927fcf4d872090b9cb6932e365340de87ee19526b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nparameter_group_instance_bind_options = rds.ParameterGroupInstanceBindOptions()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nParameterGroupInstanceBindOptions parameterGroupInstanceBindOptions = new ParameterGroupInstanceBindOptions { };",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nParameterGroupInstanceBindOptions parameterGroupInstanceBindOptions = ParameterGroupInstanceBindOptions.builder().build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nparameterGroupInstanceBindOptions := &parameterGroupInstanceBindOptions{\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst parameterGroupInstanceBindOptions: rds.ParameterGroupInstanceBindOptions = { };",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ParameterGroupInstanceBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ParameterGroupInstanceBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterGroupInstanceBindOptions: rds.ParameterGroupInstanceBindOptions = { };\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "a6345b022e238583fe2a4c6be1877528ea1b9f22d5d85939131151cd7e788ab3"
    },
    "b8e0c1f067616abd1f31456b4efc4f13fa040614565150340d5b0007586c1bdb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nparameter_group_instance_config = rds.ParameterGroupInstanceConfig(\n    parameter_group_name=\"parameterGroupName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nParameterGroupInstanceConfig parameterGroupInstanceConfig = new ParameterGroupInstanceConfig {\n    ParameterGroupName = \"parameterGroupName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nParameterGroupInstanceConfig parameterGroupInstanceConfig = ParameterGroupInstanceConfig.builder()\n        .parameterGroupName(\"parameterGroupName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nparameterGroupInstanceConfig := &parameterGroupInstanceConfig{\n\tparameterGroupName: jsii.String(\"parameterGroupName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst parameterGroupInstanceConfig: rds.ParameterGroupInstanceConfig = {\n  parameterGroupName: 'parameterGroupName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ParameterGroupInstanceConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ParameterGroupInstanceConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterGroupInstanceConfig: rds.ParameterGroupInstanceConfig = {\n  parameterGroupName: 'parameterGroupName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "de703a86cef9074d49ef74d5fd0edd5af01e3b88e6395e2e32a17317fa19d849"
    },
    "b9bed2f2256844b090debeefb63234479d1a3438b194100fce3c891cc214aaa2": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Set open cursors with parameter group\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"open_cursors\": jsii.String(\"2500\"),\n\t},\n})\n\noptionGroup := rds.NewOptionGroup(this, jsii.String(\"OptionGroup\"), &optionGroupProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tconfigurations: []optionConfiguration{\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"LOCATOR\"),\n\t\t},\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"OEM\"),\n\t\t\tport: jsii.Number(1158),\n\t\t\tvpc: vpc,\n\t\t},\n\t},\n})\n\n// Allow connections to OEM\noptionGroup.optionConnections.oEM.connections.allowDefaultPortFromAnyIpv4()\n\n// Database instance with production values\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tlicenseModel: rds.licenseModel_BRING_YOUR_OWN_LICENSE,\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_MEDIUM),\n\tmultiAz: jsii.Boolean(true),\n\tstorageType: rds.storageType_IO1,\n\tcredentials: rds.credentials.fromUsername(jsii.String(\"syscdk\")),\n\tvpc: vpc,\n\tdatabaseName: jsii.String(\"ORCL\"),\n\tstorageEncrypted: jsii.Boolean(true),\n\tbackupRetention: cdk.duration.days(jsii.Number(7)),\n\tmonitoringInterval: cdk.*duration.seconds(jsii.Number(60)),\n\tenablePerformanceInsights: jsii.Boolean(true),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"trace\"),\n\t\tjsii.String(\"audit\"),\n\t\tjsii.String(\"alert\"),\n\t\tjsii.String(\"listener\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_MONTH,\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n})\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4()\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser()\n\n// Add alarm for high CPU\n// Add alarm for high CPU\ncloudwatch.NewAlarm(this, jsii.String(\"HighCPU\"), &alarmProps{\n\tmetric: instance.metricCPUUtilization(),\n\tthreshold: jsii.Number(90),\n\tevaluationPeriods: jsii.Number(1),\n})\n\n// Trigger Lambda function on instance availability events\nfn := lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = (event) => console.log(event);\")),\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_12_X(),\n})\n\navailabilityRule := instance.onEvent(jsii.String(\"Availability\"), &onEventOptions{\n\ttarget: targets.NewLambdaFunction(fn),\n})\navailabilityRule.addEventPattern(&eventPattern{\n\tdetail: map[string]interface{}{\n\t\t\"EventCategories\": []interface{}{\n\t\t\tjsii.String(\"availability\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ParameterGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "ab85152a603a2f1ecc1ee993562e61f4e53ddb760405b917bab8fa23c977308d"
    },
    "7de9dfb6b5c8a3d027180b1059385a024e6ad6e2891172e8e25719c4badb62fe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\npostgres_engine_features = rds.PostgresEngineFeatures(\n    s3_export=False,\n    s3_import=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nPostgresEngineFeatures postgresEngineFeatures = new PostgresEngineFeatures {\n    S3Export = false,\n    S3Import = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nPostgresEngineFeatures postgresEngineFeatures = PostgresEngineFeatures.builder()\n        .s3Export(false)\n        .s3Import(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\npostgresEngineFeatures := &postgresEngineFeatures{\n\ts3Export: jsii.Boolean(false),\n\ts3Import: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst postgresEngineFeatures: rds.PostgresEngineFeatures = {\n  s3Export: false,\n  s3Import: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.PostgresEngineFeatures"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.PostgresEngineFeatures"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst postgresEngineFeatures: rds.PostgresEngineFeatures = {\n  s3Export: false,\n  s3Import: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "325c83bdce9469744c357747bb4faf7a72fc10b6d11fe26a284b4be7377c5a8b"
    },
    "c7ce8508d05a7f1835e0cd37bce7ea9d7cbf80965b7b2c2f7b42d5181b420538": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nmy_key = kms.Key(self, \"MyKey\")\n\nrds.DatabaseInstance(self, \"InstanceWithCustomizedSecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.ReplicaRegion(region=\"eu-west-1\"), secretsmanager.ReplicaRegion(region=\"eu-west-2\")]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nKey myKey = new Key(this, \"MyKey\");\n\nnew DatabaseInstance(this, \"InstanceWithCustomizedSecret\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\", new CredentialsBaseOptions {\n        SecretName = \"my-cool-name\",\n        EncryptionKey = myKey,\n        ExcludeCharacters = \"!&*^#@()\",\n        ReplicaRegions = new [] { new ReplicaRegion { Region = \"eu-west-1\" }, new ReplicaRegion { Region = \"eu-west-2\" } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nKey myKey = new Key(this, \"MyKey\");\n\nDatabaseInstance.Builder.create(this, \"InstanceWithCustomizedSecret\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\", CredentialsBaseOptions.builder()\n                .secretName(\"my-cool-name\")\n                .encryptionKey(myKey)\n                .excludeCharacters(\"!&*^#@()\")\n                .replicaRegions(List.of(ReplicaRegion.builder().region(\"eu-west-1\").build(), ReplicaRegion.builder().region(\"eu-west-2\").build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nengine := rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\tversion: rds.postgresEngineVersion_VER_12_3(),\n})\nmyKey := kms.NewKey(this, jsii.String(\"MyKey\"))\n\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithCustomizedSecret\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"postgres\"), &credentialsBaseOptions{\n\t\tsecretName: jsii.String(\"my-cool-name\"),\n\t\tencryptionKey: myKey,\n\t\texcludeCharacters: jsii.String(\"!&*^#@()\"),\n\t\treplicaRegions: []replicaRegion{\n\t\t\t&replicaRegion{\n\t\t\t\tregion: jsii.String(\"eu-west-1\"),\n\t\t\t},\n\t\t\t&replicaRegion{\n\t\t\t\tregion: jsii.String(\"eu-west-2\"),\n\t\t\t},\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.PostgresEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.CredentialsBaseOptions",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "6037a87f60165d789b2feadfbfc4ffdb3f96476023707daf14019a0801d6d79c"
    },
    "41081ee236b820c55afee73b8f4856bc7c6db438867194a0bde89737cd1b3b1a": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nmy_key = kms.Key(self, \"MyKey\")\n\nrds.DatabaseInstance(self, \"InstanceWithCustomizedSecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.ReplicaRegion(region=\"eu-west-1\"), secretsmanager.ReplicaRegion(region=\"eu-west-2\")]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nKey myKey = new Key(this, \"MyKey\");\n\nnew DatabaseInstance(this, \"InstanceWithCustomizedSecret\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\", new CredentialsBaseOptions {\n        SecretName = \"my-cool-name\",\n        EncryptionKey = myKey,\n        ExcludeCharacters = \"!&*^#@()\",\n        ReplicaRegions = new [] { new ReplicaRegion { Region = \"eu-west-1\" }, new ReplicaRegion { Region = \"eu-west-2\" } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nKey myKey = new Key(this, \"MyKey\");\n\nDatabaseInstance.Builder.create(this, \"InstanceWithCustomizedSecret\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\", CredentialsBaseOptions.builder()\n                .secretName(\"my-cool-name\")\n                .encryptionKey(myKey)\n                .excludeCharacters(\"!&*^#@()\")\n                .replicaRegions(List.of(ReplicaRegion.builder().region(\"eu-west-1\").build(), ReplicaRegion.builder().region(\"eu-west-2\").build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nengine := rds.databaseInstanceEngine.postgres(&postgresInstanceEngineProps{\n\tversion: rds.postgresEngineVersion_VER_12_3(),\n})\nmyKey := kms.NewKey(this, jsii.String(\"MyKey\"))\n\nrds.NewDatabaseInstance(this, jsii.String(\"InstanceWithCustomizedSecret\"), &databaseInstanceProps{\n\tengine: engine,\n\tvpc: vpc,\n\tcredentials: rds.credentials.fromGeneratedSecret(jsii.String(\"postgres\"), &credentialsBaseOptions{\n\t\tsecretName: jsii.String(\"my-cool-name\"),\n\t\tencryptionKey: myKey,\n\t\texcludeCharacters: jsii.String(\"!&*^#@()\"),\n\t\treplicaRegions: []replicaRegion{\n\t\t\t&replicaRegion{\n\t\t\t\tregion: jsii.String(\"eu-west-1\"),\n\t\t\t},\n\t\t\t&replicaRegion{\n\t\t\t\tregion: jsii.String(\"eu-west-2\"),\n\t\t\t},\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.CredentialsBaseOptions",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "6037a87f60165d789b2feadfbfc4ffdb3f96476023707daf14019a0801d6d79c"
    },
    "4ad0c618135b4ff3a1d843a07826913f0c50ff2641381f7186392f81a0571c5d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nprocessor_features = rds.ProcessorFeatures(\n    core_count=123,\n    threads_per_core=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nProcessorFeatures processorFeatures = new ProcessorFeatures {\n    CoreCount = 123,\n    ThreadsPerCore = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nProcessorFeatures processorFeatures = ProcessorFeatures.builder()\n        .coreCount(123)\n        .threadsPerCore(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nprocessorFeatures := &processorFeatures{\n\tcoreCount: jsii.Number(123),\n\tthreadsPerCore: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst processorFeatures: rds.ProcessorFeatures = {\n  coreCount: 123,\n  threadsPerCore: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ProcessorFeatures"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ProcessorFeatures"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst processorFeatures: rds.ProcessorFeatures = {\n  coreCount: 123,\n  threadsPerCore: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "92d1becd94dd42dbc93878623b9ef6344af8ef6d0b6e4a65d2d9b8f79b7a7430"
    },
    "87f96586fb08f3efaeeaeaa1e0b7ae906794ea4dba06ed9fd2312b6e870cdd36": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\ncluster := rds.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA(),\n\tinstanceProps: &instanceProps{\n\t\tvpc: vpc,\n\t},\n})\n\nproxy := rds.NewDatabaseProxy(this, jsii.String(\"Proxy\"), &databaseProxyProps{\n\tproxyTarget: rds.proxyTarget.fromCluster(cluster),\n\tsecrets: []iSecret{\n\t\tcluster.secret,\n\t},\n\tvpc: vpc,\n})\n\nrole := iam.NewRole(this, jsii.String(\"DBProxyRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(this.account),\n})\nproxy.grantConnect(role, jsii.String(\"admin\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ProxyTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "dc223bebdc9ce0f212d113a0d0ae55888b3061f8afd79cb561dd33c38e1b4f74"
    },
    "c32a3369aa9d776e9b5a5e4a55f086c5c12fecf335fed0f95867f95e9e4f3cbc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# database_cluster: rds.DatabaseCluster\n# database_instance: rds.DatabaseInstance\n\nproxy_target_config = rds.ProxyTargetConfig(\n    engine_family=\"engineFamily\",\n\n    # the properties below are optional\n    db_clusters=[database_cluster],\n    db_instances=[database_instance]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nDatabaseCluster databaseCluster;\nDatabaseInstance databaseInstance;\n\nProxyTargetConfig proxyTargetConfig = new ProxyTargetConfig {\n    EngineFamily = \"engineFamily\",\n\n    // the properties below are optional\n    DbClusters = new [] { databaseCluster },\n    DbInstances = new [] { databaseInstance }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nDatabaseCluster databaseCluster;\nDatabaseInstance databaseInstance;\n\nProxyTargetConfig proxyTargetConfig = ProxyTargetConfig.builder()\n        .engineFamily(\"engineFamily\")\n\n        // the properties below are optional\n        .dbClusters(List.of(databaseCluster))\n        .dbInstances(List.of(databaseInstance))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar databaseCluster databaseCluster\nvar databaseInstance databaseInstance\nproxyTargetConfig := &proxyTargetConfig{\n\tengineFamily: jsii.String(\"engineFamily\"),\n\n\t// the properties below are optional\n\tdbClusters: []iDatabaseCluster{\n\t\tdatabaseCluster,\n\t},\n\tdbInstances: []iDatabaseInstance{\n\t\tdatabaseInstance,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const databaseCluster: rds.DatabaseCluster;\ndeclare const databaseInstance: rds.DatabaseInstance;\nconst proxyTargetConfig: rds.ProxyTargetConfig = {\n  engineFamily: 'engineFamily',\n\n  // the properties below are optional\n  dbClusters: [databaseCluster],\n  dbInstances: [databaseInstance],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ProxyTargetConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ProxyTargetConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const databaseCluster: rds.DatabaseCluster;\ndeclare const databaseInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst proxyTargetConfig: rds.ProxyTargetConfig = {\n  engineFamily: 'engineFamily',\n\n  // the properties below are optional\n  dbClusters: [databaseCluster],\n  dbInstances: [databaseInstance],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "10d50ca8b450f3273fcaa7ec6b6139fde107404e89c5fd07dc9bbb1864a1c265"
    },
    "e36b68fe79ff261f7b470e80102598576e7d9f6cfed049a4e1df9c5179ea2849": {
      "translations": {
        "python": {
          "source": "# instance: rds.DatabaseInstance\n# my_imported_secret: rds.DatabaseSecret\n\ninstance.add_rotation_multi_user(\"MyUser\",\n    secret=my_imported_secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\nDatabaseSecret myImportedSecret;\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {\n    Secret = myImportedSecret\n});",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\nDatabaseSecret myImportedSecret;\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder()\n        .secret(myImportedSecret)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var instance databaseInstance\nvar myImportedSecret databaseSecret\ninstance.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\tsecret: myImportedSecret,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\ndeclare const myImportedSecret: rds.DatabaseSecret;\ninstance.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.RotationMultiUserOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\ndeclare const myImportedSecret: rds.DatabaseSecret;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ninstance.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "3f43fca00bb36228c7979693d7738337bdb8f40594180cf84a3851d55e561659"
    },
    "3c489682358dac59e72af0c2cf33c56268120377a1f8a0d00b87962ef113dd64": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n# instance: rds.DatabaseInstance\n\ninstance.add_rotation_single_user(\n    automatically_after=cdk.Duration.days(7),  # defaults to 30 days\n    exclude_characters=\"!@#$%^&*\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\nDatabaseInstance instance;\ninstance.AddRotationSingleUser(new RotationSingleUserOptions {\n    AutomaticallyAfter = Duration.Days(7),  // defaults to 30 days\n    ExcludeCharacters = \"!@#$%^&*\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\nDatabaseInstance instance;\n\ninstance.addRotationSingleUser(RotationSingleUserOptions.builder()\n        .automaticallyAfter(Duration.days(7)) // defaults to 30 days\n        .excludeCharacters(\"!@#$%^&*\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar instance databaseInstance\ninstance.addRotationSingleUser(&rotationSingleUserOptions{\n\tautomaticallyAfter: cdk.duration.days(jsii.Number(7)),\n\t // defaults to 30 days\n\texcludeCharacters: jsii.String(\"!@#$%^&*\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\ndeclare const instance: rds.DatabaseInstance;\ninstance.addRotationSingleUser({\n  automaticallyAfter: cdk.Duration.days(7), // defaults to 30 days\n  excludeCharacters: '!@#$%^&*', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.RotationSingleUserOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.RotationSingleUserOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ninstance.addRotationSingleUser({\n  automaticallyAfter: cdk.Duration.days(7), // defaults to 30 days\n  excludeCharacters: '!@#$%^&*', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f71a74ee2b222b94884d884c4a68a5179dbf2d2ba38c6abda2b5b63e1e3096df"
    },
    "7a1bd6393565a64d1a976af45004130d4e9cdca6f7fb2b6a1be1e98efaf8f1b6": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# code: lambda.Code\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,  # this parameter is optional for serverless Clusters\n    enable_data_api=True\n)\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=code,\n    environment={\n        \"CLUSTER_ARN\": cluster.cluster_arn,\n        \"SECRET_ARN\": cluster.secret.secret_arn\n    }\n)\ncluster.grant_data_api_access(fn)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,  // this parameter is optional for serverless Clusters\n    EnableDataApi = true\n});\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = code,\n    Environment = new Dictionary<string, string> {\n        { \"CLUSTER_ARN\", cluster.ClusterArn },\n        { \"SECRET_ARN\", cluster.Secret.SecretArn }\n    }\n});\ncluster.GrantDataApiAccess(fn);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc) // this parameter is optional for serverless Clusters\n        .enableDataApi(true)\n        .build();\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(code)\n        .environment(Map.of(\n                \"CLUSTER_ARN\", cluster.getClusterArn(),\n                \"SECRET_ARN\", cluster.getSecret().getSecretArn()))\n        .build();\ncluster.grantDataApiAccess(fn);",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar code code\n\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AnotherCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\t // this parameter is optional for serverless Clusters\n\tenableDataApi: jsii.Boolean(true),\n})\nfn := lambda.NewFunction(this, jsii.String(\"MyFunction\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_12_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: code,\n\tenvironment: map[string]*string{\n\t\t\"CLUSTER_ARN\": cluster.clusterArn,\n\t\t\"SECRET_ARN\": cluster.secret.secretArn,\n\t},\n})\ncluster.grantDataApiAccess(fn)",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc, // this parameter is optional for serverless Clusters\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\n\ndeclare const code: lambda.Code;\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster#secret",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret#secretArn",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc, // this parameter is optional for serverless Clusters\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 35,
        "104": 2,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 10,
        "196": 1,
        "197": 2,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "81042fd028c570b7321c8827de075ad70c1227d5e9236f268adefec05683e466"
    },
    "38311b921c21e549e894efdaa3d282fb029426a250effce112fba87d6a7b5f8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# secret: secretsmanager.Secret\n# security_group: ec2.SecurityGroup\n\nserverless_cluster_attributes = rds.ServerlessClusterAttributes(\n    cluster_identifier=\"clusterIdentifier\",\n\n    # the properties below are optional\n    cluster_endpoint_address=\"clusterEndpointAddress\",\n    port=123,\n    reader_endpoint_address=\"readerEndpointAddress\",\n    secret=secret,\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecret secret;\nSecurityGroup securityGroup;\n\nServerlessClusterAttributes serverlessClusterAttributes = new ServerlessClusterAttributes {\n    ClusterIdentifier = \"clusterIdentifier\",\n\n    // the properties below are optional\n    ClusterEndpointAddress = \"clusterEndpointAddress\",\n    Port = 123,\n    ReaderEndpointAddress = \"readerEndpointAddress\",\n    Secret = secret,\n    SecurityGroups = new [] { securityGroup }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecret secret;\nSecurityGroup securityGroup;\n\nServerlessClusterAttributes serverlessClusterAttributes = ServerlessClusterAttributes.builder()\n        .clusterIdentifier(\"clusterIdentifier\")\n\n        // the properties below are optional\n        .clusterEndpointAddress(\"clusterEndpointAddress\")\n        .port(123)\n        .readerEndpointAddress(\"readerEndpointAddress\")\n        .secret(secret)\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"import secretsmanager \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\n\nvar secret secret\nvar securityGroup securityGroup\nserverlessClusterAttributes := &serverlessClusterAttributes{\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\n\t// the properties below are optional\n\tclusterEndpointAddress: jsii.String(\"clusterEndpointAddress\"),\n\tport: jsii.Number(123),\n\treaderEndpointAddress: jsii.String(\"readerEndpointAddress\"),\n\tsecret: secret,\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst serverlessClusterAttributes: rds.ServerlessClusterAttributes = {\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  port: 123,\n  readerEndpointAddress: 'readerEndpointAddress',\n  secret: secret,\n  securityGroups: [securityGroup],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessClusterAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.ServerlessClusterAttributes",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serverlessClusterAttributes: rds.ServerlessClusterAttributes = {\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  port: 123,\n  readerEndpointAddress: 'readerEndpointAddress',\n  secret: secret,\n  securityGroups: [securityGroup],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 20,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "1236946f403a2d508b6564010b794928db9ebaa29d1a8fb021ea9e6542a5d0a9"
    },
    "fb4c25a1f1cd79ffba6949c390f557901669b26dde2ef3a185411dc3974690e6": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrds.ServerlessClusterFromSnapshot(self, \"Cluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew ServerlessClusterFromSnapshot(this, \"Cluster\", new ServerlessClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nServerlessClusterFromSnapshot.Builder.create(this, \"Cluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrds.NewServerlessClusterFromSnapshot(this, jsii.String(\"Cluster\"), &serverlessClusterFromSnapshotProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tsnapshotIdentifier: jsii.String(\"mySnapshot\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.ServerlessClusterFromSnapshot(this, 'Cluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessClusterFromSnapshot"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessClusterFromSnapshot",
        "@aws-cdk/aws-rds.ServerlessClusterFromSnapshotProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.ServerlessClusterFromSnapshot(this, 'Cluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3cf166b17e946e9e0f700f879651ff8d72fb0c8d66f8dbe41e806850f56fd08e"
    },
    "038829fe1f0194f3a4cba243c1c11fc63c7483d3b799628df58c2f96adaaf150": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nrds.ServerlessClusterFromSnapshot(self, \"Cluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew ServerlessClusterFromSnapshot(this, \"Cluster\", new ServerlessClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nServerlessClusterFromSnapshot.Builder.create(this, \"Cluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nrds.NewServerlessClusterFromSnapshot(this, jsii.String(\"Cluster\"), &serverlessClusterFromSnapshotProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tsnapshotIdentifier: jsii.String(\"mySnapshot\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.ServerlessClusterFromSnapshot(this, 'Cluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessClusterFromSnapshotProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessClusterFromSnapshot",
        "@aws-cdk/aws-rds.ServerlessClusterFromSnapshotProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.ServerlessClusterFromSnapshot(this, 'Cluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3cf166b17e946e9e0f700f879651ff8d72fb0c8d66f8dbe41e806850f56fd08e"
    },
    "1c2123c793e14acf0b216ba176e48e8388b7647ab7af56b9ac6789fb6044995a": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n# code: lambda.Code\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,  # this parameter is optional for serverless Clusters\n    enable_data_api=True\n)\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=code,\n    environment={\n        \"CLUSTER_ARN\": cluster.cluster_arn,\n        \"SECRET_ARN\": cluster.secret.secret_arn\n    }\n)\ncluster.grant_data_api_access(fn)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,  // this parameter is optional for serverless Clusters\n    EnableDataApi = true\n});\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = code,\n    Environment = new Dictionary<string, string> {\n        { \"CLUSTER_ARN\", cluster.ClusterArn },\n        { \"SECRET_ARN\", cluster.Secret.SecretArn }\n    }\n});\ncluster.GrantDataApiAccess(fn);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc) // this parameter is optional for serverless Clusters\n        .enableDataApi(true)\n        .build();\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(code)\n        .environment(Map.of(\n                \"CLUSTER_ARN\", cluster.getClusterArn(),\n                \"SECRET_ARN\", cluster.getSecret().getSecretArn()))\n        .build();\ncluster.grantDataApiAccess(fn);",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nvar code code\n\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AnotherCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\t // this parameter is optional for serverless Clusters\n\tenableDataApi: jsii.Boolean(true),\n})\nfn := lambda.NewFunction(this, jsii.String(\"MyFunction\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_12_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: code,\n\tenvironment: map[string]*string{\n\t\t\"CLUSTER_ARN\": cluster.clusterArn,\n\t\t\"SECRET_ARN\": cluster.secret.secretArn,\n\t},\n})\ncluster.grantDataApiAccess(fn)",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc, // this parameter is optional for serverless Clusters\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\n\ndeclare const code: lambda.Code;\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster#secret",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret#secretArn",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc, // this parameter is optional for serverless Clusters\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 35,
        "104": 2,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 10,
        "196": 1,
        "197": 2,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "81042fd028c570b7321c8827de075ad70c1227d5e9236f268adefec05683e466"
    },
    "6f0e446c400e2d7790806184b25be93282f300a56c8dd2f2c5c00ab8f4ed29b4": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AnotherCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_POSTGRESQL(),\n\tparameterGroup: rds.parameterGroup.fromParameterGroupName(this, jsii.String(\"ParameterGroup\"), jsii.String(\"default.aurora-postgresql10\")),\n\tvpc: vpc,\n\tscaling: &serverlessScalingOptions{\n\t\tautoPause: duration.minutes(jsii.Number(10)),\n\t\t // default is to pause after 5 minutes of idle time\n\t\tminCapacity: rds.auroraCapacityUnit_ACU_8,\n\t\t // default is 2 Aurora capacity units (ACUs)\n\t\tmaxCapacity: rds.*auroraCapacityUnit_ACU_32,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessScalingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e27b5de7fb62214ea869e917f1a7a82be663678962564cb15a6b44493727fddf"
    },
    "3d43b89c58053fdfb184cdb0d602b2cfb0c4bff438e9cf8f24fb09c27974172b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\nsession_pinning_filter = rds.SessionPinningFilter.of(\"filterName\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nSessionPinningFilter sessionPinningFilter = SessionPinningFilter.Of(\"filterName\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nSessionPinningFilter sessionPinningFilter = SessionPinningFilter.of(\"filterName\");",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nsessionPinningFilter := rds.sessionPinningFilter.of(jsii.String(\"filterName\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\nconst sessionPinningFilter = rds.SessionPinningFilter.of('filterName');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SessionPinningFilter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.SessionPinningFilter",
        "@aws-cdk/aws-rds.SessionPinningFilter#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sessionPinningFilter = rds.SessionPinningFilter.of('filterName');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "96e2e63db874b15808dd9b7ccd28f849469da0141c42c9441f1b0b50700c175a"
    },
    "6c03e18b611440cacd1ef49b8d8275e2d8575c9ea0c16da000e4f25fc44aa198": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_rds as rds\n\n# key: kms.Key\n\nsnapshot_credentials = rds.SnapshotCredentials.from_generated_password(\"username\",\n    encryption_key=key,\n    exclude_characters=\"excludeCharacters\",\n    replica_regions=[ReplicaRegion(\n        region=\"region\",\n\n        # the properties below are optional\n        encryption_key=key\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.RDS;\n\nKey key;\n\nSnapshotCredentials snapshotCredentials = SnapshotCredentials.FromGeneratedPassword(\"username\", new SnapshotCredentialsFromGeneratedPasswordOptions {\n    EncryptionKey = key,\n    ExcludeCharacters = \"excludeCharacters\",\n    ReplicaRegions = new [] { new ReplicaRegion {\n        Region = \"region\",\n\n        // the properties below are optional\n        EncryptionKey = key\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.rds.*;\n\nKey key;\n\nSnapshotCredentials snapshotCredentials = SnapshotCredentials.fromGeneratedPassword(\"username\", SnapshotCredentialsFromGeneratedPasswordOptions.builder()\n        .encryptionKey(key)\n        .excludeCharacters(\"excludeCharacters\")\n        .replicaRegions(List.of(ReplicaRegion.builder()\n                .region(\"region\")\n\n                // the properties below are optional\n                .encryptionKey(key)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import kms \"github.com/aws-samples/dummy/awscdkawskms\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar key key\nsnapshotCredentials := rds.snapshotCredentials.fromGeneratedPassword(jsii.String(\"username\"), &snapshotCredentialsFromGeneratedPasswordOptions{\n\tencryptionKey: key,\n\texcludeCharacters: jsii.String(\"excludeCharacters\"),\n\treplicaRegions: []replicaRegion{\n\t\t&replicaRegion{\n\t\t\tregion: jsii.String(\"region\"),\n\n\t\t\t// the properties below are optional\n\t\t\tencryptionKey: key,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const key: kms.Key;\nconst snapshotCredentials = rds.SnapshotCredentials.fromGeneratedPassword('username', /* all optional props */ {\n  encryptionKey: key,\n  excludeCharacters: 'excludeCharacters',\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    encryptionKey: key,\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SnapshotCredentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-rds.SnapshotCredentials",
        "@aws-cdk/aws-rds.SnapshotCredentials#fromGeneratedPassword",
        "@aws-cdk/aws-rds.SnapshotCredentialsFromGeneratedPasswordOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst snapshotCredentials = rds.SnapshotCredentials.fromGeneratedPassword('username', /* all optional props */ {\n  encryptionKey: key,\n  excludeCharacters: 'excludeCharacters',\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    encryptionKey: key,\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 16,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "4054676053c7bd37749daa96260364c41a1df689172285f11c4d6cc3f827bb6d"
    },
    "d8a9875855933373f553433a949df99c24e0b6644e6534968dd11a48a08d0633": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_rds as rds\n\n# key: kms.Key\n\nsnapshot_credentials_from_generated_password_options = rds.SnapshotCredentialsFromGeneratedPasswordOptions(\n    encryption_key=key,\n    exclude_characters=\"excludeCharacters\",\n    replica_regions=[ReplicaRegion(\n        region=\"region\",\n\n        # the properties below are optional\n        encryption_key=key\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.RDS;\n\nKey key;\n\nSnapshotCredentialsFromGeneratedPasswordOptions snapshotCredentialsFromGeneratedPasswordOptions = new SnapshotCredentialsFromGeneratedPasswordOptions {\n    EncryptionKey = key,\n    ExcludeCharacters = \"excludeCharacters\",\n    ReplicaRegions = new [] { new ReplicaRegion {\n        Region = \"region\",\n\n        // the properties below are optional\n        EncryptionKey = key\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.rds.*;\n\nKey key;\n\nSnapshotCredentialsFromGeneratedPasswordOptions snapshotCredentialsFromGeneratedPasswordOptions = SnapshotCredentialsFromGeneratedPasswordOptions.builder()\n        .encryptionKey(key)\n        .excludeCharacters(\"excludeCharacters\")\n        .replicaRegions(List.of(ReplicaRegion.builder()\n                .region(\"region\")\n\n                // the properties below are optional\n                .encryptionKey(key)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import kms \"github.com/aws-samples/dummy/awscdkawskms\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar key key\nsnapshotCredentialsFromGeneratedPasswordOptions := &snapshotCredentialsFromGeneratedPasswordOptions{\n\tencryptionKey: key,\n\texcludeCharacters: jsii.String(\"excludeCharacters\"),\n\treplicaRegions: []replicaRegion{\n\t\t&replicaRegion{\n\t\t\tregion: jsii.String(\"region\"),\n\n\t\t\t// the properties below are optional\n\t\t\tencryptionKey: key,\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const key: kms.Key;\nconst snapshotCredentialsFromGeneratedPasswordOptions: rds.SnapshotCredentialsFromGeneratedPasswordOptions = {\n  encryptionKey: key,\n  excludeCharacters: 'excludeCharacters',\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    encryptionKey: key,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SnapshotCredentialsFromGeneratedPasswordOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-rds.SnapshotCredentialsFromGeneratedPasswordOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst snapshotCredentialsFromGeneratedPasswordOptions: rds.SnapshotCredentialsFromGeneratedPasswordOptions = {\n  encryptionKey: key,\n  excludeCharacters: 'excludeCharacters',\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    encryptionKey: key,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a7109d4ea72572e785284d4a1ccda21e17557f10e4e6c8a94780a588102670f4"
    },
    "493692ab0b5f783f4a44e4da92f6800eb1b175b6f1cc989c00fd35f96f68f9ee": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.sql_server_ee(\n        version=rds.SqlServerEngineVersion.VER_11\n    ),\n    parameters={\n        \"locks\": \"100\"\n    }\n)\n\nrds.DatabaseInstance(self, \"Database\",\n    engine=rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n    vpc=vpc,\n    parameter_group=parameter_group\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.SqlServerEe(new SqlServerEeInstanceEngineProps {\n        Version = SqlServerEngineVersion.VER_11\n    }),\n    Parameters = new Dictionary<string, string> {\n        { \"locks\", \"100\" }\n    }\n});\n\nnew DatabaseInstance(this, \"Database\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.SQL_SERVER_EE,\n    Vpc = vpc,\n    ParameterGroup = parameterGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.sqlServerEe(SqlServerEeInstanceEngineProps.builder()\n                .version(SqlServerEngineVersion.VER_11)\n                .build()))\n        .parameters(Map.of(\n                \"locks\", \"100\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"Database\")\n        .engine(DatabaseInstanceEngine.SQL_SERVER_EE)\n        .vpc(vpc)\n        .parameterGroup(parameterGroup)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.sqlServerEe(&sqlServerEeInstanceEngineProps{\n\t\tversion: rds.sqlServerEngineVersion_VER_11(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"locks\": jsii.String(\"100\"),\n\t},\n})\n\nrds.NewDatabaseInstance(this, jsii.String(\"Database\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine_SQL_SERVER_EE(),\n\tvpc: vpc,\n\tparameterGroup: parameterGroup,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n  engine: rds.DatabaseInstanceEngine.sqlServerEe({\n    version: rds.SqlServerEngineVersion.VER_11,\n  }),\n  parameters: {\n    locks: '100',\n  },\n});\n\nnew rds.DatabaseInstance(this, 'Database', {\n  engine: rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n  vpc,\n  parameterGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SqlServerEeInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#SQL_SERVER_EE",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#sqlServerEe",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.SqlServerEeInstanceEngineProps",
        "@aws-cdk/aws-rds.SqlServerEngineVersion",
        "@aws-cdk/aws-rds.SqlServerEngineVersion#VER_11",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n  engine: rds.DatabaseInstanceEngine.sqlServerEe({\n    version: rds.SqlServerEngineVersion.VER_11,\n  }),\n  parameters: {\n    locks: '100',\n  },\n});\n\nnew rds.DatabaseInstance(this, 'Database', {\n  engine: rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n  vpc,\n  parameterGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "44575352b4b8897359bf797896610c8f5a70d3a0527117cd485e64562e09bcb9"
    },
    "fc0a4dcf9664b6e56878f14389a9f8f61bcd93653b075927bdde6bc79f352348": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.sql_server_ee(\n        version=rds.SqlServerEngineVersion.VER_11\n    ),\n    parameters={\n        \"locks\": \"100\"\n    }\n)\n\nrds.DatabaseInstance(self, \"Database\",\n    engine=rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n    vpc=vpc,\n    parameter_group=parameter_group\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.SqlServerEe(new SqlServerEeInstanceEngineProps {\n        Version = SqlServerEngineVersion.VER_11\n    }),\n    Parameters = new Dictionary<string, string> {\n        { \"locks\", \"100\" }\n    }\n});\n\nnew DatabaseInstance(this, \"Database\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.SQL_SERVER_EE,\n    Vpc = vpc,\n    ParameterGroup = parameterGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.sqlServerEe(SqlServerEeInstanceEngineProps.builder()\n                .version(SqlServerEngineVersion.VER_11)\n                .build()))\n        .parameters(Map.of(\n                \"locks\", \"100\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"Database\")\n        .engine(DatabaseInstanceEngine.SQL_SERVER_EE)\n        .vpc(vpc)\n        .parameterGroup(parameterGroup)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.sqlServerEe(&sqlServerEeInstanceEngineProps{\n\t\tversion: rds.sqlServerEngineVersion_VER_11(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"locks\": jsii.String(\"100\"),\n\t},\n})\n\nrds.NewDatabaseInstance(this, jsii.String(\"Database\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine_SQL_SERVER_EE(),\n\tvpc: vpc,\n\tparameterGroup: parameterGroup,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n  engine: rds.DatabaseInstanceEngine.sqlServerEe({\n    version: rds.SqlServerEngineVersion.VER_11,\n  }),\n  parameters: {\n    locks: '100',\n  },\n});\n\nnew rds.DatabaseInstance(this, 'Database', {\n  engine: rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n  vpc,\n  parameterGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SqlServerEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#SQL_SERVER_EE",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#sqlServerEe",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.SqlServerEeInstanceEngineProps",
        "@aws-cdk/aws-rds.SqlServerEngineVersion",
        "@aws-cdk/aws-rds.SqlServerEngineVersion#VER_11",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n  engine: rds.DatabaseInstanceEngine.sqlServerEe({\n    version: rds.SqlServerEngineVersion.VER_11,\n  }),\n  parameters: {\n    locks: '100',\n  },\n});\n\nnew rds.DatabaseInstance(this, 'Database', {\n  engine: rds.DatabaseInstanceEngine.SQL_SERVER_EE,\n  vpc,\n  parameterGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "44575352b4b8897359bf797896610c8f5a70d3a0527117cd485e64562e09bcb9"
    },
    "4becbef9956bdbeb0f7d0adccfa9fcbbdece49578d2134028ac3417bae55e2fc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# sql_server_engine_version: rds.SqlServerEngineVersion\n\nsql_server_ex_instance_engine_props = rds.SqlServerExInstanceEngineProps(\n    version=sql_server_engine_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nSqlServerEngineVersion sqlServerEngineVersion;\n\nSqlServerExInstanceEngineProps sqlServerExInstanceEngineProps = new SqlServerExInstanceEngineProps {\n    Version = sqlServerEngineVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nSqlServerEngineVersion sqlServerEngineVersion;\n\nSqlServerExInstanceEngineProps sqlServerExInstanceEngineProps = SqlServerExInstanceEngineProps.builder()\n        .version(sqlServerEngineVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar sqlServerEngineVersion sqlServerEngineVersion\nsqlServerExInstanceEngineProps := &sqlServerExInstanceEngineProps{\n\tversion: sqlServerEngineVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const sqlServerEngineVersion: rds.SqlServerEngineVersion;\nconst sqlServerExInstanceEngineProps: rds.SqlServerExInstanceEngineProps = {\n  version: sqlServerEngineVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SqlServerExInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.SqlServerEngineVersion",
        "@aws-cdk/aws-rds.SqlServerExInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const sqlServerEngineVersion: rds.SqlServerEngineVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sqlServerExInstanceEngineProps: rds.SqlServerExInstanceEngineProps = {\n  version: sqlServerEngineVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1459a05e2acea2ccb98322d18bc269c23f1963470b8308b11452d556d0f9a412"
    },
    "42a7a1c6ef5583463ca71509d4781637d7bdf4c6c30f3f643e37eaf81ccc002b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# sql_server_engine_version: rds.SqlServerEngineVersion\n\nsql_server_se_instance_engine_props = rds.SqlServerSeInstanceEngineProps(\n    version=sql_server_engine_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nSqlServerEngineVersion sqlServerEngineVersion;\n\nSqlServerSeInstanceEngineProps sqlServerSeInstanceEngineProps = new SqlServerSeInstanceEngineProps {\n    Version = sqlServerEngineVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nSqlServerEngineVersion sqlServerEngineVersion;\n\nSqlServerSeInstanceEngineProps sqlServerSeInstanceEngineProps = SqlServerSeInstanceEngineProps.builder()\n        .version(sqlServerEngineVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar sqlServerEngineVersion sqlServerEngineVersion\nsqlServerSeInstanceEngineProps := &sqlServerSeInstanceEngineProps{\n\tversion: sqlServerEngineVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const sqlServerEngineVersion: rds.SqlServerEngineVersion;\nconst sqlServerSeInstanceEngineProps: rds.SqlServerSeInstanceEngineProps = {\n  version: sqlServerEngineVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SqlServerSeInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.SqlServerEngineVersion",
        "@aws-cdk/aws-rds.SqlServerSeInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const sqlServerEngineVersion: rds.SqlServerEngineVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sqlServerSeInstanceEngineProps: rds.SqlServerSeInstanceEngineProps = {\n  version: sqlServerEngineVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6f0e932cd6b8467960c974bd6abaa15fa46b156c77f13fa13e18dad797375f9c"
    },
    "89b70c39b6ef41f91dbdbcb2fc1f2ccabe9007a1e09bac66d3fcc8a667b6485a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_rds as rds\n\n# sql_server_engine_version: rds.SqlServerEngineVersion\n\nsql_server_web_instance_engine_props = rds.SqlServerWebInstanceEngineProps(\n    version=sql_server_engine_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.RDS;\n\nSqlServerEngineVersion sqlServerEngineVersion;\n\nSqlServerWebInstanceEngineProps sqlServerWebInstanceEngineProps = new SqlServerWebInstanceEngineProps {\n    Version = sqlServerEngineVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.rds.*;\n\nSqlServerEngineVersion sqlServerEngineVersion;\n\nSqlServerWebInstanceEngineProps sqlServerWebInstanceEngineProps = SqlServerWebInstanceEngineProps.builder()\n        .version(sqlServerEngineVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import rds \"github.com/aws-samples/dummy/awscdkawsrds\"\n\nvar sqlServerEngineVersion sqlServerEngineVersion\nsqlServerWebInstanceEngineProps := &sqlServerWebInstanceEngineProps{\n\tversion: sqlServerEngineVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const sqlServerEngineVersion: rds.SqlServerEngineVersion;\nconst sqlServerWebInstanceEngineProps: rds.SqlServerWebInstanceEngineProps = {\n  version: sqlServerEngineVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SqlServerWebInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.SqlServerEngineVersion",
        "@aws-cdk/aws-rds.SqlServerWebInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as rds from '@aws-cdk/aws-rds';\n\ndeclare const sqlServerEngineVersion: rds.SqlServerEngineVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sqlServerWebInstanceEngineProps: rds.SqlServerWebInstanceEngineProps = {\n  version: sqlServerEngineVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a6b92ca2084b10c9165193c289eb01737da4bdbec8157ceaa0a5b6eee7b0ebe"
    },
    "97dd10438a37ee504eed8eb4a135582fb52d20f555028674dad86daf7d4be0cf": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Set open cursors with parameter group\nparameterGroup := rds.NewParameterGroup(this, jsii.String(\"ParameterGroup\"), &parameterGroupProps{\n\tengine: rds.databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tparameters: map[string]*string{\n\t\t\"open_cursors\": jsii.String(\"2500\"),\n\t},\n})\n\noptionGroup := rds.NewOptionGroup(this, jsii.String(\"OptionGroup\"), &optionGroupProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tconfigurations: []optionConfiguration{\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"LOCATOR\"),\n\t\t},\n\t\t&optionConfiguration{\n\t\t\tname: jsii.String(\"OEM\"),\n\t\t\tport: jsii.Number(1158),\n\t\t\tvpc: vpc,\n\t\t},\n\t},\n})\n\n// Allow connections to OEM\noptionGroup.optionConnections.oEM.connections.allowDefaultPortFromAnyIpv4()\n\n// Database instance with production values\ninstance := rds.NewDatabaseInstance(this, jsii.String(\"Instance\"), &databaseInstanceProps{\n\tengine: rds.*databaseInstanceEngine.oracleSe2(&oracleSe2InstanceEngineProps{\n\t\tversion: rds.*oracleEngineVersion_VER_19_0_0_0_2020_04_R1(),\n\t}),\n\tlicenseModel: rds.licenseModel_BRING_YOUR_OWN_LICENSE,\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_BURSTABLE3, ec2.instanceSize_MEDIUM),\n\tmultiAz: jsii.Boolean(true),\n\tstorageType: rds.storageType_IO1,\n\tcredentials: rds.credentials.fromUsername(jsii.String(\"syscdk\")),\n\tvpc: vpc,\n\tdatabaseName: jsii.String(\"ORCL\"),\n\tstorageEncrypted: jsii.Boolean(true),\n\tbackupRetention: cdk.duration.days(jsii.Number(7)),\n\tmonitoringInterval: cdk.*duration.seconds(jsii.Number(60)),\n\tenablePerformanceInsights: jsii.Boolean(true),\n\tcloudwatchLogsExports: []*string{\n\t\tjsii.String(\"trace\"),\n\t\tjsii.String(\"audit\"),\n\t\tjsii.String(\"alert\"),\n\t\tjsii.String(\"listener\"),\n\t},\n\tcloudwatchLogsRetention: logs.retentionDays_ONE_MONTH,\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\toptionGroup: optionGroup,\n\tparameterGroup: parameterGroup,\n})\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4()\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser()\n\n// Add alarm for high CPU\n// Add alarm for high CPU\ncloudwatch.NewAlarm(this, jsii.String(\"HighCPU\"), &alarmProps{\n\tmetric: instance.metricCPUUtilization(),\n\tthreshold: jsii.Number(90),\n\tevaluationPeriods: jsii.Number(1),\n})\n\n// Trigger Lambda function on instance availability events\nfn := lambda.NewFunction(this, jsii.String(\"Function\"), &functionProps{\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = (event) => console.log(event);\")),\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_12_X(),\n})\n\navailabilityRule := instance.onEvent(jsii.String(\"Availability\"), &onEventOptions{\n\ttarget: targets.NewLambdaFunction(fn),\n})\navailabilityRule.addEventPattern(&eventPattern{\n\tdetail: map[string]interface{}{\n\t\t\"EventCategories\": []interface{}{\n\t\t\tjsii.String(\"availability\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.StorageType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "ab85152a603a2f1ecc1ee993562e61f4e53ddb760405b917bab8fa23c977308d"
    },
    "a13a8b63fc3c11cdb41dfce27f0048139742ddcf13ffd1edc734f3c5a1459545": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.core as cdk\n\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\nsubnet_group = rds.SubnetGroup(self, \"MySubnetGroup\",\n    description=\"description\",\n    vpc=vpc,\n\n    # the properties below are optional\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    subnet_group_name=\"subnetGroupName\",\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\nSubnetGroup subnetGroup = new SubnetGroup(this, \"MySubnetGroup\", new SubnetGroupProps {\n    Description = \"description\",\n    Vpc = vpc,\n\n    // the properties below are optional\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    SubnetGroupName = \"subnetGroupName\",\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.core.*;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nSubnetGroup subnetGroup = SubnetGroup.Builder.create(this, \"MySubnetGroup\")\n        .description(\"description\")\n        .vpc(vpc)\n\n        // the properties below are optional\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .subnetGroupName(\"subnetGroupName\")\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\nsubnetGroup := rds.NewSubnetGroup(this, jsii.String(\"MySubnetGroup\"), &subnetGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\tvpcSubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst subnetGroup = new rds.SubnetGroup(this, 'MySubnetGroup', {\n  description: 'description',\n  vpc: vpc,\n\n  // the properties below are optional\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  subnetGroupName: 'subnetGroupName',\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SubnetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-rds.SubnetGroup",
        "@aws-cdk/aws-rds.SubnetGroupProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subnetGroup = new rds.SubnetGroup(this, 'MySubnetGroup', {\n  description: 'description',\n  vpc: vpc,\n\n  // the properties below are optional\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  subnetGroupName: 'subnetGroupName',\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "91": 1,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 3,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "326c2dc47ac9e79e688d5da6057e366624e5611042ab3518550b6d9645b2c79b"
    },
    "cf74ebd393f53df714c73ffa0c7f4eb2c82adb60ddd93264497b469d1d821f81": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.core as cdk\n\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\nsubnet_group_props = rds.SubnetGroupProps(\n    description=\"description\",\n    vpc=vpc,\n\n    # the properties below are optional\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    subnet_group_name=\"subnetGroupName\",\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\nSubnetGroupProps subnetGroupProps = new SubnetGroupProps {\n    Description = \"description\",\n    Vpc = vpc,\n\n    // the properties below are optional\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    SubnetGroupName = \"subnetGroupName\",\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.core.*;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nSubnetGroupProps subnetGroupProps = SubnetGroupProps.builder()\n        .description(\"description\")\n        .vpc(vpc)\n\n        // the properties below are optional\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .subnetGroupName(\"subnetGroupName\")\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import rds \"github.com/aws-samples/dummy/awscdkawsrds\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\nsubnetGroupProps := &subnetGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\tvpcSubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst subnetGroupProps: rds.SubnetGroupProps = {\n  description: 'description',\n  vpc: vpc,\n\n  // the properties below are optional\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  subnetGroupName: 'subnetGroupName',\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.SubnetGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-rds.SubnetGroupProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subnetGroupProps: rds.SubnetGroupProps = {\n  description: 'description',\n  vpc: vpc,\n\n  // the properties below are optional\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  subnetGroupName: 'subnetGroupName',\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 36,
        "91": 1,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 3,
        "193": 2,
        "194": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "d1ffb53843e75fc1ce023eefc13e10b0a2362e4d840cbae60776d7d21f4f0863"
    }
  }
}
